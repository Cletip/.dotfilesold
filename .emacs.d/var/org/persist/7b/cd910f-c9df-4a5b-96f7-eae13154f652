(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[[nil nil #3=(headline (:raw-value #1="Org-mode and his familie and workflow" :begin 30 :end 58182 :pre-blank 0 :contents-begin 71 :contents-end 58182 :robust-begin 73 :robust-end 58180 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 30 :title #1# :mode nil :granularity element :cached t :parent #114=(org-data (:begin 1 :contents-begin 2 :contents-end 58182 :end 58182 :robust-begin 4 :robust-end 58180 :post-blank 0 :post-affiliated 1 :path "/home/utilisateur/.emacs.d/config/org-mode.org" :mode org-data :CATEGORY "org-mode" :cached t :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil #116=(headline (:raw-value #2="Expliquer mon organisation de fichier" :begin 71 :end 118 :pre-blank 0 :contents-begin nil :contents-end nil :robust-begin nil :robust-end nil :level 3 :priority nil :tags nil :todo-keyword #("TODO" 0 4 (fontified t face (org-todo org-todo org-level-3) line-prefix #("**" 0 2 (face org-indent)) wrap-prefix #("***** " 0 2 (face org-indent) 2 6 (face org-indent)))) :todo-type todo :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 71 :title #2# :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #3#)) -1] [nil nil #117=(headline (:raw-value #4="Mise en place des différents fichiers org [[id:1cb19f92-8ccc-490d-aa07-9750288efb9d][ici]]" :begin 126 :end 222 :pre-blank 0 :contents-begin nil :contents-end nil :robust-begin nil :robust-end nil :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 126 :title #4# :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #6=(headline (:raw-value #5="Org" :begin 118 :end 38321 :pre-blank 0 :contents-begin 126 :contents-end 38320 :robust-begin 128 :robust-end 38318 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 118 :title #5# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #3#)))) 0] #6# -1] [[[[nil nil #118=(headline (:raw-value #7="Les TODO en done quand tous les sous arbres sont done" :begin 250 :end 1693 :pre-blank 0 :contents-begin 310 :contents-end 1692 :robust-begin 312 :robust-end 1690 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 250 :title #7# :mode section :granularity element :cached t :parent #10=(headline (:raw-value #8="Optimisations de bases" :begin 222 :end 6949 :pre-blank 0 :contents-begin 250 :contents-end 6949 :robust-begin 252 :robust-end 6947 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 222 :title #8# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #6#)) :org-element--cache-sync-key nil)) 0] [nil nil #122=(headline (:raw-value #9="Place de l'archive/pour archiver dans des fichiers différents" :begin 2457 :end 2627 :pre-blank 1 :contents-begin 2526 :contents-end 2627 :robust-begin 2528 :robust-end 2625 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2457 :title #9# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] #120=(headline (:raw-value #11="Better templates / <el shortcutt" :begin 1693 :end 2457 :pre-blank 1 :contents-begin 1733 :contents-end 2457 :robust-begin 1735 :robust-end 2455 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1693 :title #11# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] [nil nil #15=(headline (:raw-value #12="Liens polyvalent (vraiment bien). Et pour faire fonctionner orgzly" :begin 3290 :end 6949 :pre-blank 0 :contents-begin 3363 :contents-end 6949 :robust-begin 3365 :robust-end 6947 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3290 :title #12# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] #123=(headline (:raw-value #13="Pour insérer du sons + Jouer un son quand Done" :begin 2627 :end 3290 :pre-blank 1 :contents-begin 2686 :contents-end 3289 :robust-begin 2688 :robust-end 3287 :level 5 :priority nil :tags nil :todo-keyword #("TODO" 0 4 (fontified t line-prefix #28=#("****" 0 4 (face org-indent)) wrap-prefix #("********* " 0 4 (face org-indent) 4 10 (face org-indent)) face (org-todo org-todo org-level-5))) :todo-type todo :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2627 :title #13# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) -1] [[nil nil #127=(headline (:raw-value #14="Pour mettre des liens directement avec org-insert-link id" :begin 4149 :end 6708 :pre-blank 1 :contents-begin 4215 :contents-end 6707 :robust-begin 4217 :robust-end 6705 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4149 :title #14# :mode nil :granularity element :cached t :parent #15# :org-element--cache-sync-key nil)) 0] [nil nil #130=(headline (:raw-value #16="On update à la fin ?" :begin 6804 :end 6949 :pre-blank 1 :contents-begin 6833 :contents-end 6949 :robust-begin 6835 :robust-end 6947 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6804 :title #16# :mode nil :granularity element :cached t :parent #15# :org-element--cache-sync-key nil)) 0] #128=(headline (:raw-value #17="Pour avoir des id propre" :begin 6708 :end 6804 :pre-blank 1 :contents-begin 6741 :contents-end 6803 :robust-begin 6743 :robust-end 6801 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6708 :title #17# :mode nil :granularity element :cached t :parent #15# :org-element--cache-sync-key nil)) 0] #125=(headline (:raw-value #18="Ce qu'il faut comprendre" :begin 3363 :end 4149 :pre-blank 0 :contents-begin 3395 :contents-end 4148 :robust-begin 3397 :robust-end 4146 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3363 :title #18# :mode section :granularity element :cached t :parent #15# :org-element--cache-sync-key nil)) -1] #10# 1] [[[[[nil nil #22=(headline #19=(:raw-value "Options générales" :begin 7020 :end 7335 :pre-blank 0 :contents-begin 7044 :contents-end 7334 :robust-begin 7046 :robust-end 7332 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7020 :title (#("Options générales" 0 17 (:parent (headline #19#)))) :mode nil :granularity nil :parent #24=(headline #20=(:raw-value "Options sur les exports (sauf Latex) + Nouveaux exports org-modet" :begin 6949 :end 7616 :pre-blank 0 :contents-begin 7020 :contents-end 7615 :robust-begin 7022 :robust-end 7613 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6949 :title (#("Options sur les exports (sauf Latex) + Nouveaux exports org-modet" 0 65 (:parent (headline #20#)))) :mode nil :granularity nil :parent #6# :cached t :org-element--cache-sync-key nil)) :cached t :org-element--cache-sync-key nil)) 0] nil #133=(headline (:raw-value #21="Ignorer les headline avec le tag ignore:" :begin 7044 :end 7238 :pre-blank 1 :contents-begin 7093 :contents-end 7238 :robust-begin 7095 :robust-end 7236 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7044 :title #21# :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #22#)) -1] [[nil nil #136=(headline (:raw-value #23="Html" :begin 7335 :end 7457 :pre-blank 0 :contents-begin 7346 :contents-end 7457 :robust-begin 7348 :robust-end 7455 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7335 :title #23# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #24#)) 0] [nil nil #140=(headline (:raw-value #25="Epub" :begin 7543 :end 7616 :pre-blank 2 :contents-begin 7556 :contents-end 7615 :robust-begin 7558 :robust-end 7613 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7543 :title #25# :mode nil :granularity element :cached t :parent #24# :org-element--cache-sync-key nil)) 0] #139=(headline (:raw-value #26="Pour twitter (why not)" :begin 7457 :end 7543 :pre-blank 0 :contents-begin 7486 :contents-end 7543 :robust-begin 7488 :robust-end 7541 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7457 :title #26# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #24#)) 0] #134=(headline #27=(:raw-value "Ignorer les subtree avec le tag noexport" :begin 7238 :end 7335 :pre-blank 0 :contents-begin 7286 :contents-end 7334 :robust-begin 7288 :robust-end 7332 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7238 :title (#("Ignorer les subtree avec le tag noexport" 0 40 (:parent (headline #27#)))) :mode nil :granularity nil :parent #22# :cached t :org-element--cache-sync-key nil)) 0] [[nil nil #143=(headline (:raw-value #29="Yasnippets de Latex dans org, désactive org bullet, à faire après les yasnippets" :begin 7628 :end 7916 :pre-blank 1 :contents-begin 7721 :contents-end 7915 :robust-begin 7723 :robust-end 7913 :level 5 :priority nil :tags nil :todo-keyword #("TODO" 0 4 (fontified t line-prefix #28# wrap-prefix #("********* " 0 4 (face org-indent) 4 10 (face org-indent)) face (org-todo org-todo org-level-5))) :todo-type todo :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7628 :title #29# :mode section :granularity element :cached t :parent #32=(headline (:raw-value #30="Latext" :begin 7616 :end 7916 :pre-blank 0 :contents-begin 7628 :contents-end 7915 :robust-begin 7630 :robust-end 7913 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7616 :title #30# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #6#)) :org-element--cache-sync-key nil)) 0] nil #34=(headline (:raw-value #31="Esthétique d'org-mode" :begin 7916 :end 14603 :pre-blank 0 :contents-begin 7943 :contents-end 14602 :robust-begin 7945 :robust-end 14600 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7916 :title #31# :mode nil :granularity element :cached t :parent #6# :org-element--cache-sync-key nil)) -1] #32# -1] [[[[nil nil #36=(headline (:raw-value #33="Org emphasis (surligné, souligné etc)" :begin 8323 :end 10131 :pre-blank 0 :contents-begin 8367 :contents-end 10130 :robust-begin 8369 :robust-end 10128 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 8323 :title #33# :mode nil :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) 0] nil #146=(headline (:raw-value #35="Couleurs" :begin 8367 :end 9782 :pre-blank 0 :contents-begin 8383 :contents-end 9781 :robust-begin 8385 :robust-end 9779 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 8367 :title #35# :mode section :granularity element :cached t :parent #36# :org-element--cache-sync-key nil)) -1] [[nil nil #151=(headline (:raw-value #37="Org font (police et taille des titres et checkbox)" :begin 10131 :end 12393 :pre-blank 1 :contents-begin 10189 :contents-end 12393 :robust-begin 10191 :robust-end 12391 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 10131 :title #37# :mode nil :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) 0] nil #153=(headline (:raw-value #38="Nouveau symbole à fin de titres" :begin 12393 :end 12494 :pre-blank 1 :contents-begin 12432 :contents-end 12493 :robust-begin 12434 :robust-end 12491 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 12393 :title #38# :mode nil :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) -1] #147=(headline (:raw-value #39="Pour voir directement les liens, faire disparaître l'emphasis" :begin 9782 :end 10131 :pre-blank 1 :contents-begin 9852 :contents-end 10130 :robust-begin 9854 :robust-end 10128 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 9782 :title #39# :mode nil :granularity element :cached t :parent #36# :org-element--cache-sync-key nil)) 0] [[[nil nil #156=(headline (:raw-value #40="Voir les prévisualisations de latex" :begin 12666 :end 12820 :pre-blank 1 :contents-begin 12710 :contents-end 12819 :robust-begin 12712 :robust-end 12817 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 12666 :title #40# :mode nil :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) 0] nil #157=(headline (:raw-value #41="Indente automatiquement en fonction des titres (attention, que visuel)" :begin 12820 :end 13007 :pre-blank 1 :contents-begin 12898 :contents-end 13005 :robust-begin 12900 :robust-end 13003 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 12820 :title #41# :mode nil :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) -1] [[nil nil #162=(headline (:raw-value #42="Pour mettres les jolis tags :" :begin 14286 :end 14603 :pre-blank 1 :contents-begin 14328 :contents-end 14602 :robust-begin 14330 :robust-end 14600 :level 5 :priority nil :tags nil :todo-keyword #("TODO" 0 4 (fontified t line-prefix #28# wrap-prefix #("********* " 0 4 (face org-indent) 4 10 (face org-indent)) face (org-todo org-todo org-level-5))) :todo-type todo :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 14286 :title #42# :mode nil :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) 0] nil #48=(headline (:raw-value #43="Pour coder dans org" :begin 14603 :end 15895 :pre-blank 0 :contents-begin 14628 :contents-end 15894 :robust-begin 14630 :robust-end 15892 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 14603 :title #43# :mode nil :granularity element :cached t :parent #6# :org-element--cache-sync-key nil)) -1] #161=(headline (:raw-value #44="Jolie icones, ne marche pas chez moi (si mais fait buguer les icônes de dired)" :begin 13007 :end 14286 :pre-blank 1 :contents-begin 13103 :contents-end 14285 :robust-begin 13105 :robust-end 14283 :level 5 :priority nil :tags nil :todo-keyword #("CANCELLED" 0 9 (fontified t line-prefix #28# wrap-prefix #("********* " 0 4 (face org-indent) 4 10 (face org-indent)) face (org-done org-done org-level-5))) :todo-type done :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 13007 :title #44# :mode nil :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) 0] #154=(headline (:raw-value #45="Voir directement les images + leur ajuster leur taille" :begin 12494 :end 12666 :pre-blank 1 :contents-begin 12556 :contents-end 12665 :robust-begin 12558 :robust-end 12663 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 12494 :title #45# :mode nil :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) 0] #144=(headline (:raw-value #46="Petite bulles des titres" :begin 7943 :end 8323 :pre-blank 1 :contents-begin 7975 :contents-end 8322 :robust-begin 7977 :robust-end 8320 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7943 :title #46# :mode section :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) 0] #24# 0] [[[[[[nil nil #166=(headline (:raw-value #47="Annulation de la demande de confirmation lors de la demande d'évaluation du code" :begin 15406 :end 15567 :pre-blank 0 :contents-begin 15493 :contents-end 15567 :robust-begin 15495 :robust-end 15565 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15406 :title #47# :mode nil :granularity element :cached t :parent #48# :org-element--cache-sync-key nil)) 0] nil #168=(headline (:raw-value #49="Indente le code selon le language" :begin 15567 :end 15895 :pre-blank 0 :contents-begin 15607 :contents-end 15894 :robust-begin 15609 :robust-end 15892 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15567 :title #49# :mode nil :granularity element :cached t :parent #48# :org-element--cache-sync-key nil)) -1] [[nil nil #171=(headline (:raw-value #50="Nouveau keyword/state/todo + couleurs" :begin 16057 :end 16968 :pre-blank 1 :contents-begin 16107 :contents-end 16967 :robust-begin 16109 :robust-end 16965 :level 5 :priority nil :tags nil :todo-keyword #("TODO" 0 4 (fontified t line-prefix #28# wrap-prefix #("********* " 0 4 (face org-indent) 4 10 (face org-indent)) face (org-todo org-todo org-level-5))) :todo-type todo :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16057 :title #50# :mode nil :granularity element :cached t :parent #53=(headline (:raw-value #51="Mise en place de GTD dans Org-Mode" :begin 15895 :end 31570 :pre-blank 1 :contents-begin 15936 :contents-end 31570 :robust-begin 15938 :robust-end 31568 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15895 :title #51# :mode nil :granularity element :cached t :parent #6# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil #55=(headline (:raw-value #52="Org-agenda" :begin 16968 :end 20877 :pre-blank 0 :contents-begin 16985 :contents-end 20876 :robust-begin 16987 :robust-end 20874 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16968 :title #52# :mode nil :granularity element :cached t :parent #53# :org-element--cache-sync-key nil)) -1] #53# 0] [[[nil nil #174=(headline (:raw-value #54="Optimisation de base" :begin 17244 :end 18402 :pre-blank 1 :contents-begin 17273 :contents-end 18401 :robust-begin 17275 :robust-end 18399 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17244 :title #54# :mode nil :granularity element :cached t :parent #55# :org-element--cache-sync-key nil)) 0] nil #177=(headline (:raw-value #56="Mes commandes pour séparer Inbox et AgendaTickler" :begin 18402 :end 18772 :pre-blank 1 :contents-begin 18465 :contents-end 18771 :robust-begin 18467 :robust-end 18769 :level 6 :priority nil :tags nil :todo-keyword #("TODO" 0 4 (fontified t line-prefix #61=#("*****" 0 5 (face org-indent)) wrap-prefix #("*********** " 0 5 (face org-indent) 5 12 (face org-indent)) face (org-todo org-todo org-level-6))) :todo-type todo :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 18402 :title #56# :mode nil :granularity element :cached t :parent #55# :org-element--cache-sync-key nil)) -1] [[nil nil #180=(headline (:raw-value #57="Intégration/ syncronisation avec Google calendar" :begin 18871 :end 20877 :pre-blank 1 :contents-begin 18928 :contents-end 20876 :robust-begin 18930 :robust-end 20874 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 18871 :title #57# :mode nil :granularity element :cached t :parent #55# :org-element--cache-sync-key nil)) 0] nil #63=(headline (:raw-value #58="Pour voir les tâches suivantes dans un projet, très pratique !" :begin 20877 :end 29036 :pre-blank 1 :contents-begin 20947 :contents-end 29035 :robust-begin 20949 :robust-end 29033 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 20877 :title #58# :mode nil :granularity element :cached t :parent #53# :org-element--cache-sync-key nil)) -1] #178=(headline (:raw-value #59="Ma commande dashboard (+ super agenda mais pas utilisé)" :begin 18772 :end 18871 :pre-blank 1 :contents-begin 18836 :contents-end 18870 :robust-begin 18838 :robust-end 18868 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 18772 :title #59# :mode nil :granularity element :cached t :parent #55# :org-element--cache-sync-key nil)) 0] #173=(headline (:raw-value #60="Où sont mes fichiers agendas ?" :begin 16985 :end 17244 :pre-blank 2 :contents-begin 17025 :contents-end 17243 :robust-begin 17027 :robust-end 17241 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16985 :title #60# :mode section :granularity element :cached t :parent #55# :org-element--cache-sync-key nil)) 0] [[[[nil nil #65=(headline (:raw-value #62="La custom commande pour voir les tâches suivantes" :begin 27487 :end 29036 :pre-blank 2 :contents-begin 27551 :contents-end 29035 :robust-begin 27553 :robust-end 29033 :level 6 :priority nil :tags nil :todo-keyword #("TODO" 0 4 (fontified t line-prefix #61# wrap-prefix #("*********** " 0 5 (face org-indent) 5 12 (face org-indent)) face (org-todo org-todo org-level-6))) :todo-type todo :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 27487 :title #62# :mode nil :granularity element :cached t :parent #63# :org-element--cache-sync-key nil)) 0] nil #185=(headline (:raw-value #64="La basique" :begin 27551 :end 28973 :pre-blank 0 :contents-begin 27570 :contents-end 28972 :robust-begin 27572 :robust-end 28970 :level 7 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 27551 :title #64# :mode section :granularity element :cached t :parent #65# :org-element--cache-sync-key nil)) -1] [[nil nil #188=(headline (:raw-value #66="Mettre toutes les tâches DONE en archive (fichier ou subtree) avec les commandes suivantes" :begin 29036 :end 30072 :pre-blank 1 :contents-begin 29134 :contents-end 30071 :robust-begin 29136 :robust-end 30069 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 29036 :title #66# :mode nil :granularity element :cached t :parent #53# :org-element--cache-sync-key nil)) 0] nil #190=(headline (:raw-value #67="Mettre toutes les tâches passé en archive, presque fini" :begin 30072 :end 30460 :pre-blank 1 :contents-begin 30140 :contents-end 30459 :robust-begin 30142 :robust-end 30457 :level 5 :priority nil :tags nil :todo-keyword #("TODO" 0 4 (fontified t line-prefix #28# wrap-prefix #("********* " 0 4 (face org-indent) 4 10 (face org-indent)) face (org-todo org-todo org-level-5))) :todo-type todo :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 30072 :title #67# :mode nil :granularity element :cached t :parent #53# :org-element--cache-sync-key nil)) -1] #187=(headline (:raw-value #68="Le super-agenda" :begin 28973 :end 29036 :pre-blank 1 :contents-begin 28998 :contents-end 29035 :robust-begin 29000 :robust-end 29033 :level 7 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 28973 :title #68# :mode nil :granularity element :cached t :parent #65# :org-element--cache-sync-key nil)) 0] [[[[nil nil #192=(headline (:raw-value #69="Tag, dans GTD ? Enlever ces putain de @" :begin 30531 :end 31570 :pre-blank 1 :contents-begin 30583 :contents-end 31570 :robust-begin 30585 :robust-end 31568 :level 5 :priority nil :tags nil :todo-keyword #("TODO" 0 4 (fontified t line-prefix #28# wrap-prefix #("********* " 0 4 (face org-indent) 4 10 (face org-indent)) face (org-todo org-todo org-level-5))) :todo-type todo :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 30531 :title #69# :mode nil :granularity element :cached t :parent #53# :org-element--cache-sync-key nil)) 0] nil #72=(headline (:raw-value #70="Mise en place de la gestion de contact !" :begin 31570 :end 32775 :pre-blank 0 :contents-begin 31621 :contents-end 32775 :robust-begin 31623 :robust-end 32773 :level 4 :priority nil :tags nil :todo-keyword #("TODO" 0 4 (fontified t line-prefix #("***" 0 3 (face org-indent)) wrap-prefix #("******* " 0 3 (face org-indent) 3 8 (face org-indent)) face (org-todo org-todo org-level-4))) :todo-type todo :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 31570 :title #70# :mode nil :granularity element :cached t :parent #6# :org-element--cache-sync-key nil)) -1] [[nil nil #198=(headline (:raw-value #71="Export en vcard compris par google contact (.vcf files to .org marche aussi), en ce moment bug mais normalement ça marche" :begin 32255 :end 32775 :pre-blank 0 :contents-begin 32383 :contents-end 32775 :robust-begin 32385 :robust-end 32773 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 32255 :title #71# :mode nil :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) 0] nil #76=(headline (:raw-value #73="Org capture" :begin 32775 :end 36148 :pre-blank 0 :contents-begin 32792 :contents-end 36147 :robust-begin 32794 :robust-end 36145 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 32775 :title #73# :mode nil :granularity element :cached t :parent #6# :org-element--cache-sync-key nil)) -1] #196=(headline (:raw-value #74="La base" :begin 31621 :end 32255 :pre-blank 0 :contents-begin 31635 :contents-end 32255 :robust-begin 31637 :robust-end 32253 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 31621 :title #74# :mode section :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) 0] [[[nil nil #202=(headline (:raw-value #75="Ajouter des fonctions suites aux captures, comme pour mettre des dates ou créer un ID" :begin 34966 :end 36148 :pre-blank 1 :contents-begin 35059 :contents-end 36147 :robust-begin 35061 :robust-end 36145 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 34966 :title #75# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #76#)) 0] [nil nil #205=(headline (:raw-value #77="Org protocol, pour liéer org-mode et le navigateur web" :begin 37043 :end 37340 :pre-blank 0 :contents-begin 37103 :contents-end 37339 :robust-begin 37169 :robust-end 37337 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 37043 :ID "9bfc7d04-7650-4cd1-a9d4-1982bd667eb7" :title #77# :mode nil :granularity element :cached t :parent #6# :org-element--cache-sync-key nil)) 0] #204=(headline (:raw-value #78="Org refile (pour déplacer rapidement les titres)" :begin 36148 :end 37043 :pre-blank 3 :contents-begin 36205 :contents-end 37043 :robust-begin 36207 :robust-end 37041 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 36148 :title #78# :mode nil :granularity element :cached t :parent #6# :org-element--cache-sync-key nil)) 0] [nil nil #85=(headline (:raw-value #79="Org roam" :begin 38321 :end 58058 :pre-blank 1 :contents-begin 38335 :contents-end 58057 :robust-begin 38337 :robust-end 58055 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38321 :title #79# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #3#)) 0] #208=(headline (:raw-value #80="Org-linkz, pour avoir mes bookmarks sur org" :begin 37340 :end 38321 :pre-blank 1 :contents-begin 37390 :contents-end 38320 :robust-begin 37392 :robust-end 38318 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 37340 :title #80# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #6#)) -1] #200=(headline (:raw-value #81="Moteur de Org-capture" :begin 32792 :end 34966 :pre-blank 0 :contents-begin 32820 :contents-end 34965 :robust-begin 32886 :robust-end 34963 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 32792 :ID "54e7121a-93ed-4fb8-96b7-83cba535c170" :title #81# :mode section :granularity element :cached t :parent #76# :org-element--cache-sync-key nil)) 0] #193=(headline (:raw-value #82="Org clock, pour mesurer le temps que je mets à chaque tâche" :begin 30460 :end 30531 :pre-blank 0 :contents-begin nil :contents-end nil :robust-begin nil :robust-end nil :level 5 :priority nil :tags nil :todo-keyword #("TODO" 0 4 (fontified t line-prefix #28# wrap-prefix #("********* " 0 4 (face org-indent) 4 10 (face org-indent)) face (org-todo org-todo org-level-5))) :todo-type todo :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 30460 :title #82# :mode nil :granularity element :cached t :parent #53# :org-element--cache-sync-key nil)) 1] #183=(headline (:raw-value #83="La fonction" :begin 21492 :end 27487 :pre-blank 1 :contents-begin 21512 :contents-end 27485 :robust-begin 21514 :robust-end 27483 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 21492 :title #83# :mode nil :granularity element :cached t :parent #63# :org-element--cache-sync-key nil)) 1] [[[[nil nil #212=(headline (:raw-value #84="Les org-roam-capture" :begin 39148 :end 40126 :pre-blank 1 :contents-begin 39175 :contents-end 40125 :robust-begin 39177 :robust-end 40123 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 39148 :title #84# :mode nil :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) 0] [nil [nil nil #97=(headline (:raw-value #86="Comment ça marche avec org-cite ?" :begin 41003 :end 42644 :pre-blank 2 :contents-begin 41045 :contents-end 42641 :robust-begin 41047 :robust-end 42639 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 3 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 41003 :title #86# :mode nil :granularity element :cached t :parent #89=(headline (:raw-value #87="Gestion des citations TODO" :begin 40126 :end 52206 :pre-blank 0 :contents-begin 40158 :contents-end 52205 :robust-begin 40160 :robust-end 52203 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 40126 :title #87# :mode nil :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #214=(headline (:raw-value #88="Ce qu'il reste à fairepour org-cite (un jour)" :begin 40774 :end 41003 :pre-blank 0 :contents-begin 40826 :contents-end 41001 :robust-begin 40892 :robust-end 40999 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 40774 :ID "8aac069c-ecda-4a5f-82df-add2a7ddfdcb" :title #88# :mode nil :granularity element :cached t :parent #89# :org-element--cache-sync-key nil)) 1] #89# 1] [[[nil nil #218=(headline (:raw-value #90="Citar, les propositions avec citar-insert-citation" :begin 42644 :end 44152 :pre-blank 1 :contents-begin 42702 :contents-end 44151 :robust-begin 42704 :robust-end 44149 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 42644 :title #90# :mode nil :granularity element :cached t :parent #89# :org-element--cache-sync-key nil)) 0] nil #219=(headline (:raw-value #91="Pour les exports" :begin 44152 :end 46414 :pre-blank 0 :contents-begin 44175 :contents-end 46412 :robust-begin 44241 :robust-end 46410 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 44152 :ID "7ebb8fdb-0d07-4b8d-b86a-9d8cf2109848" :title #91# :mode nil :granularity element :cached t :parent #89# :org-element--cache-sync-key nil)) -1] [[nil nil #94=(headline (:raw-value #92="Config org ref, pas utilisé !!!" :begin 48972 :end 52206 :pre-blank 0 :contents-begin 49010 :contents-end 52205 :robust-begin 49012 :robust-end 52203 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 48972 :title #92# :mode nil :granularity element :cached t :parent #89# :org-element--cache-sync-key nil)) 0] nil #224=(headline (:raw-value #93="Comment ça marche avec org ref + citar? TODO" :begin 49010 :end 50533 :pre-blank 1 :contents-begin 49063 :contents-end 50531 :robust-begin 49065 :robust-end 50529 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 49010 :title #93# :mode section :granularity element :cached t :parent #94# :org-element--cache-sync-key nil)) -1] #221=(headline (:raw-value #95="Trouver si une citation est affilié à un noeud. Si oui, alors bug lol y'a plus qu'à la trouver ! Permet aussi d'ajouter les sources" :begin 46414 :end 48972 :pre-blank 2 :contents-begin 46554 :contents-end 48968 :robust-begin 46556 :robust-end 48966 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 4 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 46414 :title #95# :mode nil :granularity element :cached t :parent #89# :org-element--cache-sync-key nil)) 0] #216=(headline (:raw-value #96="Pour l'installation de zotero + extension betterbitex" :begin 41045 :end 41963 :pre-blank 0 :contents-begin 41106 :contents-end 41962 :robust-begin 41172 :robust-end 41960 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 41045 :ID "e254ed4d-d47b-4b9d-9155-108772b8b2c7" :title #96# :mode section :granularity element :cached t :parent #97# :org-element--cache-sync-key nil)) 0] [[[[nil nil #227=(headline (:raw-value #98="Org roam ui (org roam server pour org roam v2)," :begin 52206 :end 52770 :pre-blank 0 :contents-begin 52259 :contents-end 52769 :robust-begin 52261 :robust-end 52767 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 52206 :title #98# :mode nil :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) 0] nil #101=(headline (:raw-value #99="Amélioration mineur" :begin 52770 :end 57039 :pre-blank 0 :contents-begin 52795 :contents-end 57038 :robust-begin 52797 :robust-end 57036 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 52770 :title #99# :mode nil :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) -1] [[nil nil #231=(headline (:raw-value #100="hiérarchie quand on cherche/insert une note" :begin 54102 :end 55128 :pre-blank 1 :contents-begin 54153 :contents-end 55127 :robust-begin 54155 :robust-end 55125 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 54102 :title #100# :mode nil :granularity element :cached t :parent #101# :org-element--cache-sync-key nil)) 0] nil #233=(headline (:raw-value #102="Qu'est ce qu'on met lorsque l'on recherche un node (nombre = nombre de caractère)" :begin 55128 :end 55859 :pre-blank 1 :contents-begin 55217 :contents-end 55858 :robust-begin 55219 :robust-end 55856 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 55128 :title #102# :mode nil :granularity element :cached t :parent #101# :org-element--cache-sync-key nil)) -1] #230=(headline (:raw-value #103="Voir le nombre de backlinks d'une note + Utiliser la souris sur le buffer backlinks" :begin 52795 :end 54102 :pre-blank 1 :contents-begin 52886 :contents-end 54101 :robust-begin 52888 :robust-end 54099 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 52795 :title #103# :mode section :granularity element :cached t :parent #101# :org-element--cache-sync-key nil)) 0] [[[nil nil #236=(headline (:raw-value #104="Deft, pour chercher dans toutes les notes d'org-roam" :begin 57039 :end 57407 :pre-blank 1 :contents-begin 57098 :contents-end 57406 :robust-begin 57100 :robust-end 57404 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 57039 :title #104# :mode nil :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) 0] nil #239=(headline (:raw-value #105="Convertir les fichiers org en markdown hugo" :begin 57407 :end 57619 :pre-blank 1 :contents-begin 57457 :contents-end 57618 :robust-begin 57459 :robust-end 57616 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 57407 :title #105# :mode nil :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) -1] [[nil nil #242=(headline (:raw-value #106="Org roam protocol, pas utilisé" :begin 57866 :end 58058 :pre-blank 0 :contents-begin 57902 :contents-end 58057 :robust-begin 57904 :robust-end 58055 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 57866 :title #106# :mode nil :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) 0] [nil nil #244=(headline (:raw-value #107="Pour faire des supers recherches, vraiment bien" :begin 58075 :end 58182 :pre-blank 1 :contents-begin 58128 :contents-end 58182 :robust-begin 58130 :robust-end 58180 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 58075 :title #107# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #246=(headline (:raw-value #108="Org publish" :begin 58058 :end 58075 :pre-blank 0 :contents-begin nil :contents-end nil :robust-begin nil :robust-end nil :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 58058 :title #108# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #241=(headline (:raw-value #109="Hook pour les draft à chaque fois lors d'une capture" :begin 57619 :end 57866 :pre-blank 1 :contents-begin 57678 :contents-end 57865 :robust-begin 57680 :robust-end 57863 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 57619 :title #109# :mode nil :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) 0] #234=(headline (:raw-value #110="Fonction pour cacher les propertie au début des fichier, très peu utiliser" :begin 55859 :end 57039 :pre-blank 1 :contents-begin 55941 :contents-end 57038 :robust-begin 55943 :robust-end 57036 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 55859 :title #110# :mode nil :granularity element :cached t :parent #101# :org-element--cache-sync-key nil)) 0] #226=(headline (:raw-value #111="Org-ref" :begin 50533 :end 52206 :pre-blank 2 :contents-begin 50550 :contents-end 52205 :robust-begin 50552 :robust-end 52203 :level 6 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 50533 :title #111# :mode nil :granularity element :cached t :parent #94# :org-element--cache-sync-key nil)) 0] #210=(headline (:raw-value #112="Org roam(moteur)" :begin 38335 :end 39148 :pre-blank 2 :contents-begin 38359 :contents-end 39147 :robust-begin 38361 :robust-end 39145 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 38335 :title #112# :mode section :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) -1] #164=(headline (:raw-value #113="Les langages chargé par org-babel" :begin 14628 :end 15406 :pre-blank 1 :contents-begin 14669 :contents-end 15406 :robust-begin 14671 :robust-end 15404 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 14628 :title #113# :mode section :granularity element :cached t :parent #48# :org-element--cache-sync-key nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[[nil nil #114# 0] [nil nil (paragraph (:begin 2 :end 30 :contents-begin 2 :contents-end 29 :post-blank 1 :post-affiliated 2 :mode top-comment :granularity element :cached t :parent #115=(section (:begin 2 :end 30 :contents-begin 2 :contents-end 29 :robust-begin 2 :robust-end 27 :post-blank 1 :post-affiliated 2 :mode first-section :granularity element :cached t :parent #114# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #115# 0] [nil nil #116# 0] #3# -1] [[nil nil #117# 0] [nil nil #118# 0] #10# 0] #6# -1] [[[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 310 :end 668 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "     (defun org-summary-todo (n-done n-not-done)\12       \"Switch entry to DONE when all subentries are done, to TODO otherwise.\"\12       (let (org-log-done org-log-states)   ; turn off logging\12         (org-todo (if (= n-not-done 0) \"DONE\" \"TODO\"))))\12\12     (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)\12" :post-blank 1 :post-affiliated 310 :mode planning :granularity element :cached t :parent #119=(section (:begin 310 :end 1693 :contents-begin 310 :contents-end 1692 :robust-begin 310 :robust-end 1690 :post-blank 1 :post-affiliated 310 :mode section :granularity element :cached t :parent #118# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 686 :end 1693 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\11    (defun my/org-checkbox-todo ()\12\11      \"Switch header TODO state to DONE when all checkboxes are ticked, to TODO otherwise\"\12\11      (let ((todo-state (org-get-todo-state)) beg end)\12\11\11(unless (not todo-state)\12\11\11  (save-excursion\12\11\11(org-back-to-heading t)\12\11\11(setq beg (point))\12\11\11(end-of-line)\12\11\11(setq end (point))\12\11\11(goto-char beg)\12\11\11(if (re-search-forward \"\\\\[\\\\([0-9]*%\\\\)\\\\]\\\\|\\\\[\\\\([0-9]*\\\\)/\\\\([0-9]*\\\\)\\\\]\"\12\11\11\11       end t)\12\11\11    (if (match-end 1)\12\11\11    (if (equal (match-string 1) \"100%\")\12\11\11\11(unless (string-equal todo-state \"DONE\")\12\11\11\11  (org-todo 'done))\12\11\11      (unless (string-equal todo-state \"TODO\")\12\11\11\11(org-todo 'todo)))\12\11\11      (if (and (> (match-end 2) (match-beginning 2))\12\11\11\11   (equal (match-string 2) (match-string 3)))\12\11\11      (unless (string-equal todo-state \"DONE\")\12\11\11\11(org-todo 'done))\12\11\11    (unless (string-equal todo-state \"TODO\")\12\11\11      (org-todo 'todo)))))))))\12      \12      (add-hook 'org-checkbox-statistics-hook 'my/org-checkbox-todo)\12" :post-blank 1 :post-affiliated 686 :mode nil :granularity element :cached t :parent #119# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 668 :end 686 :contents-begin 668 :contents-end 686 :post-blank 0 :post-affiliated 668 :mode nil :granularity element :cached t :parent #119# :org-element--cache-sync-key nil)) 0] [[nil nil #121=(section (:begin 1733 :end 2457 :contents-begin 1733 :contents-end 2457 :robust-begin 1733 :robust-end 2455 :post-blank 0 :post-affiliated 1733 :mode section :granularity element :cached t :parent #120# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 1807 :end 2457 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      (require 'org-tempo)\12      \12      (add-to-list 'org-structure-template-alist '(\"sh\" . \"src sh\"))\12      (add-to-list 'org-structure-template-alist '(\"cd\" . \"src C\"))\12      (add-to-list 'org-structure-template-alist '(\"el\" . \"src emacs-lisp\"))\12      (add-to-list 'org-structure-template-alist '(\"sc\" . \"src scheme\"))\12      (add-to-list 'org-structure-template-alist '(\"ts\" . \"src typescript\"))\12      (add-to-list 'org-structure-template-alist '(\"py\" . \"src python\"))\12      (add-to-list 'org-structure-template-alist '(\"yaml\" . \"src yaml\"))\12      (add-to-list 'org-structure-template-alist '(\"json\" . \"src json\"))\12" :post-blank 0 :post-affiliated 1807 :mode nil :granularity element :cached t :parent #121# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 1733 :end 1807 :contents-begin 1733 :contents-end 1805 :post-blank 2 :post-affiliated 1733 :mode planning :granularity element :cached t :parent #121# :org-element--cache-sync-key nil)) 0] #120# 0] [[[nil nil #124=(section (:begin 2526 :end 2627 :contents-begin 2526 :contents-end 2627 :robust-begin 2526 :robust-end 2625 :post-blank 0 :post-affiliated 2526 :mode section :granularity element :cached t :parent #122# :org-element--cache-sync-key nil)) 0] [nil nil #123# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 2526 :end 2627 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (setq org-archive-location \"%s_archive::* ArchivedTasksfrom%s\")\12" :post-blank 0 :post-affiliated 2526 :mode planning :granularity element :cached t :parent #124# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle no" :begin 2686 :end 3290 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  ;; pour insérer un son\12  (use-package emms)\12  (emms-all)\12  (emms-default-players)\12  ;; (setq emms-source-file-default-directory \"/home/msi/Notes/Roam/sounds\")\12  (use-package org-emms)\12\12  ;; pour le done\12  (defun my-org-after-todo-state-change ()\12    (when (string-equal org-state \"DONE\")\12      (org-clock-out-if-current)\12      (emms-add-file \"/home/msi/.emacs.d/sound/done.mp3\")\12      (emms-start)\12      ;; (emms-play-file \"/home/msi/.emacs.d/sound/done.mp3\")\12      )\12    )\12\12  (add-hook 'org-after-todo-state-change-hook 'my-org-after-todo-state-change)\12\12\12" :post-blank 1 :post-affiliated 2686 :mode planning :granularity element :cached t :parent #126=(section (:begin 2686 :end 3290 :contents-begin 2686 :contents-end 3289 :robust-begin 2686 :robust-end 3287 :post-blank 1 :post-affiliated 2686 :mode section :granularity element :cached t :parent #123# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #125# 0] #15# 0] #126# 0] #122# 0] [[[nil nil #129=(section (:begin 4215 :end 6708 :contents-begin 4215 :contents-end 6707 :robust-begin 4215 :robust-end 6705 :post-blank 1 :post-affiliated 4215 :mode section :granularity element :cached t :parent #127# :org-element--cache-sync-key nil)) 0] [nil nil #128# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 4215 :end 6708 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  ;; pour que les liens soit relatif, et donc pour pouvoir l'installer sur n'importe qu'elle ordinateur !\12  (setq org-id-locations-file-relative t)\12\12  ;;lieu du fichier des loccation :\12  ;;voir no-littering\12\12  ;;voir le manual pour plus d'information. Ne me créera pas d'id inutile\12  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)\12\12  ;; ;; Où chercher des fichiers en plus pour les ID.  Si la valeur de org-id-extra-files est nul, alors org-agenda-text-search-extra-files prendra le dessus, mais cela correspond aussi aux fichiers org-agenda ajouté. Il faut donc prendre d'autres fichiers. Là, j'ai vraiment tout mis.\12  (setq org-id-extra-files\12        (append\12         mesdocuments-directory-all-org-files\12         org-directory-all-org-files\12         shared-directory-private-all-org-files\12         my-user-emacs-configuration-list\12         )\12        )\12\12  ;;ceci est la liste des fichiers (qui pernds des liste en paramètre) qui vont s'afficher quand on va faire un org-insert-link id. même syntaxe que les refile\12  (setq org-try-targets\12        '(\12          ;;refile dans le buffer courant jusqu'au niveau 7\12          (nil :maxlevel . 7)\12          ;;refile dans tous les fichiers de l'agenda jusqu'au niveau 5\12          (org-agenda-files :maxlevel . 5)\12          ;;refile les documents\12          (mesdocuments-directory-all-org-files :maxlevel . 1)\12          ;;pour refile document_partage\12          (shared-directory-private-all-org-files :maxlevel . 5)\12          (my-user-emacs-configuration-list :maxlevel . 5)\12          )\12        )\12\12\12  ;; pour la complétion lors de l'insertion d'un lien id avec org-insert-link id, la complétion est \12  ;;il faut personnaliser org-try-targets comme un org-refile-targets\12  (defun org-id-complete-link (&optional arg)\12    \"Create an id: link using completion\"\12    (concat \"id:\"\12            (org-id-get-with-outline-path-completion org-try-targets)\12            ;; (org-id-get-with-outline-path-completion org-id-extra-files)            ;; là je prends vraiment tout\12            ;; (org-id-get-with-outline-path-completion org-refile-targets) ;;pas mal pour les refiles\12            ;; (org-id-get-with-outline-path-completion) ;; pour avoir d'autres completion par exemple\12            )\12    )\12  ;;pour que ça marche après org 9.0\12  (org-link-set-parameters \"id\" :complete 'org-id-complete-link)\12\12\12\12  ;; (setq org-refile-use-outline-path 'file)\12  ;; (setq org-outline-path-complete-in-steps t)\12\12" :post-blank 1 :post-affiliated 4215 :mode planning :granularity element :cached t :parent #129# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 6741 :end 6804 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package org-id-cleanup)\12" :post-blank 1 :post-affiliated 6741 :mode planning :granularity element :cached t :parent #132=(section (:begin 6741 :end 6804 :contents-begin 6741 :contents-end 6803 :robust-begin 6741 :robust-end 6801 :post-blank 1 :post-affiliated 6741 :mode section :granularity element :cached t :parent #128# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [[nil nil #131=(section (:begin 6833 :end 6949 :contents-begin 6833 :contents-end 6949 :robust-begin 6833 :robust-end 6947 :post-blank 0 :post-affiliated 6833 :mode section :granularity element :cached t :parent #130# :org-element--cache-sync-key nil)) 0] nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 6833 :end 6949 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; Update ID file .org-id-locations on startup\12  ;; (org-id-update-id-locations)\12" :post-blank 0 :post-affiliated 6833 :mode planning :granularity element :cached t :parent #131# :org-element--cache-sync-key nil)) -1] #130# 1] #132# 1] #127# 0] #119# 1] [[[[[[nil nil #22# 0] nil #133# -1] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7093 :end 7238 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (with-eval-after-load 'org-contrib\12    (require 'ox-extra)\12    (ox-extras-activate '(ignore-headlines))\12    )\12" :post-blank 0 :post-affiliated 7093 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #135=(section (:begin 7093 :end 7238 :contents-begin 7093 :contents-end 7238 :robust-begin 7093 :robust-end 7236 :post-blank 0 :post-affiliated 7093 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #133#)))) 0] nil #134# -1] #135# 0] [[nil [nil nil #136# 0] (paragraph (:begin 7286 :end 7335 :contents-begin 7286 :contents-end 7334 :post-blank 1 :post-affiliated 7286 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #138=(section (:begin 7286 :end 7335 :contents-begin 7286 :contents-end 7334 :robust-begin 7286 :robust-end 7332 :post-blank 1 :post-affiliated 7286 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #134#)))) 1] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7346 :end 7457 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package htmlize\12    :config\12    (setq org-html-doctype \"html5\")\12    )\12" :post-blank 0 :post-affiliated 7346 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #137=(section (:begin 7346 :end 7457 :contents-begin 7346 :contents-end 7457 :robust-begin 7346 :robust-end 7455 :post-blank 0 :post-affiliated 7346 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #136#)))) 0] #137# -1] #138# 0] [[nil nil #142=(section (:begin 7486 :end 7543 :contents-begin 7486 :contents-end 7543 :robust-begin 7486 :robust-end 7541 :post-blank 0 :post-affiliated 7486 :mode section :granularity element :cached t :parent #139# :org-element--cache-sync-key nil)) 0] [[nil nil #140# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7556 :end 7616 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package ox-epub)\12" :post-blank 1 :post-affiliated 7556 :mode planning :granularity element :cached t :parent #141=(section (:begin 7556 :end 7616 :contents-begin 7556 :contents-end 7615 :robust-begin 7556 :robust-end 7613 :post-blank 1 :post-affiliated 7556 :mode section :granularity element :cached t :parent #140# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #141# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7486 :end 7543 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package ox-twbs)\12" :post-blank 0 :post-affiliated 7486 :mode planning :granularity element :cached t :parent #142# :org-element--cache-sync-key nil)) 1] #139# -1] [[[[[nil nil #143# 0] nil #145=(section (:begin 7721 :end 7916 :contents-begin 7721 :contents-end 7915 :robust-begin 7721 :robust-end 7913 :post-blank 1 :post-affiliated 7721 :mode section :granularity element :cached t :parent #143# :org-element--cache-sync-key nil)) -1] [[nil nil #34# 0] [nil nil #150=(section (:begin 7975 :end 8323 :contents-begin 7975 :contents-end 8322 :robust-begin 7975 :robust-end 8320 :post-blank 1 :post-affiliated 7975 :mode section :granularity element :cached t :parent #144# :org-element--cache-sync-key nil)) 0] #144# 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle no" :begin 7721 :end 7916 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (defun my-org-latex-yas ()\12    (yas-minor-mode)\12    (yas-activate-extra-mode 'latex-mode)\12    )\12\12\12  (add-hook 'org-mode-hook 'my-org-latex-yas)\12  \12" :post-blank 1 :post-affiliated 7721 :mode planning :granularity element :cached t :parent #145# :org-element--cache-sync-key nil)) 0] [[[nil nil #36# 0] [nil nil #149=(section (:begin 8383 :end 9782 :contents-begin 8383 :contents-end 9781 :robust-begin 8383 :robust-end 9779 :post-blank 1 :post-affiliated 8383 :mode section :granularity element :cached t :parent #146# :org-element--cache-sync-key nil)) 0] #146# 0] [[nil nil #147# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 9852 :end 10131 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (setq org-hide-emphasis-markers t)\12  (straight-use-package '(org-appear :type git :host github :repo \"awth13/org-appear\"))\12  (add-hook 'org-mode-hook 'org-appear-mode)\12\12  ;;affiche les liens entier avec t\12  ;; (setq org-appear-autolinks t)\12\12" :post-blank 1 :post-affiliated 9852 :mode planning :granularity element :cached t :parent #148=(section (:begin 9852 :end 10131 :contents-begin 9852 :contents-end 10130 :robust-begin 9852 :robust-end 10128 :post-blank 1 :post-affiliated 9852 :mode section :granularity element :cached t :parent #147# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #148# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 8383 :end 9782 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (setq org-emphasis-alist\12\11'((\"*\" bold)\12\11  (\"/\" italic)\12\11  (\"_\" underline)\12\11  (\"=\" (:foreground \"yellow\")) ;;on ne peut pas surligner lors de l'export\12\11  (\"~\" org-code verbatim)\12\11  (\"+\" (:strike-through t))))\12\12  (defface my-org-emphasis-bold\12    '((default :inherit bold)\12      (((class color) (min-colors 88) (background light))\12       :foreground \"#a60000\")\12      (((class color) (min-colors 88) (background dark))\12       :foreground \"#ff8059\"))\12    \"My bold emphasis for Org.\")\12\12  (defface my-org-emphasis-italic\12    '((default :inherit italic)\12      (((class color) (min-colors 88) (background light))\12       :foreground \"#005e00\")\12      (((class color) (min-colors 88) (background dark))\12       :foreground \"#44bc44\"))\12    \"My italic emphasis for Org.\")\12\12  (defface my-org-emphasis-underline\12    '((default :inherit underline)\12      (((class color) (min-colors 88) (background light))\12       :foreground \"#813e00\")\12      (((class color) (min-colors 88) (background dark))\12       :foreground \"#d0bc00\"))\12    \"My underline emphasis for Org.\")\12\12  (defface my-org-emphasis-strike-through\12    '((((class color) (min-colors 88) (background light))\12       :strike-through \"#972500\" :foreground \"#505050\")\12      (((class color) (min-colors 88) (background dark))\12       :strike-through \"#ef8b50\" :foreground \"#a8a8a8\"))\12    \"My strike-through emphasis for Org.\")\12\12\12" :post-blank 1 :post-affiliated 8383 :mode planning :granularity element :cached t :parent #149# :org-element--cache-sync-key nil)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7975 :end 8323 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (use-package org-bullets\12    :after org\12    :hook(org-mode . org-bullets-mode)\12    )\12\12  ;; (use-package org-superstar\12  ;; :after org\12  ;; :hook (org-mode . org-superstar-mode)\12  ;; :custom\12  ;; (org-superstar-remove-leading-stars t)\12  ;; (org-superstar-headline-bullets-list '(\"◉\" \"○\" \"●\" \"○\" \"●\" \"○\" \"●\")))\12\12" :post-blank 1 :post-affiliated 7975 :mode planning :granularity element :cached t :parent #150# :org-element--cache-sync-key nil)) 0] [[[[nil nil #152=(section (:begin 10189 :end 12393 :contents-begin 10189 :contents-end 12393 :robust-begin 10189 :robust-end 12391 :post-blank 0 :post-affiliated 10189 :mode section :granularity element :cached t :parent #151# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 10227 :end 12393 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  ;;Pour obtenir des polices proportionnelles\12  ;; (variable-pitch-mode 1)\12\12  ;; Make sure org-indent face is available\12\12  (require 'org-indent)\12\12  (set-face-attribute 'org-document-title nil :font \"Fira Mono\" :weight 'bold :height 1.5)\12  (dolist (face '((org-level-1 . 1.3)\12                  (org-level-2 . 1.25)\12                  (org-level-3 . 1.20)\12                  (org-level-4 . 1.15)\12                  (org-level-5 . 1.10)\12                  (org-level-6 . 1.05)\12                  (org-level-7 . 1.0)\12                  (org-level-8 . 1.0)))\12    (set-face-attribute (car face) nil :font \"Fira Mono\" :weight 'medium :height (cdr face))\12    )\12\12\12  ;; Ensure that anything that should be fixed-pitch in Org files appears that way\12  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)\12  (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)\12  (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)\12  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))\12  (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))\12  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))\12  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))\12  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))\12  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)\12\12  ;;couleur des checkbox\12  (defface org-checkbox-todo-text\12    '((t (:inherit org-todo)))\12    \"Face for the text part of an unchecked org-mode checkbox.\")\12\12  (font-lock-add-keywords\12   'org-mode\12   `((\"^[ \\t]*\\\\(?:[-+*]\\\\|[0-9]+[).]\\\\)[ \\t]+\\\\(\\\\(?:\\\\[@\\\\(?:start:\\\\)?[0-9]+\\\\][ \\t]*\\\\)?\\\\[\\\\(?: \\\\|\\\\([0-9]+\\\\)/\\\\2\\\\)\\\\][^\\n]*\\n\\\\)\" 1 'org-checkbox-todo-text prepend))\12   'append)\12\12  (defface org-checkbox-done-text\12    '((t (:inherit org-done)))\12    \"Face for the text part of a checked org-mode checkbox.\")\12\12  (font-lock-add-keywords\12   'org-mode\12   `((\"^[ \\t]*\\\\(?:[-+*]\\\\|[0-9]+[).]\\\\)[ \\t]+\\\\(\\\\(?:\\\\[@\\\\(?:start:\\\\)?[0-9]+\\\\][ \\t]*\\\\)?\\\\[\\\\(?:X\\\\|\\\\([0-9]+\\\\)/\\\\2\\\\)\\\\][^\\n]*\\n\\\\)\" 1 'org-checkbox-done-text prepend))\12   'append)\12\12" :post-blank 0 :post-affiliated 10227 :mode nil :granularity element :cached t :parent #152# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 10189 :end 10227 :contents-begin 10189 :contents-end 10226 :post-blank 1 :post-affiliated 10189 :mode planning :granularity element :cached t :parent #152# :org-element--cache-sync-key nil)) 0] [[nil nil #155=(section (:begin 12432 :end 12494 :contents-begin 12432 :contents-end 12493 :robust-begin 12432 :robust-end 12491 :post-blank 1 :post-affiliated 12432 :mode section :granularity element :cached t :parent #153# :org-element--cache-sync-key nil)) 0] [nil nil #154# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 12432 :end 12494 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (setq org-ellipsis \"⬎\")\12\12" :post-blank 1 :post-affiliated 12432 :mode planning :granularity element :cached t :parent #155# :org-element--cache-sync-key nil)) 0] #153# 0] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 12556 :end 12666 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(setq org-startup-with-inline-images t)\12(setq org-image-actual-width 800)  \12" :post-blank 1 :post-affiliated 12556 :mode planning :granularity element :cached t :parent #160=(section (:begin 12556 :end 12666 :contents-begin 12556 :contents-end 12665 :robust-begin 12556 :robust-end 12663 :post-blank 1 :post-affiliated 12556 :mode section :granularity element :cached t :parent #154# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #159=(section (:begin 12710 :end 12820 :contents-begin 12710 :contents-end 12819 :robust-begin 12710 :robust-end 12817 :post-blank 1 :post-affiliated 12710 :mode section :granularity element :cached t :parent #156# :org-element--cache-sync-key nil)) 0] #156# 0] [[nil nil #157# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 12898 :end 13007 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-hook 'org-mode-hook 'org-indent-mode)\12  (diminish org-indent-mode)\12" :post-blank 2 :post-affiliated 12898 :mode planning :granularity element :cached t :parent #158=(section (:begin 12898 :end 13007 :contents-begin 12898 :contents-end 13005 :robust-begin 12898 :robust-end 13003 :post-blank 2 :post-affiliated 12898 :mode section :granularity element :cached t :parent #157# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #158# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 12710 :end 12820 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package org-fragtog\12    :hook (org-mode . org-fragtog-mode)\12    )\12" :post-blank 1 :post-affiliated 12710 :mode planning :granularity element :cached t :parent #159# :org-element--cache-sync-key nil)) 0] #160# 0] #151# 0] #32# 0] #24# 0] [[[[[[nil nil #163=(section (:begin 13103 :end 14286 :contents-begin 13103 :contents-end 14285 :robust-begin 13103 :robust-end 14283 :post-blank 1 :post-affiliated 13103 :mode section :granularity element :cached t :parent #161# :org-element--cache-sync-key nil)) 0] [nil nil #162# 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle no" :begin 13103 :end 14286 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (defun org-icons+todoicons ()\12\11   \"Beautify org mode keywords.\"\12\11   (interactive)\12\11   (setq prettify-symbols-alist '(\12\11\11\11\11\11  (\"TODO\" . \"\")\12\11\11\11\11\11  (\"PEUT-ÊTRE\" . \"\")\12\11\11\11\11\11  (\"EN-COURS\" . \"\")\12\11\11\11\11\11  (\"ANNULÉ\" . \"\")\12\11\11\11\11\11  (\"DONE\" . \"\")\12\11\11\11\11\11  (\"[#A]\" . \"\")\12\11\11\11\11\11  (\"[#B]\" . \"\")\12\11\11\11\11\11  (\"[#C]\" . \"\")\12\11\11\11\11\11  (\"-\" . \"➤\")\12\11\11\11\11\11  (\"[ ]\" . \"\")\12\11\11\11\11\11  (\"[X]\" . \"\")\12\11\11\11\11\11  (\"[-]\" . \"\")\12\11\11\11\11\11  (\"#+begin_src\" . ?)\12\11\11\11\11\11  (\"#+BEGIN_SRC\" . ?)\12\11\11\11\11\11  (\"#+end_src\" . ?)\12\11\11\11\11\11  (\"#+END_SRC\" . ?)\12\11\11\11\11\11  (\":PROPERTIES:\" . \"\")\12\11\11\11\11\11  (\":END:\" . \"―\")\12\11\11\11\11\11  (\"#+STARTUP:\" . \"\")\12\11\11\11\11\11  (\"#+TITLE: \" . \"\")\12\11\11\11\11\11  (\"#+RESULTS:\" . \"\")\12\11\11\11\11\11  (\"#+NAME:\" . \"\")\12\11\11\11\11\11  (\":ROAM_ALIASES:\" . \"\")\12\11\11\11\11\11  (\"#+FILETAGS:\" . \"\")\12\11\11\11\11\11  (\"#+HTML_HEAD:\" . \"\")\12\11\11\11\11\11  (\"#+SUBTITLE:\" . \"\")\12\11\11\11\11\11  (\"#+AUTHOR:\" . \"\")\12\11\11\11\11\11  (\":Effort:\" . \"\")\12\11\11\11\11\11  (\"SCHEDULED:\" . \"\")\12\11\11\11\11\11  (\"DEADLINE:\" . \"\")\12\11\11\11\11\11  ))\12\11   (prettify-symbols-mode)\12\11   (magic-icon-fix)\12\11   )\12\12  (defun magic-icon-fix ()\12      (interactive)\12\11(let ((fontset (face-attribute 'default :fontset)))\12\11      (set-fontset-font fontset '(?\\xf000 . ?\\xf2ff) \"FontAwesome\" nil 'append)))\12\12\12\12" :post-blank 1 :post-affiliated 13103 :mode planning :granularity element :cached t :parent #163# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 14328 :end 14603 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(use-package org-pretty-tags\12  :config\12   (setq org-pretty-tags-surrogate-strings\12\11 (quote\12\11  ((\"@office\" . \"✍\")\12\11   (\"PROJEKT\" . \"💡\")\12\11   (\"SERVICE\" . \"✍\")\12\11   (\"Blog\" . \"✍\")\12\11   (\"music\" . \"♬\")\12\11   )))\12   (org-pretty-tags-global-mode))\12\12" :post-blank 1 :post-affiliated 14328 :mode planning :granularity element :cached t :parent #165=(section (:begin 14328 :end 14603 :contents-begin 14328 :contents-end 14602 :robust-begin 14328 :robust-end 14600 :post-blank 1 :post-affiliated 14328 :mode section :granularity element :cached t :parent #162# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #164# 0] #48# 0] #165# 0] [[[nil nil (paragraph (:begin 14669 :end 14714 :contents-begin 14669 :contents-end 14713 :post-blank 1 :post-affiliated 14669 :mode planning :granularity element :cached t :parent #167=(section (:begin 14669 :end 15406 :contents-begin 14669 :contents-end 15406 :robust-begin 14669 :robust-end 15404 :post-blank 0 :post-affiliated 14669 :mode section :granularity element :cached t :parent #164# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #166# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 14714 :end 15406 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (org-babel-do-load-languages\12   'org-babel-load-languages\12   '(\12     ;; (ditaa      . t)\12     (C          . t)\12     ;; (dot        . t)\12     (emacs-lisp . t)\12     ;; (scheme     . t)\12     ;; (gnuplot    . t)\12     ;; (haskell    . t)\12     (latex      . t)\12     ;; (js         . t)\12     ;; (ledger     . t)\12     ;; (matlab     . t)\12     ;; (ocaml      . t)\12     ;; (octave     . t)\12     ;; (plantuml   . t)\12     (python     . t)\12     ;; (R          . t)\12     ;; (ruby       . t)\12     ;; (screen     . nil)\12     ;; (scheme     . t)\12     (shell      . t)\12     (sql        . t)\12     (sqlite     . t)\12     (java     . t)\12     (js . t) ;;javascripts\12     )\12   )  \12" :post-blank 0 :post-affiliated 14714 :mode nil :granularity element :cached t :parent #167# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15493 :end 15567 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq org-confirm-babel-evaluate nil)\12" :post-blank 0 :post-affiliated 15493 :mode planning :granularity element :cached t :parent #169=(section (:begin 15493 :end 15567 :contents-begin 15493 :contents-end 15567 :robust-begin 15493 :robust-end 15565 :post-blank 0 :post-affiliated 15493 :mode section :granularity element :cached t :parent #166# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #170=(section (:begin 15607 :end 15895 :contents-begin 15607 :contents-end 15894 :robust-begin 15607 :robust-end 15892 :post-blank 1 :post-affiliated 15607 :mode section :granularity element :cached t :parent #168# :org-element--cache-sync-key nil)) 0] #168# 0] #169# 0] #167# 0] [[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15753 :end 15825 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq org-src-tab-acts-natively t)\12" :post-blank 1 :post-affiliated 15753 :mode nil :granularity element :cached t :parent #170# :org-element--cache-sync-key nil)) 0] [nil nil #53# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15825 :end 15895 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq org-src-fontify-natively t)\12" :post-blank 1 :post-affiliated 15825 :mode nil :granularity element :cached t :parent #170# :org-element--cache-sync-key nil)) 0] [[nil nil #171# 0] [nil nil (paragraph (:begin 16107 :end 16435 :contents-begin 16107 :contents-end 16434 :post-blank 1 :post-affiliated 16107 :mode planning :granularity element :cached t :parent #172=(section (:begin 16107 :end 16968 :contents-begin 16107 :contents-end 16967 :robust-begin 16107 :robust-end 16965 :post-blank 1 :post-affiliated 16107 :mode section :granularity element :cached t :parent #171# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #172# 0] (section (:begin 15936 :end 16057 :contents-begin 15936 :contents-end 16055 :robust-begin 15936 :robust-end 16053 :post-blank 2 :post-affiliated 15936 :mode section :granularity element :cached t :parent #53# :org-element--cache-sync-key nil)) 0] [[[nil nil #55# 0] [nil nil #176=(section (:begin 17025 :end 17244 :contents-begin 17025 :contents-end 17243 :robust-begin 17025 :robust-end 17241 :post-blank 1 :post-affiliated 17025 :mode section :granularity element :cached t :parent #173# :org-element--cache-sync-key nil)) 0] #173# 0] [[nil nil #174# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17273 :end 18402 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12\12(with-eval-after-load 'org-agenda\12\12    ;; Nouvelle touche pour mieux naviguer avec xah\12    ;; (define-key org-agenda-mode-map [remap next-line] #'org-agenda-next-item)\12    ;; (define-key org-agenda-mode-map [remap previous-line] #'org-agenda-previous-item)\12    ;;\12    (define-key org-agenda-mode-map [remap ?\\r] #'org-agenda-goto)\12\12    ;;avoir \"org\", notamment org-schedule, en anglais, indispensable pour orgzly\12    (eval-after-load 'org (setq system-time-locale \"C\"))\12\12    ;;  pour que le curseur soit en haut de org agenda quand t on l'ouvre\12    (add-hook 'org-agenda-finalize-hook (lambda () (goto-char (point-min))) 90)\12\12    ;;ouvre l'agenda dans la window actuel\12    (setq org-agenda-window-setup 'current-window)\12\12    ;; quand commance l'agenda ?\12    ;;pas le week\12    (setq org-agenda-start-on-weekday nil)\12    ;; mais X jour après aujourd'hui\12    (setq org-agenda-start-day \"+0d\")\12\12    ;;vue de l'agenda sur X jours\12    (setq org-agenda-span 8)\12\12    ;;  Pour savoir qd fini une tâche\12    (setq org-log-done 'time)\12    (setq org-log-into-drawer t);; le mets dans un propreties\12\12    )\12\12" :post-blank 1 :post-affiliated 17273 :mode planning :granularity element :cached t :parent #175=(section (:begin 17273 :end 18402 :contents-begin 17273 :contents-end 18401 :robust-begin 17273 :robust-end 18399 :post-blank 1 :post-affiliated 17273 :mode section :granularity element :cached t :parent #174# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #175# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17025 :end 17244 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (setq org-agenda-files (append orgzly-directory-all-org-files))\12\12  ;; pour supprimer mes archives de org agenda TODO\12  ;; (org-remove-file \"/home/msi/Notes/Roam/GTD/6Archives.org\")\12\12" :post-blank 1 :post-affiliated 17025 :mode planning :granularity element :cached t :parent #176# :org-element--cache-sync-key nil)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 16435 :end 16968 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq org-todo-keywords\12        '(\12          (sequence \"TODO(t)\" \"NEXT(n)\" \"|\" \"DONE(d)\")\12          (sequence \"RAPPEL(r)\" \"WAIT(w)\" \"|\" \"CANCELLED(c)\")\12          )\12        )\12\12\12  ;; TODO: org-todo-keyword-faces\12  (setq org-todo-keyword-faces\12        '((\"NEXT\" . (:foreground \"orange red\" :weight bold))\12          (\"WAIT\" . (:foreground \"HotPink2\" :weight bold))\12          (\"BACK\" . (:foreground \"MediumPurple3\" :weight bold))\12          (\"RAPPEL\" . (:foreground \"white\" :weight bold))\12          ))\12" :post-blank 1 :post-affiliated 16435 :mode nil :granularity element :cached t :parent #172# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 15607 :end 15753 :contents-begin 15607 :contents-end 15752 :post-blank 1 :post-affiliated 15607 :mode planning :granularity element :cached t :parent #170# :org-element--cache-sync-key nil)) 0] [[[[nil nil #179=(section (:begin 18465 :end 18772 :contents-begin 18465 :contents-end 18771 :robust-begin 18465 :robust-end 18769 :post-blank 1 :post-affiliated 18465 :mode section :granularity element :cached t :parent #177# :org-element--cache-sync-key nil)) 0] [nil nil #178# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 18465 :end 18772 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (defun cp/org-refile-schedulded-tasks-in-agendatickler ()\12    ;; (interactive)\12    )\12\12  (defun cp/org-refile-deadline-tasks-in-agendatickler ()\12    ;; (interactive)\12    )\12\12  (defun cp/org-refile-schedulded-and-deadline-tasks-in-agendatickler ()\12    (interactive)\12    )\12\12" :post-blank 1 :post-affiliated 18465 :mode planning :granularity element :cached t :parent #179# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 18836 :end 18871 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12" :post-blank 1 :post-affiliated 18836 :mode planning :granularity element :cached t :parent #181=(section (:begin 18836 :end 18871 :contents-begin 18836 :contents-end 18870 :robust-begin 18836 :robust-end 18868 :post-blank 1 :post-affiliated 18836 :mode section :granularity element :cached t :parent #178# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #182=(section (:begin 18928 :end 20877 :contents-begin 18928 :contents-end 20876 :robust-begin 18928 :robust-end 20874 :post-blank 1 :post-affiliated 18928 :mode section :granularity element :cached t :parent #180# :org-element--cache-sync-key nil)) 0] #180# 0] #181# 0] [[[nil nil (example-block (:begin 19211 :end 19315 :value "file///:storage/emulated/0/dossier_partage/Clement/agendapourgoogle.ics\12" :switches nil :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :post-blank 2 :post-affiliated 19211 :mode nil :granularity element :cached t :parent #182# :org-element--cache-sync-key nil)) 0] [nil nil #63# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19315 :end 20877 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  ;;Lieu de l'export org-icalendar-combine-agenda-files\12  (setq org-icalendar-combined-agenda-file (expand-file-name \"agendapourgoogle.ics\" shared-directory-private))\12\12  ;;exporter avec les statse et tags, cela affiche \"DL\" pour deadline par exemple. Pratique pour voir que ça vient directement d'org-mode\12  (setq org-icalendar-categories '(all-tags category todo-state))\12\12  ;;export les schedulde seulement si elles non pas de state TODO DONE etc !\12  (setq org-icalendar-use-scheduled '(event-if-not-todo))\12\12  ;;fonction export en background + message pour vérif que ça marche\12  (defun org-icalendar-combine-agenda-files-background()\12    (interactive)\12    (message \"Lancement du icalendar combine file (pour org.ics)\")\12    (org-icalendar-combine-agenda-files t)\12    )\12\12  (defun org-icalendar-combine-agenda-files-foreground()\12    (interactive)\12    (org-icalendar-combine-agenda-files nil)\12    (message \"fini\")\12    )\12  ;;au démarrage d'emacs\12  ;; impossible de faire fonctionner la fonction en background... ne vient pas de ma config (du moins brute, peut-être le fait de l'export bizarrement. Même pas enfait car le init.el est chargé), ni des fichiers, ni de la version de org. WTF\12  ;; (add-hook 'dashboard-mode-hook #'org-icalendar-combine-agenda-files-background)\12\12  ;; TODO changer ce hook, car quand pas dashboard fonctionne pas\12  ;; (add-hook 'dashboard-mode-hook #'org-icalendar-combine-agenda-files-foreground)\12\12  ;; quand je close emacs\12  (add-hook 'kill-emacs-hook #'org-icalendar-combine-agenda-files-foreground)\12\12" :post-blank 1 :post-affiliated 19315 :mode nil :granularity element :cached t :parent #182# :org-element--cache-sync-key nil)) 0] [[nil nil #183# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 21512 :end 25404 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun my-org-agenda-skip-all-siblings-but-first ()\12    (interactive)\12    \"Skip all but the first non-done entry.\"\12    (let (should-skip-entry)\12      (unless (org-current-is-todo)\12        (setq should-skip-entry t))\12      (save-excursion\12        ;; If previous sibling exists and is TODO,\12        ;; skip this entry\12        (while (and (not should-skip-entry) (org-goto-sibling t))\12          (when (org-current-is-todo)\12            (setq should-skip-entry t))))\12      (let ((num-ancestors (org-current-level))\12            (ancestor-level 1))\12        (while (and (not should-skip-entry) (<= ancestor-level num-ancestors))\12          (save-excursion\12            ;; When ancestor (parent, grandparent, etc) exists\12            (when (ignore-errors (outline-up-heading ancestor-level t))\12              ;; If ancestor is WAITING, skip entry\12              (if (string= \"WAITING\" (org-get-todo-state))\12                  (setq should-skip-entry t)\12                ;; Else if ancestor is TODO, check previous siblings of\12                ;; ancestor (\"uncles\"); if any of them are TODO, skip\12                (when (org-current-is-todo)\12                  (while (and (not should-skip-entry) (org-goto-sibling t))\12                    (when (org-current-is-todo)\12                      (setq should-skip-entry t)))))))\12          (setq ancestor-level (1+ ancestor-level))\12          ))\12      (when should-skip-entry\12        (or (outline-next-heading)\12            (goto-char (point-max))))))\12\12  (defun org-current-is-todo ()\12    (string= \"TODO\" (org-get-todo-state)))\12\12\12\12  ;; (save-excursion\12  ;; test avec goto-first-chird, bien seul bémol : si jamais on est \12  ;; dans une situation plein de sous todo faites, alors celui d'au dessus\12  ;; ne se vera pas (car il est todo mais tout est fini)\12  ;; (while (and (not should-skip-entry) (org-goto-first-child t))\12  ;; (setq should-skip-entry t)))\12\12\12(defun my-org-agenda-skip-all-siblings-but-first-bis ()\12      (interactive)\12      \"Skip all but the first non-done entry.\"\12      (let (should-skip-entry)\12        (unless (org-current-is-todo)\12          (setq should-skip-entry t))\12        (save-excursion\12          ;; If previous sibling exists and is TODO,\12          ;; skip this entry\12          (while (and (not should-skip-entry) (org-goto-sibling t))\12            (when (org-current-is-todo)\12              (setq should-skip-entry t))))\12        (save-excursion\12          ;; test avec goto-first-chird, bien seul bémol : si jamais on est \12          ;; dans une situation plein de sous todo faites, alors celui d'au dessus\12          ;; ne se vera pas (car il est todo mais tout est fini)\12          (while (and (not should-skip-entry) (org-goto-first-child t))\12            (setq should-skip-entry t)))\12        (let ((num-ancestors (org-current-level))\12              (ancestor-level 1))\12          (while (and (not should-skip-entry) (<= ancestor-level num-ancestors))\12            (save-excursion\12              ;; When ancestor (parent, grandparent, etc) exists\12              (when (ignore-errors (outline-up-heading ancestor-level t))\12                ;; If ancestor is WAITING, skip entry\12                (if (string= \"WAITING\" (org-get-todo-state))\12                    (setq should-skip-entry t)\12                  ;; Else if ancestor is TODO, check previous siblings of\12                  ;; ancestor (\"uncles\"); if any of them are TODO, skip\12                  (when (org-current-is-todo)\12                    (while (and (not should-skip-entry) (org-goto-sibling t))\12                      (when (org-current-is-todo)\12                        (setq should-skip-entry t)))))))\12            (setq ancestor-level (1+ ancestor-level))\12            ))\12        (when should-skip-entry\12          (or (outline-next-heading)\12              (goto-char (point-max))))))\12\12  (defun org-current-is-todo ()\12    (string= \"TODO\" (org-get-todo-state)))\12\12" :post-blank 2 :post-affiliated 21512 :mode planning :granularity element :cached t :parent #184=(section (:begin 21512 :end 27487 :contents-begin 21512 :contents-end 27485 :robust-begin 21512 :robust-end 27483 :post-blank 2 :post-affiliated 21512 :mode section :granularity element :cached t :parent #183# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #184# 0] (section (:begin 20947 :end 21492 :contents-begin 20947 :contents-end 21491 :robust-begin 20947 :robust-end 21489 :post-blank 1 :post-affiliated 20947 :mode section :granularity element :cached t :parent #63# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 18928 :end 19211 :contents-begin 18928 :contents-end 19210 :post-blank 1 :post-affiliated 18928 :mode planning :granularity element :cached t :parent #182# :org-element--cache-sync-key nil)) 0] #177# -1] #161# -1] [[[[[[[[nil nil #185# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 27570 :end 28973 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12\12  (use-package org-super-agenda :config(org-super-agenda-mode t))\12\12  (add-hook 'org-agenda-mode-hook 'org-super-agenda-mode)\12\12  ;; pour mes tâches non faites\12  (setq gtd-inbox-file (list (append (concat orgzly-directory \"Inbox.org\"))))\12\12  (setq org-agenda-custom-commands\12        '((\"d\" \"dashboard\"\12           (\12            (todo \"RAPPEL\" ((org-agenda-overriding-header \"Se souvenir de ceci\")))\12            (todo \"NEXT\"\12                  ((org-agenda-overriding-header \"Next Actions\")\12                   (org-agenda-max-todos nil)))\12            (todo \"TODO\"\12                  ((org-agenda-overriding-header \"Tout ce qui est dans Inbox(Unprocessed Inbox Tasks)\")\12                   (org-agenda-files gtd-inbox-file))\12                  (org-agenda-text-search-extra-files nil))\12            (todo \"WAIT\"\12                  ((org-agenda-overriding-header \"Waiting items\")\12                   (org-agenda-max-todos nil)))\12            ;;(stuck \"\") ;; review stuck projects as designated by org-stuck-projects\12            ;; ...other commands here\12            )\12           )))\12\12  ;; pour appeler directement dashboard\12\12  (defun org-agenda-show-dashboard (&optional arg)\12    (interactive \"P\")\12    (setq org-agenda-todo-ignore-scheduled t) ;;pour ne pas afficher les tâche schedulded\12    (org-agenda arg \"d\")\12    )\12\12  (global-set-key (kbd \"<f12>\") 'org-agenda-show-dashboard)\12\12\12" :post-blank 1 :post-affiliated 27570 :mode planning :granularity element :cached t :parent #186=(section (:begin 27570 :end 28973 :contents-begin 27570 :contents-end 28972 :robust-begin 27570 :robust-end 28970 :post-blank 1 :post-affiliated 27570 :mode section :granularity element :cached t :parent #185# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #186# 0] [[nil nil #189=(section (:begin 28998 :end 29036 :contents-begin 28998 :contents-end 29035 :robust-begin 28998 :robust-end 29033 :post-blank 1 :post-affiliated 28998 :mode section :granularity element :cached t :parent #187# :org-element--cache-sync-key nil)) 0] [nil nil #188# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 28998 :end 29036 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12\12\12\12" :post-blank 1 :post-affiliated 28998 :mode planning :granularity element :cached t :parent #189# :org-element--cache-sync-key nil)) 0] #187# 0] [[[nil nil (paragraph (:begin 29134 :end 29574 :contents-begin 29134 :contents-end 29572 :post-blank 2 :post-affiliated 29134 :mode planning :granularity element :cached t :parent #191=(section (:begin 29134 :end 30072 :contents-begin 29134 :contents-end 30071 :robust-begin 29134 :robust-end 30069 :post-blank 1 :post-affiliated 29134 :mode section :granularity element :cached t :parent #188# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #190# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 29574 :end 30072 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  \12  (defun org-archive-done-tasks-in-file ()\12  (interactive)\12  (org-map-entries\12   (lambda ()\12     (org-archive-subtree)\12     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))\12   \"/DONE\" 'file))\12  \12  (defun org-archive-done-tasks-in-subtree ()\12  (interactive)\12  (org-map-entries\12   (lambda ()\12     (org-archive-subtree)\12     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))\12   \"/DONE\" 'tree))\12  \12" :post-blank 1 :post-affiliated 29574 :mode nil :granularity element :cached t :parent #191# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 30140 :end 30460 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun test-archiving-task ()\12    (interactive)\12    \"Archive toute les task qui sont passées\"\12    (org-sparse-tree b);;ceci ne marche pas\12  ;;(org-agenda nil \"a\")\12\12    (while (next-error)\12      (previous-line)\12      (insert \"Za marche\")\12\12      ;; (org-archive-subtree)\12\12      )\12    )\12" :post-blank 1 :post-affiliated 30140 :mode planning :granularity element :cached t :parent #194=(section (:begin 30140 :end 30460 :contents-begin 30140 :contents-end 30459 :robust-begin 30140 :robust-end 30457 :post-blank 1 :post-affiliated 30140 :mode section :granularity element :cached t :parent #190# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #192# 0] #193# 0] #194# 0] #191# 0] [[[[nil nil (paragraph (:begin 30583 :end 30774 :contents-begin 30583 :contents-end 30773 :post-blank 1 :post-affiliated 30583 :mode planning :granularity element :cached t :parent #195=(section (:begin 30583 :end 31570 :contents-begin 30583 :contents-end 31570 :robust-begin 30583 :robust-end 31568 :post-blank 0 :post-affiliated 30583 :mode section :granularity element :cached t :parent #192# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 30914 :end 31570 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq org-tag-alist '((:startgroup . nil)\12\12                                          ; Put mutually exclusive tags here\12                        (:endgroup . nil)\12\12                        (\"@home\" . ?h)\12                        (\"@office\" . ?h)\12                        ;; (\"@anywhere\" . ?h)\12                        (\"@pc\" . ?p)                        \12                        (\"@tel\" . ?t)\12                        (\"work\" . ?w)\12                        (\"Nell\" . ?n)\12                        (\"batch\" . ?b)\12                        (\"followup\" . ?f)\12                        (\"NEXT\" . ?n)\12\12                        )\12\12        )\12" :post-blank 0 :post-affiliated 30914 :mode nil :granularity element :cached t :parent #195# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 30774 :end 30914 :contents-begin 30774 :contents-end 30912 :post-blank 2 :post-affiliated 30774 :mode nil :granularity element :cached t :parent #195# :org-element--cache-sync-key nil)) 0] [[nil nil #196# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 31635 :end 32255 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (use-package org-contrib\12    :config\12    (require 'org-contacts)\12    (require 'org-depend)\12    ;; (setq org-contacts-files (cp/org-directory-path \"org/orgzly/contacts.org\"))\12    ;; (setq org-contacts-files '(expand-file-name \"org/orgzly/contacts.org\" org-directory))\12    ;; (setq org-contacts-files '(sa-find-org-file-recursively (cp/org-directory-path \"org\") \"org/orgzly\"))\12    ;; (setq org-contacts-files (list \"org/orgzly/contacts.org\"))\12\12    ;;on doit renvoyer une liste pour celui ci attention !\12    (setq org-contacts-files (list(concat orgzly-directory \"Contacts.org\")))\12    )\12" :post-blank 0 :post-affiliated 31635 :mode planning :granularity element :cached t :parent #197=(section (:begin 31635 :end 32255 :contents-begin 31635 :contents-end 32255 :robust-begin 31635 :robust-end 32253 :post-blank 0 :post-affiliated 31635 :mode section :granularity element :cached t :parent #196# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #197# 0] #72# 0] [[[nil nil #199=(section (:begin 32383 :end 32775 :contents-begin 32383 :contents-end 32775 :robust-begin 32383 :robust-end 32773 :post-blank 0 :post-affiliated 32383 :mode section :granularity element :cached t :parent #198# :org-element--cache-sync-key nil)) 0] [nil nil #76# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 32383 :end 32775 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (use-package org-vcard\12    :init\12    ;;la version utilisée (pour pouvoir y envoyer sur google)\12    (setq org-vcard-default-version \"3.0\")\12    ;;le dossier à mettre\12    ;; (setq org-contacts-vcard-files (cp/shared-directory-path \"Clement/contactgoogle.vcf\"))\12    :config\12    (setq org-contacts-vcard-files (concat orgzly-directory \"Contacts.org\"))\12    )\12\12\12" :post-blank 0 :post-affiliated 32383 :mode planning :granularity element :cached t :parent #199# :org-element--cache-sync-key nil)) 0] [[nil nil #201=(section (:begin 32820 :end 34966 :contents-begin 32820 :contents-end 34965 :robust-begin 32820 :robust-end 34963 :post-blank 1 :post-affiliated 32820 :mode section :granularity element :cached t :parent #200# :org-element--cache-sync-key nil)) 0] nil (property-drawer (:begin 32820 :end 32888 :contents-begin 32833 :contents-end 32881 :post-blank 1 :post-affiliated 32820 :mode planning :granularity element :cached t :parent #201# :org-element--cache-sync-key nil)) -1] #200# 0] #198# 0] #195# 0] [[[[nil [nil nil #202# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 32958 :end 34966 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  ;;mettre mes template directement ici et pas dans templatesOrgCapture ?\12  ;; quand on donne un truc relatif, alors le org-directory est bien appelé !\12  ;; templatesOrgCapture dans Notes, car comme ça marchera partout\12\12  (setq org-capture-templates '\12        (\12         (\"i\" \"Inbox (TODO)\" entry\12          (file (lambda() (concat orgzly-directory \"Inbox.org\")))\12          (file \"templatesOrgCapture/todo.org\")\12          :immediate-finish t\12          )\12         (\"s\" \"Slipbox for org-roam\" entry  (file \"braindump/org/inbox.org\")\12          \"* %?\\n\")\12\12         (\"t\" \"Tickler\" entry\12          (file (lambda() (concat orgzly-directory \"AgendaTickler.org\")))\12          (file \"templatesOrgCapture/tickler.org\")\12          :immediate-finish t\12          )\12\12         (\"e\" \"Évènement sur plusieurs heures\" entry\12          (file (lambda() (concat orgzly-directory \"AgendaTickler.org\")))\12          (file \"templatesOrgCapture/evenement.org\")\12          :immediate-finish t\12          )\12\12         (\"u\" \"Évènement sur plusieurs jours\" entry\12          (file (lambda() (concat orgzly-directory \"AgendaTickler.org\")))\12          (file \"templatesOrgCapture/evenementplusieursjours.org\")\12          :immediate-finish t\12          )\12\12         (\"d\" \"Journal de dissactifaction\" entry (file  \"org/journal_de_dissatisfaction.org\")\12          \"* %<%Y-%m-%d> \\n- %?\")\12\12         ;; (\"P\" \"org-popup\" entry (file+headline \"braindump/org/inbox.org\" \"Titled Notes\")\12         ;; \"%[~/.emacs.d/.org-popup]\" :immediate-finish t :prepend t)\12\12\12\12         ;; ici se trouve les choses utilisé pour org-protocol\12         (\"C\" \"Contacts\" entry\12          (file+headline (lambda() (concat orgzly-directory \"Contacts.org\" ))\"1Inbox\")\12          (file \"templatesOrgCapture/contacts.org\")\12          :immediate-finish t\12          ;; :jump-to-captured t\12          )\12         (\"O\" \"Link capture\" entry\12          (file+headline \"org/orgzly/Bookmarks.org\" \"1INBOX\")\12          \"* %a %U\"\12          :immediate-finish t)\12         ))\12\12\12" :post-blank 1 :post-affiliated 32958 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #201#)) 1] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 35059 :end 36148 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  ;; pour rajouter un ID OU DES COMMANDES à la fin de la capture !\12  (defun cp/org-capture-finalize ()\12    \"Comprend la valeur de la key de org capture et décide de faire qql après le capture ou pas\"\12    (let ((key  (plist-get org-capture-plist :key))\12          (desc (plist-get org-capture-plist :description)))\12      (if org-note-abort\12          (message \"Template with key %s and description “%s” aborted\" key desc)\12        (message \"Template with key %s and description “%s” run successfully\" key desc)\12        )\12      (when (string= key \"A\") \11\11;si jamais c'est A, alors faire la suite\12        (org-capture-goto-last-stored)\12        (org-id-get-create)\11    \12        )\12      (when (string= key \"t\") \11\11;etc\12        ;; (org-capture-goto-last-stored)\12        ;; (org-schedule nil nil)\12        ;; (winner-undo)\12        )\12      (when (string= key \"e\") \11\11;etc\12        ;; (org-capture-goto-last-stored)\12        ;; (org-schedule nil nil)\12        ;; (winner-undo)\12        )\12      )\12    )\12  (add-hook 'org-capture-after-finalize-hook 'cp/org-capture-finalize)\12\12" :post-blank 1 :post-affiliated 35059 :mode planning :granularity element :cached t :parent #203=(section (:begin 35059 :end 36148 :contents-begin 35059 :contents-end 36147 :robust-begin 35059 :robust-end 36145 :post-blank 1 :post-affiliated 35059 :mode section :granularity element :cached t :parent #202# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #203# -1] [[nil nil #206=(section (:begin 36205 :end 37043 :contents-begin 36205 :contents-end 37043 :robust-begin 36205 :robust-end 37041 :post-blank 0 :post-affiliated 36205 :mode section :granularity element :cached t :parent #204# :org-element--cache-sync-key nil)) 0] [nil nil #205# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 36205 :end 37043 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  ;;pour voir le chemin lors du refile\12  (setq org-outline-path-complete-in-steps nil)\12  ;; permet de déplacer avec un niveau de titre 1 ! (dans tickler par exemple)\12  (setq org-refile-use-outline-path (quote file))\12\12  ;;les targets\12  (setq org-refile-targets\12        '(\12          ;;refile dans le buffer courant jusqu'au niveau 7\12          (nil :maxlevel . 7)\12          ;;refile dans tous les fichiers de l'agenda jusqu'au niveau 5\12          (org-agenda-files :maxlevel . 5)\12          ;;refile les documents\12          (mesdocuments-directory-all-org-files :maxlevel . 1)\12          (org-directory :maxlevel . 1)\12          (orgzly-directory-all-org-files :maxlevel . 8)\12  \12          ;;pour refile document_partage\12          ;; (shared-directory-private-all-org-files :maxlevel . 5)\12          )\12        )\12\12" :post-blank 0 :post-affiliated 36205 :mode planning :granularity element :cached t :parent #206# :org-element--cache-sync-key nil)) 0] #204# -1] [[nil nil (property-drawer (:begin 37103 :end 37171 :contents-begin 37116 :contents-end 37164 :post-blank 1 :post-affiliated 37103 :mode planning :granularity element :cached t :parent #207=(section (:begin 37103 :end 37340 :contents-begin 37103 :contents-end 37339 :robust-begin 37103 :robust-end 37337 :post-blank 1 :post-affiliated 37103 :mode section :granularity element :cached t :parent #205# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 37280 :end 37340 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (require 'org-protocol)\12" :post-blank 1 :post-affiliated 37280 :mode nil :granularity element :cached t :parent #207# :org-element--cache-sync-key nil)) 0] (src-block (:language "sh" :switches nil :parameters nil :begin 37249 :end 37280 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  \12\12" :post-blank 1 :post-affiliated 37249 :mode nil :granularity element :cached t :parent #207# :org-element--cache-sync-key nil)) 1] (paragraph (:begin 37171 :end 37249 :contents-begin 37171 :contents-end 37247 :post-blank 2 :post-affiliated 37171 :mode nil :granularity element :cached t :parent #207# :org-element--cache-sync-key nil)) 1] #207# -1] (paragraph (:begin 32888 :end 32958 :contents-begin 32888 :contents-end 32957 :post-blank 1 :post-affiliated 32888 :mode nil :granularity element :cached t :parent #201# :org-element--cache-sync-key nil)) 0] [[[nil nil #209=(section (:begin 37390 :end 38321 :contents-begin 37390 :contents-end 38320 :robust-begin 37390 :robust-end 38318 :post-blank 1 :post-affiliated 37390 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #208#)) 0] [[nil nil (src-block (:language "js" :switches nil :parameters nil :begin 38099 :end 38321 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "javascript:location.href='org-protocol://capture?template=O&url='+encodeURIComponent(location.href)+'&title='+encodeURIComponent(document.title)+'&body='+encodeURIComponent(window.getSelection())\12" :post-blank 1 :post-affiliated 38099 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #209#)) 0] nil #85# -1] (plain-list (:type ordered :begin 37390 :end 38099 :contents-begin 37390 :contents-end 38092 :structure ((37390 0 "1. " nil nil nil 37692) (37692 0 "2. " nil nil nil 38092) (37793 3 "1. " nil nil nil 37869) (37869 3 "2. " nil nil nil 37973) (37973 3 "3. " nil nil nil 38092)) :post-blank 1 :post-affiliated 37390 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #209#)) 1] [[nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 38359 :end 39148 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (use-package org-roam\12    :if (file-exists-p (concat org-directory \"zettelkasten/\")) ;; je charge seulement si ya bien un dossier org roam\12    :init\12    ;; (setq org-roam-directory \"/home/msi/Notes/Roam\")\12    ;;éviter d'avoir la nottif de version 1 à 2\12    (setq org-roam-v2-ack t)\12    :custom\12    (org-roam-completion-everywhere t) ;; pour avoir la complétien partout\12    ;;défini la capture de mon journal, pas utilisé\12    (org-roam-dailies-capture-templates \12     '((\"d\" \"default\" entry \"* %<%I:%M %p>: %?\"\12        :target (file+head \"%<%Y-%m-%d>.org\" \"#+title: %<%Y-%m-%d>\\n\")\12        :empty-lines 1)  \12       ))\12    ;; défini mes capture normal\12\12\12\12    :config\12    ;; syncro automatique avec les fichiers \12    (org-roam-db-autosync-mode)\12\12\12\12    )\12\12" :post-blank 1 :post-affiliated 38359 :mode planning :granularity element :cached t :parent #211=(section (:begin 38359 :end 39148 :contents-begin 38359 :contents-end 39147 :robust-begin 38359 :robust-end 39145 :post-blank 1 :post-affiliated 38359 :mode section :granularity element :cached t :parent #210# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #211# 1] [[nil nil #213=(section (:begin 39175 :end 40126 :contents-begin 39175 :contents-end 40125 :robust-begin 39175 :robust-end 40123 :post-blank 1 :post-affiliated 39175 :mode section :granularity element :cached t :parent #212# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 39216 :end 40126 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (with-eval-after-load 'org-roam\12    (setq org-roam-capture-templates\12          '(\12            (\"i\" \"inbox\" entry \"* %?\"\12             :target\12             (node  \"Inbox\")\12             ;; :unnarrowed t\12             )\12            (\"m\" \"main\" plain\12             \"%?\"\12             :target (file+head \"main/${slug}.org\"\12                                \"#+title: ${title}\\n\")\12             :immediate-finish t\12             :unnarrowed t)\12            (\"r\" \"reference\" plain \"%?\"\12             :target\12             (file+head \"reference/${title}.org\" \"#+title: ${title}\\n\")\12             :immediate-finish t\12             :unnarrowed t)\12            (\"a\" \"article\" plain \"%?\"\12             :target\12             (file+head \"articles/${title}.org\" \"#+title: ${title}\\n#+filetags: :article:\\n\")\12             :immediate-finish t\12             :unnarrowed t)\12            )\12          )\12    )\12\12\12\12" :post-blank 1 :post-affiliated 39216 :mode nil :granularity element :cached t :parent #213# :org-element--cache-sync-key nil)) 0] nil #89# -1] (paragraph (:begin 39175 :end 39216 :contents-begin 39175 :contents-end 39216 :post-blank 0 :post-affiliated 39175 :mode planning :granularity element :cached t :parent #213# :org-element--cache-sync-key nil)) 1] #212# 1] #210# 1] #208# -1] [[[[[[nil nil (paragraph (:begin 40158 :end 40242 :contents-begin 40158 :contents-end 40242 :post-blank 0 :post-affiliated 40158 :mode planning :granularity element :cached t :parent #215=(section (:begin 40158 :end 40774 :contents-begin 40158 :contents-end 40773 :robust-begin 40158 :robust-end 40771 :post-blank 1 :post-affiliated 40158 :mode section :granularity element :cached t :parent #89# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #214# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 40242 :end 40774 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    ;; SUPPER IMPORTANT : chargé la bibliothèque qui gère CSL !!!!!! normalement c'est fait tout seul mais enfait non LOL\12  ;;  (require 'oc)\12  (require 'oc-csl)\12    ;; (require 'oc-biblatex)\12    ;; (require 'oc-bibtex)\12    ;; (require 'oc-natbib)\12\12    (setq my-bibliography-list (list (concat org-roam-directory \"biblio.bib\")\12                                     ;; \"/path/to/another/\"\12                                     ;; \"/path/to/another/\"\12                                     )\12          )\12" :post-blank 1 :post-affiliated 40242 :mode nil :granularity element :cached t :parent #215# :org-element--cache-sync-key nil)) 0] [[nil nil #216# 0] [nil nil (property-drawer (:begin 41106 :end 41173 :contents-begin 41119 :contents-end 41167 :post-blank 0 :post-affiliated 41106 :mode planning :granularity element :cached t :parent #217=(section (:begin 41106 :end 41963 :contents-begin 41106 :contents-end 41962 :robust-begin 41106 :robust-end 41960 :post-blank 1 :post-affiliated 41106 :mode section :granularity element :cached t :parent #216# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #217# 0] #97# 0] [[[nil nil (plain-list (:type ordered :begin 41498 :end 41727 :contents-begin 41498 :contents-end 41725 :structure ((41498 0 "1. " nil nil nil 41540) (41540 0 "2. " nil nil nil 41563) (41563 0 "3. " nil nil nil 41647) (41647 0 "4. " nil nil nil 41707) (41707 0 "5. " nil nil nil 41725)) :post-blank 2 :post-affiliated 41498 :mode nil :granularity element :cached t :parent #217# :org-element--cache-sync-key nil)) 0] [nil nil #220=(section (:begin 42702 :end 44152 :contents-begin 42702 :contents-end 44151 :robust-begin 42702 :robust-end 44149 :post-blank 1 :post-affiliated 42702 :mode section :granularity element :cached t :parent #218# :org-element--cache-sync-key nil)) 0] #218# 0] [nil nil #219# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 42702 :end 44152 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (use-package citar\12    ;; :after all-the-icons ;; besoin des icones pour charger les propositions\12    :after oc-csl all-the-icons\12    :custom\12    ;;lieu de ma bibliographie\12    (citar-bibliography (list (concat org-roam-directory \"biblio.bib\")))\12    :config\12    ;; pour complété avec consult yeah\12    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)\12\12    ;; comment on gère l'affichage des propositions en dur\12    (setq citar-templates\12          '((main . \"${author editor:30}     ${date year issued:4}     ${title:48}\")\12            (suffix . \"          ${=key= id:15}    ${=type=:12}    ${tags keywords:*}\")\12            (preview . \"${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\\n\")\12            (note . \"Notes on ${author editor}, ${title}\")))\12    ;;le séparateur\12    (setq citar-symbol-separator \"  \")\12\12    ;; et affichage des icônes à gauche\12    (setq citar-symbols\12          `((file ,(all-the-icons-faicon \"file-o\" :face 'all-the-icons-green :v-adjust -0.1) . \" \")\12            (note ,(all-the-icons-material \"speaker_notes\" :face 'all-the-icons-blue :v-adjust -0.3) . \" \")\12            (link ,(all-the-icons-octicon \"link\" :face 'all-the-icons-orange :v-adjust 0.01) . \" \")))\12\12    ;; automatiquement refresh lorque l'on modifie la bibliographie\12    (setq citar-filenotify-callback 'refresh-cache)\12    )\12\12" :post-blank 1 :post-affiliated 42702 :mode planning :granularity element :cached t :parent #220# :org-element--cache-sync-key nil)) -1] (paragraph (:begin 41173 :end 41498 :contents-begin 41173 :contents-end 41496 :post-blank 2 :post-affiliated 41173 :mode nil :granularity element :cached t :parent #217# :org-element--cache-sync-key nil)) 0] [[[[nil nil (property-drawer (:begin 44175 :end 44243 :contents-begin 44188 :contents-end 44236 :post-blank 1 :post-affiliated 44175 :mode planning :granularity element :cached t :parent #222=(section (:begin 44175 :end 46414 :contents-begin 44175 :contents-end 46412 :robust-begin 44175 :robust-end 46410 :post-blank 2 :post-affiliated 44175 :mode section :granularity element :cached t :parent #219# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #221# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 44243 :end 46414 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (use-package citeproc\12    :straight (:host github :repo \"andras-simonyi/citeproc-el\")\12    :after citar\12\12    :init\12    ;; nom du titre exporté pour la bibliographie\12    (with-eval-after-load 'ox-hugo\12      (plist-put org-hugo-citations-plist :bibliography-section-heading \"References\"))\12\12    :config\12    (setq org-cite-global-bibliography my-bibliography-list) ;; pour que org-cite sache où est ma biblio\12    (setq org-cite-export-processors '((t csl)));; exporter tout le temps avec la méthode csl\12\12    ;; les fichiers de configuration. Impossible de les configurer \"normalement\" (voir en dessous), j'utilise donc les fichiers \"fallback\" qui sont ceux par défaut\12    ;; (setq org-cite-csl--fallback-style-file \"/home/msi/documents/notes/braindump/org/chicago-author-date-16th-edition.csl\") ;;\12\12\12    ;;à remettre\12    (setq org-cite-csl--fallback-style-file \"/home/msi/documents/notes/braindump/org/vancouver-brackets.csl\");; pour changer le style. Vancouver = numéro\12    (setq org-cite-csl--fallback-locales-dir \"/home/msi/documents/notes/braindump/org/\")\12    )\12\12\12\12\12\12\12\12  ;;le bordel ici, mais pas utilisé\12  ;; pas utilisé, mais voir aussi les variable de jethro\12  ;; (setq\12  ;; org-cite-global-bibliography my-bibliography-list ;; pour que org-cite sache où est ma biblio\12  ;; citar-format-reference-function 'citar-citeproc-format-reference\12  ;; org-cite-csl-styles-dir \"~/Zotero/styles/\"\12  ;; citar-citeproc-csl-styles-dir org-cite-csl-styles-dir\12  ;; citar-citeproc-csl-locales-dir \"~/Zotero/locales/\"\12\12  ;; doute sur lui, voir le dot de jethro\12  ;; citar-citeproc-csl-style (concat (expand-file-name org-cite-csl-styles-dir\12  ;; )\"apa.csl\")\12\12\12  ;;pour que ça marche, il faut régler ces deux variables\12  ;; après avoir exécuté ceci, les export marches TODO\12  ;; org-cite-csl--fallback-style-file \"/home/msi/documents/notes/braindump/org/reference/chicago-author-date-16th-edition.csl\"\12  ;; org-cite-csl--fallback-locales-dir \"/home/msi/documents/notes/braindump/org/reference\"\12  ;; )\12\12  ;; (setq org-cite-csl-styles-dir \"~/Zotero/styles/\")\12  ;; (setq org-cite-csl-locales-dir \"/home/msi/documents/notes/braindump/org/reference/\")\12\12" :post-blank 2 :post-affiliated 44243 :mode nil :granularity element :cached t :parent #222# :org-element--cache-sync-key nil)) 0] [nil nil (paragraph (:begin 46554 :end 46573 :contents-begin 46554 :contents-end 46573 :post-blank 0 :post-affiliated 46554 :mode planning :granularity element :cached t :parent #223=(section (:begin 46554 :end 48972 :contents-begin 46554 :contents-end 48968 :robust-begin 46554 :robust-end 48966 :post-blank 4 :post-affiliated 46554 :mode section :granularity element :cached t :parent #221# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #223# -1] [[[nil nil (paragraph (:begin 47626 :end 47742 :contents-begin 47626 :contents-end 47741 :post-blank 1 :post-affiliated 47626 :mode nil :granularity element :cached t :parent #223# :org-element--cache-sync-key nil)) 0] [nil nil #94# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 47742 :end 48972 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (with-eval-after-load 'citar\12    ;; pour ajouter la source, j'appelle cette fonction dans le capture, qui renvoie une chaîne de caractère, et le capture à besoin d'une fonction avec un argument\12    (defun cp/ajoute-source-capture  (monargumentinutile)\12      (let ((source (citar--format-entry-no-widths (cdr keys-entries)\12                                                   \"${author editor}. ${year}. \\\"${title url year}\\\" ${url}\"))\12            )\12        ;;renvoie de la chaîne de caractère\12        (message \"%s\" source)\12        )\12      )\12\12\12    ;; pour ajouter la source, j'appelle cette fonction dans le capture, qui renvoie une chaîne de caractère, et le capture à besoin d'une fonction avec un argument\12    (defun cp/ajoute-source-capture-main  (monargumentinutile)\12      (interactive)\12      (setq source (citar--format-entry-no-widths (cdr (citar-select-ref))\12                                                  \"${author editor}. ${year}. \\\"${title}\\\" ${url}\"))\12      ;;renvoie de la chaîne de caractère\12      (message \"test\")\12      ;; (insert source)\12      (with-current-buffer \"*scratch*\"\12        (insert source)\12        (end-of-line)\12        (newline-and-indent))\12      )\12\12\12\12    )\12\12\12\12\12" :post-blank 4 :post-affiliated 47742 :mode nil :granularity element :cached t :parent #223# :org-element--cache-sync-key nil)) 0] [nil nil #225=(section (:begin 49063 :end 50533 :contents-begin 49063 :contents-end 50531 :robust-begin 49063 :robust-end 50529 :post-blank 2 :post-affiliated 49063 :mode section :granularity element :cached t :parent #224# :org-element--cache-sync-key nil)) 0] #224# -1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 46573 :end 47626 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12            (with-eval-after-load 'citar\12\12    (defun jethro/org-roam-node-from-cite (keys-entries)\12      (interactive (list (citar-select-ref :multiple nil :rebuild-cache t)))\12      (let (\12            (title (citar--format-entry-no-widths (cdr keys-entries)\12                                                  \"${author editor} ${title}\"))\12            )\12        (org-roam-capture- :templates\12                           '((\"r\" \"reference\" plain \"%?\" :target\12                              (file+head \"reference/${citekey}.org\"\12                                         \"\12:PROPERTIES:\12:ROAM_REFS: [cite:@${citekey}]\12:END:\12#+title: ${title}\\n\\n\\n- source :: [cite:@${citekey}]\\nÉcrire ici\\n#+print_bibliography:\")\12                              :immediate-finish t\12                              :unnarrowed t))\12                           :info (list :citekey (car keys-entries))\12                           :node (org-roam-node-create :title title)\12                           :props '(:finalize find-file))))\12              )\12\12\12" :post-blank 1 :post-affiliated 46573 :mode nil :granularity element :cached t :parent #223# :org-element--cache-sync-key nil)) 0] #222# 0] [[[[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle no" :begin 49233 :end 50533 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun citar-org-insert-citation (keys &optional style)\12    \"Insert KEYS in org-cite format, with STYLE.\"\12    (let ((context (org-element-context)))\12      (if-let ((citation (citar-org--citation-at-point context)))\12          (when-let ((keys (seq-difference keys (org-cite-get-references citation t)))\12                     (keystring (mapconcat (lambda (key) (concat \"@\" key)) keys \"; \"))\12                     (begin (org-element-property :contents-begin citation)))\12            (if (<= (point) begin)\12                (org-with-point-at begin\12                  (insert keystring \";\"))\12              (let ((refatpt (citar-org--reference-at-point)))\12                (org-with-point-at (or (and refatpt (org-element-property :end refatpt))\12                                       (org-element-property :contents-end citation))\12                  (if (char-equal ?\\; (char-before))\12                      (insert-before-markers keystring \";\")\12                    (insert-before-markers \";\" keystring))))))\12        (if (org-cite--allowed-p context)\12            (insert\12             (format \"[[cite%s:%s]]\" (or style \"\")\12                     (mapconcat (lambda (key) (concat \"&\" key)) keys \"; \")))\12          (user-error \"Cannot insert a citation here\")))))\12\12  \12" :post-blank 2 :post-affiliated 49233 :mode nil :granularity element :cached t :parent #225# :org-element--cache-sync-key nil)) 0] [nil nil #228=(section (:begin 50550 :end 52206 :contents-begin 50550 :contents-end 52205 :robust-begin 50550 :robust-end 52203 :post-blank 1 :post-affiliated 50550 :mode section :granularity element :cached t :parent #226# :org-element--cache-sync-key nil)) 0] #226# 0] [nil nil #227# 0] (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle no" :begin 50550 :end 52206 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package org-ref\12    :init\12    ;; qu'est ce qu'on met comme titre avant de mettre la bibliographie, pour org-cite \12    ;; pour exporter proprement en html et md-hugo\12    (with-eval-after-load 'ox\12      (add-to-list 'org-export-before-parsing-hook\12                   (lambda (backend)\12                     (when (org-export-derived-backend-p backend 'html)\12                       (org-ref-process-buffer 'html)))))\12    :config\12    (setq bibtex-completion-bibliography my-bibliography-list\12          ;; bibtex-completion-library-path '(\"~/Dropbox/emacs/bibliography/bibtex-pdfs/\")\12          ;; bibtex-completion-notes-path \"~/Dropbox/emacs/bibliography/notes/\"\12          bibtex-completion-notes-template-multiple-files \"* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \\n\\nSee [[cite:&${=key=}]]\\n\"\12\12          bibtex-completion-additional-search-fields '(keywords)\12          bibtex-completion-display-formats\12          '((article       . \"${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\")\12            (inbook        . \"${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\")\12            (incollection  . \"${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\")\12            (inproceedings . \"${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\")\12            (t             . \"${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}\"))\12          bibtex-completion-pdf-open-function\12          (lambda (fpath)\12            (call-process \"open\" nil 0 nil fpath)))\12    )\12" :post-blank 1 :post-affiliated 50550 :mode planning :granularity element :cached t :parent #228# :org-element--cache-sync-key nil)) -1] [[[nil nil (paragraph (:begin 52259 :end 52379 :contents-begin 52259 :contents-end 52378 :post-blank 1 :post-affiliated 52259 :mode planning :granularity element :cached t :parent #229=(section (:begin 52259 :end 52770 :contents-begin 52259 :contents-end 52769 :robust-begin 52259 :robust-end 52767 :post-blank 1 :post-affiliated 52259 :mode section :granularity element :cached t :parent #227# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #101# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 52379 :end 52770 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (use-package org-roam-ui\12    :after org-roam\12    :straight\12    (:host github :repo \"org-roam/org-roam-ui\" :branch \"main\" :files (\"*.el\" \"out\"))\12    ;; :hook (after-init . org-roam-ui-mode)\12    :config\12    (setq org-roam-ui-sync-theme t\12          org-roam-ui-follow t\12          org-roam-ui-update-on-save t\12          org-roam-ui-open-on-start nil)\12    )\12\12" :post-blank 1 :post-affiliated 52379 :mode nil :granularity element :cached t :parent #229# :org-element--cache-sync-key nil)) 0] [nil nil #238=(section (:begin 52886 :end 54102 :contents-begin 52886 :contents-end 54101 :robust-begin 52886 :robust-end 54099 :post-blank 1 :post-affiliated 52886 :mode section :granularity element :cached t :parent #230# :org-element--cache-sync-key nil)) 0] #230# -1] #229# 0] [[[[nil nil #231# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 54153 :end 55128 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12\12  (with-eval-after-load 'org-roam\12\12\12    ;; pour avoir la hiérarchie lorsque c'est une sous note \12    (cl-defmethod org-roam-node-filetitle ((node org-roam-node))\12    \"Return the file TITLE for the node.\"\12    (org-roam-get-keyword \"TITLE\" (org-roam-node-file node)))\12\12\12    (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))\12    \"Return the hierarchy for the node.\"\12    (let ((title (org-roam-node-title node))\12    (olp (org-roam-node-olp node))\12    (level (org-roam-node-level node))\12    (filetitle (org-roam-node-filetitle node)))\12    (concat\12    (if (> level 0) (concat filetitle \" -> \"))\12    (if (> level 1) (concat (string-join olp \" -> \") \" -> \"))\12    title))) ;; soit disant une erreur ici, mais tout va bien\12\12    )\12\12\12    ;; (setq org-roam-node-display-template \"${directories:15} ${tags:40} ${backlinkscount:1}\")\12    ;; (setq org-roam-node-display-template \"${directories:10} ${tags:10} ${title:100} ${backlinkscount:6}\")\12\12" :post-blank 1 :post-affiliated 54153 :mode planning :granularity element :cached t :parent #232=(section (:begin 54153 :end 55128 :contents-begin 54153 :contents-end 55127 :robust-begin 54153 :robust-end 55125 :post-blank 1 :post-affiliated 54153 :mode section :granularity element :cached t :parent #231# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #232# 0] [nil nil #237=(section (:begin 55217 :end 55859 :contents-begin 55217 :contents-end 55858 :robust-begin 55217 :robust-end 55856 :post-blank 1 :post-affiliated 55217 :mode section :granularity element :cached t :parent #233# :org-element--cache-sync-key nil)) 0] #233# -1] [[[nil nil #234# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 55941 :end 57039 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (with-eval-after-load 'org-roam\12    \12    (defun org-hide-properties ()\12      \"Hide all org-mode headline property drawers in buffer. Could be slow if it has a lot of overlays.\"\12      (save-excursion\12        (goto-char (point-min))\12        (while (re-search-forward\12                \"^ *:properties:\\n\\\\( *:.+?:.*\\n\\\\)+ *:end:\\n\" nil t)\12          (let ((ov_this (make-overlay (match-beginning 0) (match-end 0))))\12            (overlay-put ov_this 'display \"\")\12            (overlay-put ov_this 'hidden-prop-drawer t))))\12      (put 'org-toggle-properties-hide-state 'state 'hidden))\12\12    (defun org-show-properties ()\12      \"Show all org-mode property drawers hidden by org-hide-properties.\"\12      (remove-overlays (point-min) (point-max) 'hidden-prop-drawer t)\12      (put 'org-toggle-properties-hide-state 'state 'shown))\12\12    (defun org-toggle-properties ()\12      \"Toggle visibility of property drawers.\"\12      (interactive)\12      (if (eq (get 'org-toggle-properties-hide-state 'state) 'hidden)\12          (org-show-properties)\12        (org-hide-properties)))\12    )\12" :post-blank 1 :post-affiliated 55941 :mode planning :granularity element :cached t :parent #235=(section (:begin 55941 :end 57039 :contents-begin 55941 :contents-end 57038 :robust-begin 55941 :robust-end 57036 :post-blank 1 :post-affiliated 55941 :mode section :granularity element :cached t :parent #234# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #235# 0] [nil nil #248=(section (:begin 57098 :end 57407 :contents-begin 57098 :contents-end 57406 :robust-begin 57098 :robust-end 57404 :post-blank 1 :post-affiliated 57098 :mode section :granularity element :cached t :parent #236# :org-element--cache-sync-key nil)) 0] #236# -1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 55217 :end 55859 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (with-eval-after-load 'org-roam\12    ;; (setq org-roam-node-display-template \"${directories:15} ${hierarchy:105} ${tags:40} ${backlinkscount:1}\") ;;plus besion des fichiers\12\12\12    (cl-defmethod org-roam-node-type ((node org-roam-node))\12      \"Return the TYPE of NODE.\"\12      (condition-case nil\12          (file-name-nondirectory\12           (directory-file-name\12            (file-name-directory\12             (file-relative-name (org-roam-node-file node) org-roam-directory))))\12        (error \"\")))\12\12    (setq org-roam-node-display-template \"${type:15} ${hierarchy:130} ${tags:40} ${backlinkscount:2}\")\12\12    )\12" :post-blank 1 :post-affiliated 55217 :mode planning :granularity element :cached t :parent #237# :org-element--cache-sync-key nil)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 52886 :end 54102 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (with-eval-after-load 'org-roam\12    (define-key org-roam-mode-map [mouse-1] #'org-roam-visit-thing)\12    ;; for org-roam-buffer-toggle\12    ;; Recommendation in the official manual\12    (add-to-list 'display-buffer-alist\12                 '(\"\\\\*org-roam\\\\*\"\12                   (display-buffer-in-direction)\12                   (direction . right)\12                   (window-width . 0.33)\12                   (window-height . fit-window-to-buffer)))\12    ;;pour avoir le nombre de backlinks lorsque que l'on cherche un node\12    (cl-defmethod org-roam-node-directories ((node org-roam-node))\12      (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))\12          (format \"%s\" (car (f-split dirs)))\12        \"\"))\12    (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))\12      (let* ((count (caar (org-roam-db-query\12                           [:select (funcall count source)\12                                    :from links\12                                    :where (= dest $s1)\12                                    :and (= type \"id\")]\12                           (org-roam-node-id node)))))\12        (format \"%d\" count)))\12    )\12\12\12" :post-blank 1 :post-affiliated 52886 :mode planning :granularity element :cached t :parent #238# :org-element--cache-sync-key nil)) 0] [[[[nil nil #239# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 57457 :end 57619 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package ox-hugo\12    :after org\12    :custom\12    (org-hugo-base-dir \"/home/msi/Documents/Projet/SitesWeb/braindump\")\12    )\12" :post-blank 1 :post-affiliated 57457 :mode planning :granularity element :cached t :parent #240=(section (:begin 57457 :end 57619 :contents-begin 57457 :contents-end 57618 :robust-begin 57457 :robust-end 57616 :post-blank 1 :post-affiliated 57457 :mode section :granularity element :cached t :parent #239# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #240# 0] [nil nil #247=(section (:begin 57678 :end 57866 :contents-begin 57678 :contents-end 57865 :robust-begin 57678 :robust-end 57863 :post-blank 1 :post-affiliated 57678 :mode section :granularity element :cached t :parent #241# :org-element--cache-sync-key nil)) 0] #241# -1] [[[nil nil #242# 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":tangle no" :begin 57982 :end 58058 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(require 'org-roam-protocol)\12\12" :post-blank 1 :post-affiliated 57982 :mode nil :granularity element :cached t :parent #243=(section (:begin 57902 :end 58058 :contents-begin 57902 :contents-end 58057 :robust-begin 57902 :robust-end 58055 :post-blank 1 :post-affiliated 57902 :mode section :granularity element :cached t :parent #242# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] (paragraph (:begin 57902 :end 57982 :contents-begin 57902 :contents-end 57982 :post-blank 0 :post-affiliated 57902 :mode planning :granularity element :cached t :parent #243# :org-element--cache-sync-key nil)) 1] #243# 1] [[nil nil #244# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 58128 :end 58182 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package org-ql)\12" :post-blank 0 :post-affiliated 58128 :mode planning :granularity element :cached t :parent #245=(section (:begin 58128 :end 58182 :contents-begin 58128 :contents-end 58182 :robust-begin 58128 :robust-end 58180 :post-blank 0 :post-affiliated 58128 :mode section :granularity element :cached t :parent #244# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #245# 0] #246# -1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 57678 :end 57866 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (defun jethro/tag-new-node-as-draft ()\12    (org-roam-tag-add '(\"draft\")))\12  (add-hook 'org-roam-capture-new-node-hook #'jethro/tag-new-node-as-draft)\12\12" :post-blank 1 :post-affiliated 57678 :mode planning :granularity element :cached t :parent #247# :org-element--cache-sync-key nil)) 1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 57098 :end 57407 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package deft\12    :after org-roam\12    :config\12    (setq deft-extensions '(\"org\")\12          deft-directory org-roam-directory\12          deft-recursive t\12          deft-strip-summary-regexp \":PROPERTIES:\\n\\\\(.+\\n\\\\)+:END:\\n\"\12          deft-use-filename-as-title t)\12    )\12" :post-blank 1 :post-affiliated 57098 :mode planning :granularity element :cached t :parent #248# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 49063 :end 49233 :contents-begin 49063 :contents-end 49230 :post-blank 3 :post-affiliated 49063 :mode planning :granularity element :cached t :parent #225# :org-element--cache-sync-key nil)) 1] #215# 0] #65# 0] nil nil 0] org-element--cache-compare)))