;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(flycheck-read-checker-history coding-system-history tex-compile-history command-history face-name-history info-lookup-history consult--theme-history Info-search-history consult--crm-history magit-revision-history regexp-history read-expression-history eww-prompt-history pdf-annot-color-history citar-history org-tags-history compile-history ctrlf-search-history Man-topic-history consult--grep-history org-refile-history org-read-date-history org-capture--prompt-history bookmark-history org-roam-node-history query-replace-history org-link--history buffer-name-history minibuffer-history extended-command-history file-name-history consult--line-history empty-history))
(setq flycheck-read-checker-history '("grammalecte"))
(setq coding-system-history '("utf-8"))
(setq command-history '((switch-to-buffer "GTD.org" nil 'force-same-window) (consult-bookmark "GTD.org") (consult-bookmark "GTD.org") (describe-function 'export-and-load-and-hook) (flycheck-grammalecte-correct-error-before-point) (execute-extended-command nil "flycheck-grammalecte-correct-error-before-point" "erro bef") (xah-clear-register-1) (execute-extended-command nil "xah-clear-register-1" nil) (xah-clear-register-1) (execute-extended-command nil "xah-clear-register-1" nil) (xah-clear-register-1) (execute-extended-command nil "xah-clear-register-1" nil) (xah-clear-register-1) (execute-extended-command nil "xah-clear-register-1" nil) (xah-clear-register-1) (execute-extended-command nil "xah-clear-register-1" nil) (xah-clear-register-1) (execute-extended-command nil "xah-clear-register-1" nil) (xah-clear-register-1) (execute-extended-command nil "xah-clear-register-1" "clear regi") (jump-to-register 110 nil) (window-configuration-to-register 110 nil) (window-configuration-to-register 97 nil) (jump-to-register 116 nil) (jump-to-register 116 nil) (jump-to-register 116 nil) (describe-function 'toggle-word-wrap) (frameset-to-register 116) (execute-extended-command nil "frameset-to-register" nil) (frameset-to-register 113) (execute-extended-command nil "frameset-to-register" "fram to reg") (describe-function 'frameset-to-register) (flyspell-mode 'toggle) (execute-extended-command nil "flyspell-mode" "flysp mo") (describe-function 'flyspell-buffer) (find-file "~/sharedDirectoryPrivate/notes/org/test.org" t) (flycheck-grammalecte-correct-previous-error-before-point) (execute-extended-command nil "flycheck-grammalecte-correct-previous-error-before-point" nil) (flycheck-grammalecte-correct-previous-error-before-point) (execute-extended-command nil "flycheck-grammalecte-correct-previous-error-before-point" nil) (flycheck-grammalecte-correct-previous-error-before-point) (execute-extended-command nil "flycheck-grammalecte-correct-previous-error-before-point" nil) (switch-to-buffer "*Help*" nil 'force-same-window) (flycheck-grammalecte-correct-previous-error-before-point) (execute-extended-command nil "flycheck-grammalecte-correct-previous-error-before-point" nil) (switch-to-buffer "Inbox.org" nil 'force-same-window) (describe-function 'flycheck-grammalecte-correct-error-at-point) (flycheck-grammalecte-correct-previous-error-before-point) (execute-extended-command nil "flycheck-grammalecte-correct-previous-error-before-point" nil) (flycheck-grammalecte-correct-previous-error-before-point) (execute-extended-command nil "flycheck-grammalecte-correct-previous-error-before-point" nil) (flycheck-grammalecte-correct-previous-error-before-point) (execute-extended-command nil "flycheck-grammalecte-correct-previous-error-before-point" nil) (switch-to-buffer "Inbox.org" nil 'force-same-window) (flycheck-grammalecte-correct-previous-error-before-point) (execute-extended-command nil "flycheck-grammalecte-correct-previous-error-before-point" "fly prev be") (switch-to-buffer "basicOptimisationsAvecDep.org" nil 'force-same-window) (flycheck-grammalecte-correct-previous-error-before-point) (execute-extended-command nil "flycheck-grammalecte-correct-previous-error-before-point" nil) (switch-to-buffer "*Messages*" nil 'force-same-window) (flycheck-grammalecte-correct-previous-error-before-point) (execute-extended-command nil "flycheck-grammalecte-correct-previous-error-before-point" nil) (flycheck-grammalecte-correct-previous-error-before-point) (execute-extended-command nil "flycheck-grammalecte-correct-previous-error-before-point" nil) (flycheck-grammalecte-correct-error-at-point (point)) (execute-extended-command nil "flycheck-grammalecte-correct-error-at-point" "gra cor at") (flycheck-grammalecte-correct-previous-error-before-point) (execute-extended-command nil "flycheck-grammalecte-correct-previous-error-before-point" "fly gra p") (flyspell-auto-correct-previous-word (point)) (execute-extended-command nil "flyspell-auto-correct-previous-word" "fly corr pre") (flycheck-next-error nil) (execute-extended-command nil "flycheck-next-error" "fly nex") (flycheck-grammalecte-correct-error-at-point (point)) (execute-extended-command nil "flycheck-grammalecte-correct-error-at-point" nil) (flycheck-grammalecte-correct-error-at-point (point)) (execute-extended-command nil "flycheck-grammalecte-correct-error-at-point" nil) (flycheck-grammalecte-correct-error-at-point (point)) (execute-extended-command nil "flycheck-grammalecte-correct-error-at-point" nil) (flycheck-grammalecte-correct-error-at-point (point)) (execute-extended-command nil "flycheck-grammalecte-correct-error-at-point" nil) (flycheck-list-errors) (execute-extended-command nil "flycheck-list-errors" nil) (flycheck-list-errors) (execute-extended-command nil "flycheck-list-errors" "fly lis") (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-grammalecte-correct-error-at-point (point)) (execute-extended-command nil "flycheck-grammalecte-correct-error-at-point" nil) (flycheck-grammalecte-correct-error-at-point (point)) (execute-extended-command nil "flycheck-grammalecte-correct-error-at-point" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" "fly mod") (flycheck-grammalecte-correct-error-at-point (point)) (execute-extended-command nil "flycheck-grammalecte-correct-error-at-point" nil) (flycheck-grammalecte-correct-error-at-point (point)) (execute-extended-command nil "flycheck-grammalecte-correct-error-at-point" nil) (flycheck-grammalecte-correct-error-at-point (point)) (execute-extended-command nil "flycheck-grammalecte-correct-error-at-point" "gram cor") (switch-to-buffer "Inbox.org" nil 'force-same-window) (switch-to-buffer "GTD.org" nil 'force-same-window) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" "flych ") (switch-to-buffer "Inbox.org" nil 'force-same-window) (describe-variable 'flycheck-grammalecte-filters-by-mode) (describe-variable 'flycheck-grammalecte-filters-by-mode) (avy-goto-char-2 107 32 nil nil nil) (switch-to-buffer "GTD.org" nil 'force-same-window) (switch-to-buffer "Inbox.org" nil 'force-same-window) (find-file "~/mesdocuments/personnel/informatique/emacs/emacs.dyoutube/" t) (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" nil) (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" nil) (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" nil) (switch-to-buffer "programmation.org" nil 'force-same-window) (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" nil) (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" nil) (exec-path-from-shell-copy-env "JAVA_HOME") (execute-extended-command nil "exec-path-from-shell-copy-env" "exe path") (server-start nil) (execute-extended-command nil "server-start" "ser star") (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" nil) (switch-to-buffer "*Messages*" nil 'force-same-window) (server-force-delete nil) (execute-extended-command nil "server-force-delete" "ser del") (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" "lsp in") (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" "lsp-install-serveryc") (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" nil) (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" nil) (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" nil) (revert-buffer t) (execute-extended-command nil "revert-buffer" "reve") (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con r") (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" nil) (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" nil) (revert-buffer t) (execute-extended-command nil "revert-buffer" nil) (revert-buffer t) (execute-extended-command nil "revert-buffer" "reve") (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con ri") (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" "lsp ins se") (straight-visit-package-website) (execute-extended-command nil "straight-visit-package-website" "str vis") (revert-buffer t) (execute-extended-command nil "revert-buffer" nil) (revert-buffer t) (execute-extended-command nil "revert-buffer" "rev") (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con ") (find-file "~/Testdedossier/HelloWorld.java
" t) (switch-to-buffer "Lessauvegardes.org" nil 'force-same-window) (switch-to-buffer "Inbox.org" nil 'force-same-window) (switch-to-buffer "Inbox.org" nil 'force-same-window) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil)))
(setq consult--theme-history '("doom-moonlight" "tsdh-dark"))
(setq regexp-history '("org-id-add-location"))
(setq eww-prompt-history '("https://ent.uca.fr/moodle/course/view.php?id=8036"))
(setq citar-history '("                                   2021-08-19T06:04:34Z     Effet Ikea                                                 EffetIkea2021      inreference       has:files  has:link  EffetIkea2021" "                                   2021-10-10T21:48:55Z     Biais d'autocomplaisance                                   BiaisAutocomplaisance2021    inreference       has:files  has:link  BiaisAutocomplaisance2021" "Voit                               2022-02-05T08:50:20Z     My GNU Emacs Configuration                                 voitMyGNUEmacs2022    software        configuration,emacs,personal                                    has:link  voitMyGNUEmacs2022" "                                   2020-12-10     Comment Ne plus RIEN OUBLIER Grâce à Un SECOND CERVEAU ?           eliottmeunierCommentNeRIEN2020    movie                                                                           has:link  eliottmeunierCommentNeRIEN2020" "                                            Accro au smartphone : les effets étonnants de la nomophobie sur notre santé           AccroAuSmartphone    online            has:files  has:link  AccroAuSmartphone" "Voit                               2022-02-05T08:50:20Z     My GNU Emacs Configuration                                 voitMyGNUEmacs2022    software        configuration,emacs,personal                                    has:link  voitMyGNUEmacs2022" "                                            Automatic Export :: Better BibTeX for Zotero               AutomaticExportBetter    online            has:files  has:link  AutomaticExportBetter" "                                            How I Take Notes with Org-roam                             HowTakeNotes       online            has:files  has:link  HowTakeNotes" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc               has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "Voit                               2022     My GNU Emacs Configuration                                 voit_my_2022       misc            configuration, emacs, personal                                  has:link  voit_my_2022" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc               has:link  noauthor_zotero_2021" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc               has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc               has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc               has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                                has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                                has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc               has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                                has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                                has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc               has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc               has:link  noauthor_zotero_2021" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc               has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "noauthor_how_nodate"))
(setq org-tags-history '("work" "@pc"))
(setq compile-history '("javac src/*.java && java src/Current" "javac src/*.java && java Current" "javac src/*.java && java current" "javac src/*.java && java current.java" "javac src/*.java && java current" "javac src/*.java" "javac src/*.java && java src/current" "javac src/*.java && java src/current.java " "javac src/*.java && java current.java " "javac src/*.java && java src/current.java " "javac src/*.java && javac src/current.java " "javac src/*.java "))
(setq Man-topic-history '("wget(1)" "ssh-keygen(1)" "hostname(1)"))
(setq consult--grep-history '("#use pack lsp-java" "#JAVA " "#Jeu" "#look_and_say" "#text mode" "grammalecte-find-synonyms" "#org-download use pack" "#merci" "#epub lire" "#epub" "#use org-download" "#org-download" "#img" "#2022 08 03" "#setq org capture " "#setq org captur templa" "#magit use" "#use pack org-vcard" "#Layout" "#user-emacs-directory" "#hunspell" "#hunspe" "#with eval" "#with eval af" "#je suis en train de bien penser à mon avenir" "#.outline-2" "#emacs everywhere" "#ripgr" "#set-face-attribute" "#variable-pitch-mode" "#Journal de satisfaction" "#tsdh-dark" "#home/msi" "#after init hook" "#8aac069c-ecda-4a5f-82df-add2a7ddfdcb" "#dbb" "#all the ic use" "#size" "#3b3b0f5c-208f-44f1-b132-548cdd6d3633" "#dbb" "#7dfe50ff-a61d-420c-a480-428f215e891d" "#7dfe" "#bd2e" "oc-csl" "#org-cite-csl-styles-dir" "#@work" "#dans le head" "#toc" "#org-cite requi" "#use org ref packa" "#he default CSL locale file " "#look and " "#This paper presented a new family of models ca" "#3e969" "#org-goto defun" "#org-gtd--decorate-item" "#next" "#Je vais vite m'habituer à tout" "#WAIT"))
(setq org-refile-history '("films_vus.org/11 Film et serie à voir/" "Contacts.org/Connaissances/" "Contacts.org/Famille/" "Contacts.org/Connaissances/" "Contacts.org/Potes/" "Contacts.org/Professionnel/" "Bookmarks.org/Perso/Mes sites web/" "Sully/ (films_vus.org)" "References.org/Films/" "Contacts.org/Famille/" "References.org/ArchivesPropres + décision (ce que je veux garder comme \"souvenir\")/" "Bookmarks.org/Vie professionnelle/Cours s4 (moodle, caséine etc)/" "Bookmarks.org/Perso/Sites que j'aime bien/" "Bookmarks.org/Perso/Liseuse/" "Bookmarks.org/Perso/Informatique/Emacs/Systemcrafter notes/" "Bookmarks.org/Perso/Informatique/Pratique/" "Bookmarks.org/Vie professionnelle/Cours s4 (moodle, caséine etc)/" "Bookmarks.org/Administratif (mail, drive)/" "Bookmarks.org/Perso/Informatique/Emacs/Les .emacs.d/" "Bookmarks.org/Perso/Informatique/Emacs/Braindump/" "Bookmarks.org/\"Perso\"/Informatique/Pratique/" "Bookmarks.org/\"Perso\"/Informatique/Sécurité/" "Bookmarks.org/\"Perso\"/Informatique/Emacs/Les .emacs.d/" "References.org/ArchivesPropres + décision (ce que je veux garder comme \"souvenir\")/" "AgendaTickler.org/" "Clavier/" "Emacs en français (oui c'est moyen comme titre)/ (README.org)"))
(setq org-read-date-history '("+1    " "+2    " "19h 08    " "19:00 20    " "18h30    " "sat 9h    " "+2 18h-20h    " "+2 14h-20h    " "+2 18h-20h    " "+1    " "   " "19:00 7    " "   " "14    " "+2 13h30    " "+2m    " "+1 9h30-11h    " "+1    " "+2    " "+1    "))
(setq bookmark-history '("GTD.org" "GTD.org" "GTD.org" "mesdocuments" "mesdocuments" "GTD.org" "GTD.org" "org notes" "org notes" "org-refile-last-stored" "org-capture-last-stored" "zettelkaste braindump" "zettelkaste braindump" "zettelkasten" "zettelkasten" "GTD.org" "GTD.org" "Inbox.org" "Inbox.org" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "S4" "S4" "org-refile-last-stored" "org-refile-last-stored" "configFichiers" "configFichiers" "orgzly" "orgzly" "configFichiers" "configFichiers" "S4" "S4" "configFichiers" "configFichiers" "configFichiers" "configFichiers" "S4" "S4" "configFichiers" "configFichiers" "org-refile-last-stored" "configFichiers" "configFichiers" "S4" "S4" "configFichiers" "configFichiers" "orgzly" "orgzly" "S4" "S4" "configFichiers" "configFichiers" "configFichiers" "ancienneconfigorg" "ancienneconfigorg" "ancienneconfigorg" "Burly: tempo" "orgzly" "orgzly" "Burly: tempo" "Burly: tempo" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "org-refile-last-stored" "org-capture-last-stored" "emacs.dyoutube" "braindump de base" "Inbox" "GTD" "Configuration de fenêtre efficace" "Burly: tempo" "Burly: pour export tempo" "orgzly" "orgzly" "Burly: tempo" "Burly: tempo" "Burly: pour export tempo" "Burly: pour export tempo" "org-refile-last-stored" "orgzly" "orgzly" "orgzly" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "emacs.dyoutube" "emacs.dyoutube" "Burly: tempo export bis" "Burly: tempo" "Burly: pythontempo" "orgzly" "orgzly" "braindump de base" "braindump de base" "orgzly" "orgzly" "braindump de base" "braindump de base" "Burly: tempo" "Burly: tempo" "braindump de base" "braindump de base" "orgzly" "orgzly" "orgzly" "orgzly" "emacs.dyoutube" "emacs.dyoutube" "orgzly" "orgzly" "orgzly" "orgzly" "braindump de base" "braindump de base" "orgzly" "orgzly" "orgzly" "orgzly" "emacs.dyoutube" "emacs.dyoutube" "orgzly" "orgzly" "orgzly" "Burly: tempo export bis" "Burly: tempo export bis" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" "braindump de base" "braindump de base" "orgzly" "orgzly" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" "braindump de base" "braindump" "braindump" "orgzly" "orgzly" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py"))))
(setq org-roam-node-history '("main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Effet Ikea                                                                                                                         #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Effet Ikea                                                                                                                         #draft                                   0 " "reference       Biais d'autocomplaisance                                                                                                           #draft                                   0 " "test" "reference       Biais d'autocomplaisance                                                                                                           #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Comment Ne plus RIEN OUBLIER Grâce à Un SECOND CERVEAU ?                                                                           #draft                                   1 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Comment Ne plus RIEN OUBLIER Grâce à Un SECOND CERVEAU ?                                                                           #draft                                   0 " "reference       test                                                                                                                               #draft                                   0 " "                Psychologie -> Sentiments                                                                                                                                                   1 " "                Adolf Hitler                                                                                                                                                                3 " "                Sigmund Freud                                                                                                                                                               3 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "naetsui" "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "natuei" "test" "yol" "yolo" "reference       yolo                                                                                                                               #draft                                   0 " "yolo" "test            Testréférenceorg-ref                                                                                                               #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Testderéférences                                                                                                                   #draft                                   0 " "reference       Testréférenceorg-ref                                                                                                               #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Testderéférences                                                                                                                   #draft                                   0 " "narsteuinrtaeui" "nauetinrateui" "naeutsi" "nrateuisntrea" "nrateuint" "natseiun" "nateuinrs" "narutenateuin" "naretina" "nrauteiniraeut" "anretinraeutsnrit" "ntaueinstnrseua" "ansutei" "ntaueinsrtnruaeitnruaei" "nautienrsaueti" "nauteisnateiu" "nateuint" "nratuie" "reference       Testderéférences                                                                                                                   #draft                                   0 " "nrateiu" "reference       Testderéférences                                                                                                                   #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Testderéférences                                                                                                                   #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "narteinr" "nratieu" "naeuti" "Inbox" "nartieu" "tnaieu" "Testtnuai" "Comment je vais faire mon braindump" "articles        Building a Zettelkasten with Org-roam                                                                                              #article #draft                          0 " "articles        Building a Zettelkasten with Org-roam -> Basic Setup                                                                               #article #draft                          0 " "A Complete Workflow in Emacs                                                                                                                                                0 " "Testderéférences                                                                                                                   #draft                                   0 " "Eliott Meunier :: Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?                                                         #draft                                   1 "))
(setq query-replace-history '("switch" "commutateur" "switchs" "commutateurs" "switch" "commutateur" "switch" "commutateurs" "my-user-emacs-config-directory" #("my-user-emacs-directory" 0 22 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t) 22 23 (face (org-block) font-lock-multiline t rear-nonsticky t src-block t font-lock-fontified t)) "my-tangle-a-file-of-config-org" #("my-tangle-config-org" 0 12 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t font-lock-fontified t) 12 19 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t font-lock-fontified t) 19 20 (rear-nonsticky t face (font-lock-function-name-face org-block) font-lock-multiline t src-block t font-lock-fontified t)) "sharedDirectoryPrivate" "dossier_partage" "~/mesdocuments/" #("~/documents/mesdocuments/" 0 24 (font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) src-block t) 24 25 (font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) src-block t rear-nonsticky t)) "mesdocuments-directory" #("documents-mesdocuments-directory" 0 31 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t) 31 32 (rear-nonsticky t face (org-block) font-lock-multiline t src-block t font-lock-fontified t)) "mesdocuments-directory" #("documents-mesdocuments-directory" 0 31 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t) 31 32 (rear-nonsticky t face (org-block) font-lock-multiline t src-block t font-lock-fontified t)) "~/sharedDirectoryPrivate/" #("~/dossier_partage/Clement/" 0 25 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t) 25 26 (rear-nonsticky t face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t)) "<2022-03-06 Sun 19:00>" #("<2022-02-27 Sun 19:00>" 0 21 (face org-date) 21 22 (rear-nonsticky t face org-date)) "2022-02-27 Sun 19:00" #("2022-02-13 Sun 19:00" 0 19 (org-category "AgendaTickler" face org-date) 19 20 (org-category "AgendaTickler" face org-date rear-nonsticky t)) "documents" "Documents" "~" "/home/msi" "~/" "/home/msi" "shared-directory-all-org-files" #("org-shared-directory-files" 0 25 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t) 25 26 (rear-nonsticky t face (org-block) font-lock-multiline t src-block t font-lock-fontified t)) "documents-directory-all-org-files" "org-documents-directory-files" "shared-directory-all-org-files" "org-shared-directory-files" "documents-directory-all-org-files" #("org-documents-directory-files" 0 28 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t) 28 29 (rear-nonsticky t face (org-block) font-lock-multiline t src-block t font-lock-fontified t))))
(setq org-link--history '("id:"))
(setq buffer-name-history '("GTD.org" "*Help*" "Inbox.org" "basicOptimisationsAvecDep.org" "*Messages*" "Inbox.org" "GTD.org" "Inbox.org" "GTD.org" "Inbox.org" "programmation.org" "*Messages*" "Lessauvegardes.org" "Inbox.org" "GTD.org" "*Org Agenda*" "Bookmarks.org" "*Messages*" "Lessauvegardes.org" "grammalecte" "basicOptimisationsAvecDep.org" "Lessauvegardes.org" "basicOptimisationsAvecDep.org" "GTD.org" "Contacts.org" "Inbox.sync-conflict-20220311-092614-KL3GMYF.org" "Contacts.org" "config.org" "Bookmarks.org" "Inbox.org" "Contacts.org" "org-download.el" "testimage.org" "Contacts.org" "testimage.org" "*Messages*" "testimage.org" "Contacts.org" "AgendaTickler.org" "Bookmarks.org" "testimage.org" "org-mode.org" "testimage.org" "org-mode.org" "*Messages*" "artistes.org" "org-mode.org" "*Messages*" "org-mode.org" "*Messages*" "org-mode.org" "notesPerso(nepasgarderPointDinterogation)" "org-mode.org" "notesPerso(nepasgarderPointDinterogation)" "org-mode.org" "*Messages*" "*Backtrace*" "*Messages*" "films_vus.org" "*Messages*" "Contacts.org" "contacts.org" "Contacts.org" "AgendaTickler.org" "org-mode.org" "Bookmarks.org" "org-mode.org" "contacts.org" "Contacts.org" "templatesOrgCapture" "org-mode.org" "Contacts.org" "test.vcf" "testdecontact.org" "*org-vcard-import*" "References.org" "*Messages*" "Contacts.org" "org-mode.org" "*Messages*" "test.c<Testdedossier>" "Testdedossier" "References.org" "AgendaTickler.org" "*Messages*" "testdossier" "AgendaTickler.org" "Inbox.org" "org-mode.org" "AgendaTickler.org" "Bookmarks.org" "theme.css" "Bookmarks.org" "*dashboard*" "basicOptimisations.org" "basicOptimisationsAvecDep.org" "*Messages*" "Inbox.org" "*dashboard*" "*Org Export Process*" "*Org Export Process*<2>" "*Messages*" "*Org Export Process*<2>" "*Messages*" "org.org" "*Org Export Process*<2>" "org.org" "basicOptimisations.org" "Inbox.org" "Contacts.org" "org.org" "Contact.org" "Contacts.org" "org.org" "Contacts.org" "org.sh" "org.org" "Bookmarks.org<notes>" "Bookmarks.org<utilisateur>" "Lessauvegarde.org" "*Messages*" "*shell*" "autostart" "*Org Agenda*" "*Messages*" "test.el" "*Messages*" "sharedDirectoryPrivate" "*Messages*" "Inbox.org" "Orgzly" "Lessauvegarde.org" "dossier_partage" "*Messages*" "Lessauvegarde.org" "Inbox.org" "*Messages*" "AutomaticExportBetter.org" "*scratch*" "*Messages*" "Zotero" "*Backtrace*" "*Messages*" "*dashboard*" "Testderéférencessimple.org" "*dashboard*" "*Messages*" "Inbox.org" "References.org" "*Messages*" "configAvecCitarPasPropre.org" "reference" "Readme.org" "*Messages*" "GTD.org" "Testderéférences.org" "*Messages*" "Testderéférences.org" "*Messages*" "Testderéférences.org" "GTD.org" "Exos-Vracfinal.py" "test.py<3>" "TP.pdf" "*Messages*" "Testderéférences.org" "*Messages*" "Testderéférences.org" "*Messages*" "*dashboard*" "*Messages*" "*Org Export Process*" "*Messages*" "GTD.org" "*Messages*" "config.org<.emacs.dcavantrevert>" "comment_je_vais_faire_mon_braindump.org" "Inbox.org" "*Org Agenda*" "Inbox.org" "*Org QL View: (todo RAPPEL NEXT)*" "Inbox.org" "*Org Agenda*" "GTD.org" "*Org Agenda*" "GTD.org" "*dashboard*" "GTD.org" "*Org Agenda*" "test.org" "*Org Agenda*" "GTD.org" "test.org" "Anglais" "test.org" "*Messages*" "*Org Export Process*<2>" "*Org Export Process*<9>" "*Org Export Process*<4>" "*Org Export Process*"))
(setq minibuffer-history '("export-and-load-and-hook" "toggle-word-wrap" "frameset-to-register" "flyspell-buffer" "flycheck-grammalecte-correct-error-at-point" "flycheck-grammalecte-filters-by-mode" "jdtls" "jdtls (Already installed)" "jdtls" "JAVA_HOME" "jdtls" "lsp-java" "jdtls" "grammalecte-download-grammalecte" "grammalecte-settings-file" "salut" "test" "ispell-local-dictionary" "url-retrieve-synchronously" "org-download-annotate-function" "file" "buffer" "org-vcard" "nov" "org notes" "zettelkasten" "org-download-annotate-default" "dummy-org-download-annotate-function" "org-download-annotate-default" "org-download-backend" "org-download" "org-vcard" "org-download-dnd" "Test de rename" "org-download" "org-download--file-content" "org-download-image-dir" "org-download" "peep-dired" "zettelkasten" "file" "buffer" "org-vcard" "file" "buffer" "file" "buffer" "Contact.org" "rien" "Sully film"))
(setq extended-command-history '("flycheck-grammalecte-correct-error-before-point" "xah-clear-register-1" "frameset-to-register" "flyspell-mode" "flycheck-grammalecte-correct-previous-error-before-point" "flycheck-grammalecte-correct-error-at-point" "flycheck-grammalecte-correct-previous-error-before-point" "flyspell-auto-correct-previous-word" "flycheck-next-error" "flycheck-grammalecte-correct-error-at-point" "flycheck-list-errors" "flycheck-mode" "flycheck-grammalecte-correct-error-at-point" "flycheck-mode" "flycheck-grammalecte-correct-error-at-point" "flycheck-mode" "lsp-install-server" "exec-path-from-shell-copy-env" "server-start" "lsp-install-server" "server-force-delete" "lsp-install-server" "revert-buffer" "consult-ripgrep" "lsp-install-server" "revert-buffer" "consult-ripgrep" "lsp-install-server" "straight-visit-package-website" "revert-buffer" "consult-ripgrep" "lsp-mode" "flycheck-list-errors" "flycheck-select-checker" "flycheck-list-errors" "flycheck-mode" "flycheck-select-checker" "flycheck-list-errors" "grammalecte-download-grammalecte" "flycheck-list-errors" "flycheck-mode" "flycheck-list-errors" "flycheck-mode" "flycheck-grammalecte-correct-error-at-point" "straight-remove-unused-repos" "grammalecte-download-grammalecte" "flycheck-select-checker" "flycheck-list-errors" "flycheck-mode" "revert-buffer" "consult-ripgrep" "grammalecte-download-grammalecte" "consult-ripgrep" "grammalecte-find-synonyms" "grammalecte-define-at-point" "flycheck-list-errors" "flycheck-mode" "flycheck-select-checker" "flycheck-list-errors" "grammalecte-find-synonyms" "grammalecte-download-grammalecte" "man" "flycheck-list-errors" "flycheck-mode" "ispell-change-dictionary" "consult-ripgrep" "org-vcard-import" "org-vcard-export" "straight-visit-package-website" "nov-next-document" "nov-goto-toc" "taille-interligne" "consult-ripgrep" "nov-goto-toc" "nov-next-document" "nov-goto-toc" "nov-next-document" "nov-previous-document" "nov-next-document" "straight-visit-package-website" "consult-ripgrep" "dashboard-jump-to-bookmarks" "dashboard-next-line" "bookmark-rename" "customize-variable" "straight-visit-package-website" "customize-group" "straight-visit-package-website" "consult-ripgrep" "org-toggle-inline-images" "revert-buffer" "org-download-edit" "org-download-rename-last-file" "customize-group" "newline" "mkdir" "straight-visit-package-website" "consult-ripgrep" "straight-use-package" "peep-dired-next-file" "customize-group" "peep-dired" "dired-view-file" "straight-use-package" "consult-ripgrep" "mkdir" "revert-buffer" "consult-ripgrep" "xah-insert-date" "consult-ripgrep" "org-vcard-export" "revert-buffer" "customize-group" "org-vcard-export" "consult-ripgrep" "find-name-dired" "consult-ripgrep" "rectangle-mark-mode" "mkdir" "org-roam-buffer-toggle" "org-id-get-create" "revert-buffer" "mkdir" "org-icalendar-combine-agenda-files-foreground" "consult-ripgrep" "org-refile-goto-last-stored" "org-vcard-import" "org-vcard-export" "consult-ripgrep" "org-vcard-export" "org-vcard-menu" "consult-ripgrep" "org-sort" "org-vcard-export" "org-vcard-import" "customize-variable" "org-vcard-import" "org-vcard-export" "org-vcard-import" "straight-use-package" "org-contacts-export-as-vcard" "org-vcard-export" "org-contacts-export-as-vcard" "end-of-line" "xah-end-of-line-or-block" "image-toggle-display" "consult-ripgrep" "smartparens-mode" "my-tangle-config-org" "straight-use-package" "flyspell-mode" "flycheck-mode" "consult-ripgrep" "revert-buffer" "man" "org-version" "consult-ripgrep" "lsp-workspace-restart" "revert-buffer" "consult-ripgrep" "revert-buffer" "line-number-mode" "lsp-workspace-restart" "company-yasnippet" "company-box-mode" "company-yasnippet" "activeryasnippets" "company-box-mode" "yas-global-mode" "c-mode" "lsp-mode" "snippet-mode" "lsp-mode" "revert-buffer" "company-mode" "revert-buffer" "lsp-completion-mode" "company-clang" "straight-dependents" "company-yasnippet" "revert-buffer" "consult-ripgrep" "find-name-dired" "org-refile-goto-last-stored" "lsp-install-server" "revert-buffer" "lsp-install-server" "revert-buffer" "mkdir" "revert-buffer" "lsp-install-server" "lsp-java-update-server" "revert-buffer" "straight-remove-unused-repos" "consult-ripgrep" "revert-buffer" "consult-ripgrep" "sql-mode" "text-mode" "tex-mode"))
(setq file-name-history '("~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/.dotfiles/.emacs.d/lisp/LayerXahFlyKey/LayerXahFlyKey.org" "~/sharedDirectoryPrivate/notes/org/test.org" "/tmp/emacs-everywhere-20220312-121752-Firefox" "/tmp/emacs-everywhere-20220312-121741-Firefox" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/mesdocuments/personnel/informatique/emacs/emacs.dyoutube/" "~/.dotfiles/.emacs.d/config/programmation.org" "~/Testdedossier/HelloWorld.java" "~/.dotfiles/.emacs.d/config/programmation.org" "~/Testdedossier/HelloWorld.java" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/.dotfiles/.emacs.d/var/lsp-java/eclipse.jdt.ls/" "~/.asdf/plugins/java/set-java-home.bash" "~/Testdedossier/HelloWorld.java" "~/Testdedossier/HelloWorld.java
" "/tmp/emacs-everywhere-20220311-121035-Firefox" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" "~/.emacs.dAutreOrdi/config.org" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" "~/.dotfiles/.emacs.d/straight/build/flycheck-grammalecte/grammalecte.el" "~/.dotfiles/.emacs.d/straight/build/flycheck-grammalecte/flycheck-grammalecte-autoloads.el" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.sh" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/" "~/Téléchargements/Grammalecte-fr-v2.1.1/setup.py" "~/Téléchargements/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/testcontact.org" "~/Téléchargements/contacts(4).vcf" "~/sharedDirectoryPrivate/notes/testcontact.org" "~/sharedDirectoryPrivate/notes/org/orgzly/Contacts.vcf" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/contacts.org" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/testimage.org" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/testimage.org" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/testimage.org" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/test.org" "~/sharedDirectoryPrivate/notes/org/artistes.org" "~/sharedDirectoryPrivate/notes/org/images" "~/sharedDirectoryPrivate/notes/zettelkasten/images" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/" "~/sharedDirectoryPrivate/notes/org/orgzly/AgendaTickler.org" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/àFairePetitÀPetit/snippets/" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/àFairePetitÀPetit/snippets" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/àFairePetitÀPetit/" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/àFairePetitÀPetit" "/media/utilisateur/8726733b-80c1-4ed4-9915-ed73e21cab26/home/msi/dossier_partage/Nell/Nox.kdbx" "~/sharedDirectoryPrivate/notes/org/artistesImages" "~/sharedDirectoryPrivate/notes/org/" "~/sharedDirectoryPrivate/notes/org/orgzly/Inbox.org" "~/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/" "~/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/recettes.org" "~/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/artistes.org" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)" "~/sharedDirectoryPrivate/notes/org/orgzly/Contacts.vcf" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/contacts.org" "~/sharedDirectoryPrivate/notes/org/orgzly/Contacts.vcf" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/org/orgzly/AgendaTickler.org" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/next.org" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/contactAncienAsupprimer.org" "~/sharedDirectoryPrivate/" "~/sharedDirectoryPrivate/notes/zettelkasten/notesperso?/" "~/sharedDirectoryPrivate/notes/org/orgzly/Bookmarks.org" "~/sharedDirectoryPrivate/notes/zettelkasten/notesperso?" "~/sharedDirectoryPrivate/notes/org/unenotesorg.org" "~/sharedDirectoryPrivate/notes/org/Fonctionnement.org" "~/sharedDirectoryPrivate/notes/org/Note.org" "~/sharedDirectoryPrivate/notes/zettelkasten/reference/EffetIkea2021.org" "~/mesdocuments/professionnel/cours/S4/ProgrammationOBJ/TP/4" "~/sharedDirectoryPrivate/notes/zettelkasten/reference/BiaisAutocomplaisance2021.org" "~/sharedDirectoryPrivate/notes/org/testdecontact.org" "~/Téléchargements/contacts(3).vcf" "~/sharedDirectoryPrivate/notes/org/orgzly/Contacts.vcf" "~/sharedDirectoryPrivate/notes/org/orgzly/test.vcf" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/contactAncienAsupprimer.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/sharedDirectoryPrivate/notes/org/test.vcf" "~/Téléchargements/contacts(2).vcf" "~/sharedDirectoryPrivate/notes/org/testdecontact.org" "~/Téléchargements/contacts(2).vcf" "~/sharedDirectoryPrivate/notes/org/test.vcf" "~/sharedDirectoryPrivate/notes/org/testdecontact.org" "~/Téléchargements/test.vcf" "~/Téléchargements/" "~/sharedDirectoryPrivate/notes/org/contact.vcf" "~/sharedDirectoryPrivate/notes/org/test.org" "~/Téléchargements/contacts(1).vcf" "~/sharedDirectoryPrivate/notes/org/test.org" "~/Téléchargements/contacts.vcf" "~/sharedDirectoryPrivate/notes/org/test.org" "~/sharedDirectoryPrivate/notes/org/orgzly/Contacts.org" "~/sharedDirectoryPrivate/notes/org/orgzly/test.vcf" "~/mesdocuments/professionnel/cours/S4/ProjetPrepIsima/Projet/Readme.md" "~/.dotfiles/.emacs.d/Organisation.jpg" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/.dotfiles/.tnaueit" "~/.dotfiles/.gitnateuniat" "~/.dotfiles/.emacs.d/init.el" "~/.dotfiles/.gitconfig" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/.dotfiles/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/.emacs.dAvantGit(àsuppr)" "~/.emacs.dAvantGit" "~/Testdedossier/test.c" "~/.emacs.d/config/programmation.org" "~/.emacs.d/config/programmationmarche.org" "~/.emacs.d/config/programmation.org" "~/Testdedossier/test.c" "~/.emacs.d/config/programmation.org" "~/.emacs.d/config/programmationancien.org" "~/.emacs.d/config/programmation.org" "~/Testdedossier/test.c" "~/.emacs.d/config/programmation.org" "~/Testdedossier/test.c" "~/Testdedossier" "~/sharedDirectoryPrivate/sauvegardePcEtTel/TEST.ORG" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/mesdocuments/professionnel/cours/S4/BaseDeDonnees/sujet2/Exercices.org" "~/testdossier/test.c" "~/sharedDirectoryPrivate/" "~/sharedDirectoryPrivate/notes/" "~/sharedDirectoryPrivate/notes/org/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/testdossier/test.py" "~/testdossier/test/test.c" "~/testdossier/test" "~/sharedDirectoryPrivate/notes/org/" "~/sharedDirectoryPrivate/notes/org/orgzly/Bookmarks.org" "/tmp/emacs-everywhere-20220306-175336-Firefox" "/tmp/emacs-everywhere-20220306-175314-Firefox" "/tmp/emacs-everywhere-20220306-174629-Firefox" "/tmp/emacs-everywhere-20220306-174612-Firefox" "/tmp/emacs-everywhere-20220306-174547-Firefox" "/tmp/emacs-everywhere-20220306-174540-Firefox" "/tmp/emacs-everywhere-20220306-173523-Firefox" "/tmp/emacs-everywhere-20220306-151753-Firefox" "/tmp/emacs-everywhere-20220306-151732-Firefox" "~/sharedDirectoryPrivate/notes/org/" "/tmp/emacs-everywhere-20220306-134321-Firefox" "/tmp/emacs-everywhere-20220306-134258-Firefox" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/set_customShortcutUbuntu.py" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/set_customshortcut.py" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/scriptPourRajouterRaccourcisUbuntu.py" "/tmp/emacs-everywhere-20220306-133438-Firefox" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/script.py" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "/tmp/emacs-everywhere-20220306-125506-Firefox" "/tmp/emacs-everywhere-20220306-125454-Firefox" "/tmp/emacs-everywhere-20220306-125441-Firefox" "/tmp/emacs-everywhere-20220306-125434-Firefox" "/tmp/emacs-everywhere-20220306-125411-Firefox" "/tmp/emacs-everywhere-20220306-125359-Firefox" "/tmp/emacs-everywhere-20220306-125353-Firefox" "/tmp/emacs-everywhere-20220306-125331-Firefox" "/tmp/emacs-everywhere-20220306-125324-Firefox" "/tmp/emacs-everywhere-20220306-125252-Firefox" "/tmp/emacs-everywhere-20220306-125245-Firefox" "/tmp/emacs-everywhere-20220306-125239-Firefox" "/tmp/emacs-everywhere-20220306-125232-Firefox" "/tmp/emacs-everywhere-20220306-125228-Firefox" "/tmp/emacs-everywhere-20220306-125110-Firefox" "/tmp/emacs-everywhere-20220306-125015-Firefox" "~/.emacs.d/config/basicOptimisations.org" "/tmp/emacs-everywhere-20220306-124608-Firefox" "/tmp/emacs-everywhere-20220306-123942-Firefox" "/tmp/emacs-everywhere-20220306-123923-Firefox" "/tmp/emacs-everywhere-20220306-123742-Firefox" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.d/config/integration.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.d/config/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.dAutreOrdi" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.dotfiles/" "~/" "~/sharedDirectoryPrivate/notes/org/orgzly/.fonts"))
(setq consult--line-history '("start char" "tl" "etc" "tlp" "script" "batter" "export" "rac" "raccou" "con" "fl spel" "rappel" "flycheck-grammalecte-correct-error-at-point" "flycheck-grammalecte--fix-error" "def" "in" "var" "lsp" "cus" "var" "jav" "pro" "java hel" "ins" ".dot" "java" "var" "java" "lsp" "var" "ls" "var" "lsp " "lsp ja" "lsp" "str" "lsp-" "autr" "test" ".dot" "test" "bas" "pl" "asd" "plu" "bas" "asd" ".do" "zim" "fly gramm" "grammalecte--download-grammalecte-if-needed def" "fly gr" ".em" "fl" "st" "fly gr" "fly" "str" ".em" "g" "té" "if fil" "bas" "gramm" "grammal" "hunsp" "org-download--parse-link" "org-download-insert-link" "org-download-annotate-function" "org-download-annotate-default" "org-download-image defu" "URI" "org-download-dnd def" "dnd file" "dnd fil" "tmp" "org-download-annotate-default" "ID" "You" "Pi" "Nico" "Math" "Lau" "Fr" "Fil" "Arm" "icon" "clement020302@gmail.com" "affai" "bro" "epu" "tél" "autr" "jou" "rena" "var" ".emacs" "org-download-insert-link" "org-download-annotate-function" "org-download-annotate-default" "org dow" "or dow" "stra" "autr" "#+DOWNLOADED" "org-download-annotate-function" "org-download-annotate-default" "aut" "#+DOWNLOADED" "test" "org downl" "after hook" "image inte" "ima" "peep-dired-display-file-other-window" "peep-dired-enable" "bros" "etc" "var" ".emacs.dr" "sha" "not" "o sont" "journ" "lien" "gala" "artis" "setq org capt" "arti" "setq org capt" ".emacs" "un jour" "doss" "hom" "med" "cleme" "prénom" "inb" "inbo" "we" "arn" "test" "ex par" "test nom" "setq org cap" "inbo" "note" "categ" "org cap" "after" "setq org capt " "diss" "rea" "read" "inbo" "con" "sit" "mes" "sull" "path" "ba" "bros" "<2022-03-07 Mon 19:00>" "bros" "scrip" "org refil targe" "/home/utilisateur/sharedDirectoryPrivate/notes/org/films_vus.org" "film" "try id" "pro pers" "nico ro" "pro" "org-vcard-default-export-file" "layou" "tem" "capt con" "org mod" "tel" "vid" "ex par" "org" "tit" "ORG" "valid-languages" "language \" \"" "title" "télé" "bi" "pré" "org conta" "il est sympas" "il est s" "org conta u" "org vcar" "gest" "org mo" "read" "setq my" "user-emacs-directory" "my-user-emacs-directory setq"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq dired-quick-sort-time-last '"status")
(setq dired-quick-sort-group-directories-last '110)
(setq dired-quick-sort-reverse-last '110)
(setq dired-quick-sort-sort-by-last '"version")
(setq kill-ring '(#("  echo \"START_CHARGE_THRESH_BAT0=55
STOP_CHARGE_THRESH_BAT0=60\"  >> /etc/tlp.conf" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 6 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 6 7 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 7 8 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 8 36 (font-lock-fontified t fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 36 61 (font-lock-fontified t fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 61 62 (font-lock-fontified t fontified t rear-nonsticky t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 62 63 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 63 64 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 64 67 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 67 68 (fontified t rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 68 80 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 80 81 (fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) "/etc/tlp.conf" "/etc/tlp.conf" " >> " #("START_CHARGE_THRESH_BAT0=55
STOP_CHARGE_THRESH_BAT0=60" 0 28 (fontified t font-lock-fontified t font-lock-multiline t face (:inherit (org-block))) 28 54 (fontified t font-lock-fontified t font-lock-multiline t face (:inherit (org-block)))) #("START_CHARGE_THRESH_BAT0=55
STOP_CHARGE_THRESH_BAT0=60" 0 28 (fontified t font-lock-fontified t font-lock-multiline t face (:inherit (org-block))) 28 54 (fontified t font-lock-fontified t font-lock-multiline t face (:inherit (org-block)))) #("Mois" 0 3 (org-category "AgendaTickler" fontified t face org-level-2) 3 4 (org-category "AgendaTickler" fontified t rear-nonsticky t face org-level-2)) #("** TODO Memory Box Mois" 0 1 (fontified t org-category "AgendaTickler" face org-hide keymap (keymap)) 1 2 (fontified t org-category "AgendaTickler" keymap (keymap) face org-level-2) 2 3 (fontified t org-category "AgendaTickler" keymap (keymap) face org-level-2) 3 7 (fontified t org-category "AgendaTickler" face (org-todo org-todo org-level-2)) 7 23 (fontified t org-category "AgendaTickler" face org-level-2)) "/home/utilisateur/.dotfiles/.emacs.d/lisp/LayerXahFlyKey/LayerXahFlyKey.org" #("(defun export-and-load-and-hook (file)
    (let (
          ;;création des fichiers de base
          (orgfile (concat my-user-emacs-config-directory (concat file \".org\")))
          (elfile (concat my-user-emacs-config-directory (concat file \".el\")))
          (gc-cons-threshold most-positive-fixnum))

      ;; création du fichier si jamais ça marche pas
      (when (or (not (file-exists-p elfile))
                (file-newer-than-file-p orgfile elfile))
        (my-tangle-a-file-of-config-org file)
        )
      ;;chargement du fichier
      (load-file elfile)
      )
    ;; (add-hook 'after-save-hook '(my-tangle-a-file-of-config-org-hook-func-\"file\"))
    (add-hook 'after-save-hook (apply-partially #'my-tangle-a-file-of-config-org-hook-func file))
    )" 0 1 (fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 38 (fontified t) 38 44 (fontified t) 44 47 (face font-lock-keyword-face fontified t) 47 60 (fontified t) 60 62 (face font-lock-comment-delimiter-face fontified t) 62 92 (face font-lock-comment-face fontified t) 92 112 (fontified t) 112 118 (face font-lock-function-name-face fontified t) 118 151 (fontified t) 151 157 (face font-lock-function-name-face fontified t) 157 163 (fontified t) 163 169 (face font-lock-string-face fontified t) 169 192 (fontified t) 192 198 (face font-lock-function-name-face fontified t) 198 231 (fontified t) 231 237 (face font-lock-function-name-face fontified t) 237 243 (fontified t) 243 248 (face font-lock-string-face fontified t) 248 263 (fontified t) 263 280 (face font-lock-variable-name-face fontified t) 280 281 (fontified t) 281 301 (face font-lock-variable-name-face fontified t) 301 311 (fontified t) 311 314 (face font-lock-comment-delimiter-face fontified t) 314 358 (face font-lock-comment-face fontified t) 358 365 (fontified t) 365 369 (face font-lock-keyword-face fontified t) 369 371 (fontified t) 371 373 (face font-lock-keyword-face fontified t) 373 375 (fontified t) 375 378 (face font-lock-function-name-face fontified t) 378 380 (fontified t) 380 393 (face font-lock-function-name-face fontified t) 393 420 (fontified t) 420 442 (face font-lock-function-name-face fontified t) 442 522 (fontified t) 522 524 (face font-lock-comment-delimiter-face fontified t) 524 538 (face font-lock-comment-face fontified t) 538 546 (face font-lock-comment-face fontified t) 546 553 (fontified t) 553 562 (face xah-elisp-command-face fontified t) 562 583 (fontified t) 583 586 (face font-lock-comment-delimiter-face fontified t) 586 665 (face font-lock-comment-face fontified t) 665 670 (fontified t) 670 678 (face font-lock-function-name-face fontified t) 678 680 (fontified t) 680 695 (face font-lock-variable-name-face fontified t) 695 697 (fontified t) 697 712 (face font-lock-function-name-face fontified t) 712 768 (fontified t)) #("export-and-load-and-hook" 0 24 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) #("flycheck-grammalecte-correct-error-before-point" 0 47 (fontified t)) #("(\"k\" . menu-bar-open)" 0 1 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1 4 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 4 21 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("free\"" 0 4 (fontified t) 4 5 (rear-nonsticky t fontified t)) #("Les touches peuvent être \"free\"" 0 31 (fontified t)) #("flyspell-check-previous-highlighted-word" 0 40 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("(\"j\" . flyspell-buffer)" 0 1 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1 4 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 4 7 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 7 22 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 22 23 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) "flyspell-check-previous-highlighted-word" #("flycheck-grammalecte-correct-error-before-point" 0 8 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 8 47 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("flycheck-grammalecte-correct-error-before-point" 0 8 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 8 47 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("previous" 0 8 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("\"Corrige la première erreur avant le curseur\"" 0 45 (face (font-lock-doc-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("précédente " 0 11 (face (font-lock-doc-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("au" 0 2 (face (font-lock-doc-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("au" 0 2 (face (font-lock-doc-face org-block) font-lock-multiline t src-block t font-lock-fontified t)) #("(defun flycheck-grammalecte-correct-previous-error-before-point ()
    \"Corrige l'erreur précédente au curseur\"
    (interactive)
    (save-excursion
        (flycheck-previous-error)
        (flycheck-grammalecte-correct-error-at-point (point)) 
      )
    )" 0 1 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1 6 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 6 7 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 7 15 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 15 63 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 63 67 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 67 71 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 71 111 (face (font-lock-doc-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 111 112 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 112 116 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 116 117 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 117 128 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 128 130 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 130 132 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 132 133 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 133 134 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 134 135 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 135 149 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 149 150 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 150 155 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 155 157 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 157 158 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 158 183 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 183 184 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 184 186 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 186 192 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 192 193 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 193 235 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 235 236 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t rear-nonsticky t) 236 237 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 237 243 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 243 244 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 244 245 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t rear-nonsticky t) 245 246 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t rear-nonsticky t fontified t) 246 247 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 247 248 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 248 253 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 253 255 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 255 260 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) "Salut ! Je sais pas trop comment intégrer des changements sur github, du coup j'ouvre une nouvelle \"issue\".
Je propose de faire cette fonction" #("flycheck-grammalecte-correct-previous-error-before-point" 0 8 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 8 56 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("flycheck-grammalecte-correct-previous-error-before-point" 0 8 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 8 56 (face (font-lock-function-name-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("(flycheck-grammalecte-correct-error-at-point (point)) " 0 1 (fontified t) 1 43 (fontified t) 43 44 (fontified t rear-nonsticky t) 44 45 (fontified t) 45 51 (fontified t) 51 52 (fontified t) 52 53 (rear-nonsticky t fontified t) 53 54 (fontified t)) #("(flycheck-grammalecte-correct-error-at-point (point))" 0 1 (fontified t) 1 43 (fontified t) 43 44 (rear-nonsticky t fontified t) 44 45 (fontified t) 45 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t)) #("3017" 0 4 (fontified t)) "flycheck-grammalecte-correct-error-at-point" "(point)" #("flycheck-grammalecte-correct-error-at-point" 0 43 (fontified t)) #("(let ((first-err (car-safe (flycheck-overlay-errors-at pos))))
    (when first-err
      (flycheck-grammalecte--fix-error
       first-err
       (cadr (flycheck-grammalecte--split-error-message first-err)))))" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 18 (fontified t) 18 26 (face font-lock-function-name-face fontified t) 26 68 (fontified t) 68 72 (face font-lock-keyword-face fontified t) 72 147 (fontified t) 147 151 (face font-lock-function-name-face fontified t) 151 209 (fontified t)) #("flycheck-grammalecte--fix-error" 0 31 (fontified t)) #("(let ((first-err (car-safe (flycheck-overlay-errors-at pos))))
    (when first-err
      (flycheck-grammalecte--fix-error
       first-err
       (cadr (flycheck-grammalecte--split-error-message first-err)))))" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 18 (fontified t) 18 26 (face font-lock-function-name-face fontified t) 26 68 (fontified t) 68 72 (face font-lock-keyword-face fontified t) 72 147 (fontified t) 147 151 (face font-lock-function-name-face fontified t) 151 209 (fontified t)) #("(flycheck-grammalecte-correct-error-at-point)" 0 44 (face (org-block) help-echo nil font-lock-multiline t fontified t src-block t font-lock-fontified t) 44 45 (face (org-block) help-echo nil font-lock-multiline t rear-nonsticky t fontified t src-block t font-lock-fontified t)) #("      (flycheck-previous-error)
      (flycheck-grammalecte-correct-error-at-point)" 0 32 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 32 83 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) "flycheck-grammalecte-correct-error-at-point" #("(flycheck-previous-error)" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 1 23 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 23 24 (fontified t rear-nonsticky t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 24 25 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) "(save-excursion BODY)" "(point)" "flycheck-previous-error" #("a" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block))) "flycheck-grammalecte-correct-error-at-point" #("(defun switch-dictionary-fr-en ()
  \"Switch french and english dictionaries.\"
  (interactive)
  (let* ((dict ispell-current-dictionary)
         (new (if (string= dict \"francais\") \"en_US\"
                   \"francais\")))
    (ispell-change-dictionary new)
    (message \"Switched dictionary from %s to %s\" dict new)))" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 1 6 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 6 7 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 7 30 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-function-name-face org-block) help-echo nil src-block t) 30 34 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 34 36 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 36 77 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-doc-face org-block) help-echo nil src-block t) 77 78 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 78 81 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 81 92 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 92 94 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 94 97 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 97 101 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 101 136 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 136 151 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 151 153 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 153 168 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 168 178 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 178 180 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 180 187 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 187 188 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 188 207 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 207 217 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 217 221 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 221 256 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 256 269 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 269 304 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 304 316 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) #("\"\\\"" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 1 3 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t)) #("\\" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("\"\"" 0 1 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 1 2 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t)) "\\.(.*?)" "

flycheck-grammalecte-report-spellcheck" "spellc" #("(setq
     ;; pas de faute avec les '
     flycheck-grammalecte-report-apos nil
     ;; pas de faute avec les espaces insécable
     flycheck-grammalecte-report-nbsp nil
     ;; pas de faute avec pleins d'espaces et de tab
     flycheck-grammalecte-report-esp nil)" 0 1 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 1 5 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 5 6 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 6 7 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 7 10 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 10 11 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 11 14 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 14 38 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 38 40 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 40 76 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 76 79 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 79 80 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 80 83 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 83 85 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 85 88 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 88 128 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 128 129 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 129 132 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 132 133 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 133 170 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 170 172 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 172 175 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 175 178 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 178 223 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 223 226 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 226 228 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 228 263 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 263 264 (face (org-block) font-lock-multiline t help-echo nil rear-nonsticky t fontified t src-block t font-lock-fontified t)) #("nil" 0 3 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t)) #("cnofig" 0 6 (face (font-lock-builtin-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("(setq
   ;; pas de faute avec les '
   flycheck-grammalecte-report-apos nil
   ;; pas de faute avec les espaces insécable
   flycheck-grammalecte-report-nbsp nil
   ;; pas de faute avec pleins d'espaces et de tab
   flycheck-grammalecte-report-esp nil)" 0 1 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1 5 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 5 6 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 6 9 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 9 12 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 12 36 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 36 76 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 76 79 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 79 82 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 82 122 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 122 162 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 162 165 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 165 168 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 168 213 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 213 252 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("d'apostrophe typographique" 0 13 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 13 25 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil) 25 26 (font-lock-fontified t src-block t fontified t rear-nonsticky t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil)) #(";; éviter l'erreur d'apostrophe typographique" 0 3 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 3 45 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t))))
(setq search-ring 'nil)
(setq recentf-list '("/home/utilisateur/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "/etc/tlp.conf" "/home/utilisateur/sharedDirectoryPrivate/notes/org/orgzly/GTD.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/orgzly/AgendaTickler.org" "/home/utilisateur/sharedDirectoryPrivate/agendapourgoogle.ics" "/home/utilisateur/mesdocuments/personnel/informatique/emacs/emacs.dyoutube/README.org" "/home/utilisateur/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "/home/utilisateur/.dotfiles/.emacs.d/config/programmation.org" "/home/utilisateur/Testdedossier/HelloWorld.java" "/home/utilisateur/.dotfiles/.emacs.d/config.org" "/home/utilisateur/.emacs.d/config.org" "/home/utilisateur/.emacs.dAutreOrdi/var/lsp-java/eclipse.jdt.ls/server/java-test/extension/CHANGELOG.md" "/home/utilisateur/.asdf/plugins/java/set-java-home.bash" "/home/utilisateur/.dotfiles/.bashrc" "/home/utilisateur/mesdocuments/professionnel/cours/S4/BaseDeDonnees/sujet3/sqlTP" "/home/utilisateur/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/seance1/Exos-Vracfinal.py" "/home/utilisateur/sharedDirectoryPrivate/org-linkz/Bookmarks.html" "/home/utilisateur/.emacs.dAutreOrdi/config.org" "/home/utilisateur/.dotfiles/.emacs.d/straight/build/flycheck-grammalecte/grammalecte.el" "/home/utilisateur/.dotfiles/.emacs.d/straight/build/flycheck-grammalecte/flycheck-grammalecte-autoloads.el" "/home/utilisateur/.dotfiles/.emacs.d/config/integration.org" "/home/utilisateur/.dotfiles/.emacs.d/config/basicOptimisations.org" "/home/utilisateur/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.sh" "/home/utilisateur/.dotfiles/.emacs.d/straight/build/flycheck-grammalecte/conjugueur.py" "/home/utilisateur/.emacs.d/straight/build/flycheck-grammalecte/flycheck_grammalecte.py" "/home/utilisateur/.dotfiles/.emacs.d/config/org-mode.org" "/home/utilisateur/sharedDirectoryPrivate/notes/testimage.org" "/home/utilisateur/.dotfiles/.emacs.d/straight/build/org-download/org-download.el" "/home/utilisateur/sharedDirectoryPrivate/notes/org/images/Testn/2022-03-08_22-29-42_like_a_boss___by_dragibuz_df17fx0-pre.jpg" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/contacts.org" "/home/utilisateur/Téléchargements/EBOOK The Shift Project- Le plan de transformation de leconomie francaise.epub" "/home/utilisateur/.emacs.dAutreOrdi/#config.org#" "/home/utilisateur/sharedDirectoryPrivate/notes/org/.dir-locals.el" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/films_vus.org" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/main/comment_je_vais_faire_mon_braindump.org" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/livres_lus.org" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/jeux_video_joues.org" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/citations.org" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/reference/EffetIkea2021.org" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/reference/BiaisAutocomplaisance2021.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/artistes.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/contactAncienAsupprimer.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/evenement.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/evenementplusieursjours.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/image.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/next.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/tickler.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/todo.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/àFairePetitÀPetit/livre_roam.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/àFairePetitÀPetit/film_roam.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/artistes.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/journal_de_dissatisfaction.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/recettes.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/unenotesorg.org" "/home/utilisateur/sharedDirectoryPrivate/org-linkz/Readme.org" "/home/utilisateur/sharedDirectoryPrivate/org-linkz/Monreadme.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/xenophon.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/wolfgang_amadeus_mozart.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/wittgenstein.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/winston_churchill.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/willem_de_kooning.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/warren_buffett.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/walter_lippmann.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/vol_us_airways_1549.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/vincent_lindon.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/victor_hugo.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/victor_emmanuel_iii.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/victor_emmanuel_ii.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/verdi.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/umberto_eco.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/troisième_revolution.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/trois_glorieuses.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/transcendantalisme.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/tom_hanks.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/todd_komarnicki.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/the_doors.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/test_de_chose_bibtex.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/test.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/systeme_nerveux.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/systeme_immunitaire.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/surrealisme.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/strategies_militaires.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/stakhanovisme.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/spinoza.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/sparte.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/socrate.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/societe_des_gens_de_lettres.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/simone_de_beauvoir.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/sigmund_freud.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/seconde_restauration.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/seconde_guerre_mondiale.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/second_empire.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/sciences_cognitives.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/scarlatti.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/sartres.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/sarah_bernhardt.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/salvador_dali.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/saint_domingue_colonie_francaise.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/rome.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/romantisme.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/romanov.org"))
