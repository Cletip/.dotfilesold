;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(tex-compile-history command-history face-name-history info-lookup-history consult--theme-history Info-search-history consult--crm-history magit-revision-history regexp-history read-expression-history eww-prompt-history pdf-annot-color-history citar-history org-tags-history compile-history ctrlf-search-history Man-topic-history consult--grep-history org-refile-history org-read-date-history org-capture--prompt-history bookmark-history org-roam-node-history query-replace-history org-link--history buffer-name-history minibuffer-history extended-command-history file-name-history consult--line-history empty-history))
(setq command-history '((smartparens-mode 'toggle) (execute-extended-command nil "smartparens-mode" "smart") (switch-to-buffer "*Messages*" nil 'force-same-window) (my-tangle-config-org) (execute-extended-command nil "my-tangle-config-org" "my") (my-tangle-config-org) (execute-extended-command nil "my-tangle-config-org" "my ta") (consult-bookmark "configFichiers") (find-file "~/.dotfiles/.gitconfig" t) (switch-to-buffer "*Messages*" nil 'force-same-window) (execute-extended-command nil "straight-use-package" "stra use pa") (flyspell-mode 'toggle) (execute-extended-command nil "flyspell-mode" "flys") (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" "flyc") (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con r") (revert-buffer t) (execute-extended-command nil "revert-buffer" nil) (revert-buffer t) (execute-extended-command nil "revert-buffer" "rev") (man "ssh-keygen(1)") (execute-extended-command nil "man" "man ssh") (consult-bookmark "configFichiers") (org-version nil t t) (execute-extended-command nil "org-version" "org ver") (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (avy-goto-char-2 114 101 nil nil nil) (avy-goto-char-2 114 101 nil nil nil) (avy-goto-char-2 109 97 nil nil nil) (avy-goto-char-2 97 114 nil nil nil) (avy-goto-char-2 41 59 nil nil nil) (avy-goto-char-2 112 114 nil nil nil) (execute-extended-command nil "lsp-workspace-restart" "wor re") (revert-buffer t) (execute-extended-command nil "revert-buffer" "r") (revert-buffer t) (execute-extended-command nil "revert-buffer" "rev") (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con gr") (revert-buffer t) (execute-extended-command nil "revert-buffer" "reve") (line-number-mode 'toggle) (execute-extended-command nil "line-number-mode" nil) (line-number-mode 'toggle) (execute-extended-command nil "line-number-mode" "number lin") (execute-extended-command nil "lsp-workspace-restart" "lsp rest") (describe-variable 'lsp-completion-provider) (company-yasnippet 'interactive) (execute-extended-command nil "company-yasnippet" "compa yas") (company-box-mode 'toggle) (execute-extended-command nil "company-box-mode" nil) (company-box-mode 'toggle) (execute-extended-command nil "company-box-mode" "com b") (company-yasnippet 'interactive) (execute-extended-command nil "company-yasnippet" nil) (company-yasnippet 'interactive) (execute-extended-command nil "company-yasnippet" "com ya") (activeryasnippets) (execute-extended-command nil "activeryasnippets" nil) (activeryasnippets) (execute-extended-command nil "activeryasnippets" nil) (activeryasnippets) (execute-extended-command nil "activeryasnippets" "activ yas") (company-box-mode 'toggle) (execute-extended-command nil "company-box-mode" "com") (company-box-mode 'toggle) (execute-extended-command nil "company-box-mode" "comp box") (yas-global-mode 'toggle) (execute-extended-command nil "yas-global-mode" "global yas") (c-mode) (execute-extended-command nil "c-mode" "c-mod") (lsp-mode 'toggle) (execute-extended-command nil "lsp-mode" "lsp") (snippet-mode) (execute-extended-command nil "snippet-mode" "sni mod") (lsp-mode 'toggle) (execute-extended-command nil "lsp-mode" nil) (lsp-mode 'toggle) (execute-extended-command nil "lsp-mode" nil) (lsp-mode 'toggle) (execute-extended-command nil "lsp-mode" nil) (lsp-mode 'toggle) (execute-extended-command nil "lsp-mode" "ls mod") (revert-buffer t) (execute-extended-command nil "revert-buffer" "rev") (switch-to-buffer "test.c<Testdedossier>" nil 'force-same-window) (find-file "~/Testdedossier/test.c" t) (switch-to-buffer "Testdedossier" nil 'force-same-window) (find-file "~/Testdedossier" t) (company-mode 'toggle) (execute-extended-command nil "company-mode" nil) (company-mode 'toggle) (execute-extended-command nil "company-mode" "com mod") (revert-buffer t) (execute-extended-command nil "revert-buffer" "reve") (find-file "~/sharedDirectoryPrivate/sauvegardePcEtTel/TEST.ORG" t) (consult-bookmark "S4") (lsp-completion-mode 'toggle) (execute-extended-command nil "lsp-completion-mode" "lsp compa") (company-clang 'interactive) (execute-extended-command nil "company-clang" "compa clan") (execute-extended-command nil "straight-dependents" "strai dep") (company-yasnippet 'interactive) (execute-extended-command nil "company-yasnippet" nil) (company-yasnippet 'interactive) (execute-extended-command nil "company-yasnippet" "yas com") (find-file "~/testdossier/test.c" t) (revert-buffer t) (execute-extended-command nil "revert-buffer" "rev") (consult-bookmark "configFichiers") (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con ") (find-name-dired "~/sharedDirectoryPrivate/" "*hit*.org") (execute-extended-command nil "find-name-dired" nil) (find-name-dired "~/sharedDirectoryPrivate/" "hit") (execute-extended-command nil "find-name-dired" nil) (find-name-dired "~/sharedDirectoryPrivate/notes/" ".org") (execute-extended-command nil "find-name-dired" nil) (find-name-dired "~/sharedDirectoryPrivate/notes/" "templates") (execute-extended-command nil "find-name-dired" nil) (find-name-dired "~/sharedDirectoryPrivate/notes/" "*.org") (execute-extended-command nil "find-name-dired" nil) (find-name-dired "~/sharedDirectoryPrivate/notes/org/" "*.org") (execute-extended-command nil "find-name-dired" "find nam") (org-refile-goto-last-stored) (execute-extended-command nil "org-refile-goto-last-stored" "go to las ref") (switch-to-buffer "References.org" nil 'force-same-window) (switch-to-buffer "AgendaTickler.org" nil 'force-same-window) (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" nil) (revert-buffer t) (execute-extended-command nil "revert-buffer" nil) (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" "lsp") (switch-to-buffer "*Messages*" nil 'force-same-window) (revert-buffer t) (execute-extended-command nil "revert-buffer" "reve") (find-file "~/testdossier/test.py" t) (switch-to-buffer "testdossier" nil 'force-same-window) (find-file "~/testdossier/test/test.c" t) (mkdir "~/testdossier/test" t) (execute-extended-command nil "mkdir" "mkd") (revert-buffer t) (execute-extended-command nil "revert-buffer" "reve") (lsp-install-server nil) (execute-extended-command nil "lsp-install-server" "lsp inst") (lsp-java-update-server) (execute-extended-command nil "lsp-java-update-server" "lsp java do") (revert-buffer t) (execute-extended-command nil "revert-buffer" "rev ") (straight-remove-unused-repos nil) (execute-extended-command nil "straight-remove-unused-repos" "stra un") (consult-bookmark "configFichiers") (switch-to-buffer "AgendaTickler.org" nil 'force-same-window) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con ") (consult-bookmark "S4") (switch-to-buffer "Inbox.org" nil 'force-same-window) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con") (switch-to-buffer "org-mode.org" nil 'force-same-window) (switch-to-buffer "AgendaTickler.org" nil 'force-same-window) (switch-to-buffer "AgendaTickler.org" nil 'force-same-window) (switch-to-buffer "Bookmarks.org" nil 'force-same-window) (switch-to-buffer "theme.css" nil 'force-same-window) (switch-to-buffer "Bookmarks.org" nil 'force-same-window) (switch-to-buffer "Bookmarks.org" nil 'force-same-window) (revert-buffer t) (execute-extended-command nil "revert-buffer" "rev ") (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con rep") (consult-bookmark "configFichiers") (consult-bookmark "orgzly") (sql-mode) (execute-extended-command nil "sql-mode" nil) (text-mode) (execute-extended-command nil "text-mode" "text") (tex-mode)))
(setq consult--theme-history '("doom-moonlight" "tsdh-dark"))
(setq regexp-history '("org-id-add-location"))
(setq eww-prompt-history '("https://ent.uca.fr/moodle/course/view.php?id=8036"))
(setq citar-history '("                                   2021-08-19T06:04:34Z     Effet Ikea                                                 EffetIkea2021      inreference       has:files  has:link  EffetIkea2021" "                                   2021-10-10T21:48:55Z     Biais d'autocomplaisance                                   BiaisAutocomplaisance2021    inreference       has:files  has:link  BiaisAutocomplaisance2021" "Voit                               2022-02-05T08:50:20Z     My GNU Emacs Configuration                                 voitMyGNUEmacs2022    software        configuration,emacs,personal                                    has:link  voitMyGNUEmacs2022" "                                   2020-12-10     Comment Ne plus RIEN OUBLIER Grâce à Un SECOND CERVEAU ?           eliottmeunierCommentNeRIEN2020    movie                                                                           has:link  eliottmeunierCommentNeRIEN2020" "                                            Accro au smartphone : les effets étonnants de la nomophobie sur notre santé           AccroAuSmartphone    online            has:files  has:link  AccroAuSmartphone" "Voit                               2022-02-05T08:50:20Z     My GNU Emacs Configuration                                 voitMyGNUEmacs2022    software        configuration,emacs,personal                                    has:link  voitMyGNUEmacs2022" "                                            Automatic Export :: Better BibTeX for Zotero               AutomaticExportBetter    online            has:files  has:link  AutomaticExportBetter" "                                            How I Take Notes with Org-roam                             HowTakeNotes       online            has:files  has:link  HowTakeNotes" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc               has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "Voit                               2022     My GNU Emacs Configuration                                 voit_my_2022       misc            configuration, emacs, personal                                  has:link  voit_my_2022" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc               has:link  noauthor_zotero_2021" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc               has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc               has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc               has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                                has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                                has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc               has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                                has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                                has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc               has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc               has:link  noauthor_zotero_2021" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc               has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "noauthor_how_nodate"))
(setq org-tags-history '("@pc"))
(setq compile-history '("javac src/*.java && java src/Current" "javac src/*.java && java Current" "javac src/*.java && java current" "javac src/*.java && java current.java" "javac src/*.java && java current" "javac src/*.java" "javac src/*.java && java src/current" "javac src/*.java && java src/current.java " "javac src/*.java && java current.java " "javac src/*.java && java src/current.java " "javac src/*.java && javac src/current.java " "javac src/*.java "))
(setq Man-topic-history '("ssh-keygen(1)" "hostname(1)"))
(setq consult--grep-history '("#hunspell" "#hunspe" "#with eval" "#with eval af" "#je suis en train de bien penser à mon avenir" "#.outline-2" "#emacs everywhere" "#ripgr" "#set-face-attribute" "#variable-pitch-mode" "#Journal de satisfaction" "#tsdh-dark" "#home/msi" "#after init hook" "#8aac069c-ecda-4a5f-82df-add2a7ddfdcb" "#dbb" "#all the ic use" "#size" "#3b3b0f5c-208f-44f1-b132-548cdd6d3633" "#dbb" "#7dfe50ff-a61d-420c-a480-428f215e891d" "#7dfe" "#bd2e" "oc-csl" "#org-cite-csl-styles-dir" "#@work" "#dans le head" "#toc" "#org-cite requi" "#use org ref packa" "#he default CSL locale file " "#look and " "#This paper presented a new family of models ca" "#3e969" "#org-goto defun" "#org-gtd--decorate-item" "#next" "#Je vais vite m'habituer à tout" "#WAIT"))
(setq org-refile-history '("References.org/ArchivesPropres + décision (ce que je veux garder comme \"souvenir\")/" "Bookmarks.org/Vie professionnelle/Cours s4 (moodle, caséine etc)/" "Bookmarks.org/Perso/Sites que j'aime bien/" "Bookmarks.org/Perso/Liseuse/" "Bookmarks.org/Perso/Informatique/Emacs/Systemcrafter notes/" "Bookmarks.org/Perso/Informatique/Pratique/" "Bookmarks.org/Vie professionnelle/Cours s4 (moodle, caséine etc)/" "Bookmarks.org/Administratif (mail, drive)/" "Bookmarks.org/Perso/Informatique/Emacs/Les .emacs.d/" "Bookmarks.org/Perso/Informatique/Emacs/Braindump/" "Bookmarks.org/\"Perso\"/Informatique/Pratique/" "Bookmarks.org/\"Perso\"/Informatique/Sécurité/" "Bookmarks.org/\"Perso\"/Informatique/Emacs/Les .emacs.d/" "References.org/ArchivesPropres + décision (ce que je veux garder comme \"souvenir\")/" "AgendaTickler.org/" "Clavier/" "Emacs en français (oui c'est moyen comme titre)/ (README.org)"))
(setq org-read-date-history '("18h30    " "sat 9h    " "+2 18h-20h    " "+2 14h-20h    " "+2 18h-20h    " "+1    " "   " "19:00 7    " "   " "14    " "+2 13h30    " "+2m    " "+1 9h30-11h    " "+1    " "+2    " "+1    "))
(setq bookmark-history '("configFichiers" "configFichiers" "configFichiers" "S4" "S4" "configFichiers" "configFichiers" "org-refile-last-stored" "configFichiers" "configFichiers" "S4" "S4" "configFichiers" "configFichiers" "orgzly" "orgzly" "S4" "S4" "configFichiers" "configFichiers" "configFichiers" "ancienneconfigorg" "ancienneconfigorg" "ancienneconfigorg" "Burly: tempo" "orgzly" "orgzly" "Burly: tempo" "Burly: tempo" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "org-refile-last-stored" "org-capture-last-stored" "emacs.dyoutube" "braindump de base" "Inbox" "GTD" "Configuration de fenêtre efficace" "Burly: tempo" "Burly: pour export tempo" "orgzly" "orgzly" "Burly: tempo" "Burly: tempo" "Burly: pour export tempo" "Burly: pour export tempo" "org-refile-last-stored" "orgzly" "orgzly" "orgzly" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "emacs.dyoutube" "emacs.dyoutube" "Burly: tempo export bis" "Burly: tempo" "Burly: pythontempo" "orgzly" "orgzly" "braindump de base" "braindump de base" "orgzly" "orgzly" "braindump de base" "braindump de base" "Burly: tempo" "Burly: tempo" "braindump de base" "braindump de base" "orgzly" "orgzly" "orgzly" "orgzly" "emacs.dyoutube" "emacs.dyoutube" "orgzly" "orgzly" "orgzly" "orgzly" "braindump de base" "braindump de base" "orgzly" "orgzly" "orgzly" "orgzly" "emacs.dyoutube" "emacs.dyoutube" "orgzly" "orgzly" "orgzly" "Burly: tempo export bis" "Burly: tempo export bis" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" "braindump de base" "braindump de base" "orgzly" "orgzly" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" "braindump de base" "braindump" "braindump" "orgzly" "orgzly" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" "ancienneconfigorg" "ancienneconfigorg" "ancienneconfigorg" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "ancienneconfigorg" "ancienneconfigorg" "orgzly" "orgzly" "orgzly" "ancienneconfigorg" "ancienneconfigorg" "orgzly" "orgzly" "ancienneconfigorg" "ancienneconfigorg" "ancienneconfigorg" "orgzly" "orgzly" "orgzly" "orgzly" "ancienneconfigorg" "ancienneconfigorg" "orgzly" "orgzly" "ancienneconfigorg" "ancienneconfigorg" "orgzly" "orgzly" "orgzly" "orgzly"))
(setq org-roam-node-history '("main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Effet Ikea                                                                                                                         #draft                                   0 " "reference       Biais d'autocomplaisance                                                                                                           #draft                                   0 " "test" "reference       Biais d'autocomplaisance                                                                                                           #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Comment Ne plus RIEN OUBLIER Grâce à Un SECOND CERVEAU ?                                                                           #draft                                   1 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Comment Ne plus RIEN OUBLIER Grâce à Un SECOND CERVEAU ?                                                                           #draft                                   0 " "reference       test                                                                                                                               #draft                                   0 " "                Psychologie -> Sentiments                                                                                                                                                   1 " "                Adolf Hitler                                                                                                                                                                3 " "                Sigmund Freud                                                                                                                                                               3 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "naetsui" "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "natuei" "test" "yol" "yolo" "reference       yolo                                                                                                                               #draft                                   0 " "yolo" "test            Testréférenceorg-ref                                                                                                               #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Testderéférences                                                                                                                   #draft                                   0 " "reference       Testréférenceorg-ref                                                                                                               #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Testderéférences                                                                                                                   #draft                                   0 " "narsteuinrtaeui" "nauetinrateui" "naeutsi" "nrateuisntrea" "nrateuint" "natseiun" "nateuinrs" "narutenateuin" "naretina" "nrauteiniraeut" "anretinraeutsnrit" "ntaueinstnrseua" "ansutei" "ntaueinsrtnruaeitnruaei" "nautienrsaueti" "nauteisnateiu" "nateuint" "nratuie" "reference       Testderéférences                                                                                                                   #draft                                   0 " "nrateiu" "reference       Testderéférences                                                                                                                   #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Testderéférences                                                                                                                   #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "narteinr" "nratieu" "naeuti" "Inbox" "nartieu" "tnaieu" "Testtnuai" "Comment je vais faire mon braindump" "articles        Building a Zettelkasten with Org-roam                                                                                              #article #draft                          0 " "articles        Building a Zettelkasten with Org-roam -> Basic Setup                                                                               #article #draft                          0 " "A Complete Workflow in Emacs                                                                                                                                                0 " "Testderéférences                                                                                                                   #draft                                   0 " "Eliott Meunier :: Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?                                                         #draft                                   1 "))
(setq query-replace-history '("switch" "commutateur" "switchs" "commutateurs" "switch" "commutateur" "switch" "commutateurs" "my-user-emacs-config-directory" #("my-user-emacs-directory" 0 22 (font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 22 23 (font-lock-fontified t src-block t rear-nonsticky t font-lock-multiline t face (org-block))) "my-tangle-a-file-of-config-org" #("my-tangle-config-org" 0 12 (font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 12 19 (font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 19 20 (font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block) rear-nonsticky t)) "sharedDirectoryPrivate" "dossier_partage" "~/mesdocuments/" #("~/documents/mesdocuments/" 0 24 (src-block t face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t) 24 25 (rear-nonsticky t src-block t face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t)) "mesdocuments-directory" #("documents-mesdocuments-directory" 0 31 (font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 31 32 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) rear-nonsticky t)) "mesdocuments-directory" #("documents-mesdocuments-directory" 0 31 (font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 31 32 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) rear-nonsticky t)) "~/sharedDirectoryPrivate/" #("~/dossier_partage/Clement/" 0 25 (font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 25 26 (font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block) rear-nonsticky t)) "<2022-03-06 Sun 19:00>" #("<2022-02-27 Sun 19:00>" 0 21 (face org-date) 21 22 (face org-date rear-nonsticky t)) "2022-02-27 Sun 19:00" #("2022-02-13 Sun 19:00" 0 19 (face org-date org-category "AgendaTickler") 19 20 (rear-nonsticky t face org-date org-category "AgendaTickler")) "documents" "Documents" "~" "/home/msi" "~/" "/home/msi" "shared-directory-all-org-files" #("org-shared-directory-files" 0 25 (font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 25 26 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) rear-nonsticky t)) "documents-directory-all-org-files" "org-documents-directory-files" "shared-directory-all-org-files" "org-shared-directory-files" "documents-directory-all-org-files" #("org-documents-directory-files" 0 28 (font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 28 29 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) rear-nonsticky t))))
(setq org-link--history '("id:"))
(setq buffer-name-history '("*Messages*" "test.c<Testdedossier>" "Testdedossier" "References.org" "AgendaTickler.org" "*Messages*" "testdossier" "AgendaTickler.org" "Inbox.org" "org-mode.org" "AgendaTickler.org" "Bookmarks.org" "theme.css" "Bookmarks.org" "*dashboard*" "basicOptimisations.org" "basicOptimisationsAvecDep.org" "*Messages*" "Inbox.org" "*dashboard*" "*Org Export Process*" "*Org Export Process*<2>" "*Messages*" "*Org Export Process*<2>" "*Messages*" "org.org" "*Org Export Process*<2>" "org.org" "basicOptimisations.org" "Inbox.org" "Contacts.org" "org.org" "Contact.org" "Contacts.org" "org.org" "Contacts.org" "org.sh" "org.org" "Bookmarks.org<notes>" "Bookmarks.org<utilisateur>" "Lessauvegarde.org" "*Messages*" "*shell*" "autostart" "*Org Agenda*" "*Messages*" "test.el" "*Messages*" "sharedDirectoryPrivate" "*Messages*" "Inbox.org" "Orgzly" "Lessauvegarde.org" "dossier_partage" "*Messages*" "Lessauvegarde.org" "Inbox.org" "*Messages*" "AutomaticExportBetter.org" "*scratch*" "*Messages*" "Zotero" "*Backtrace*" "*Messages*" "*dashboard*" "Testderéférencessimple.org" "*dashboard*" "*Messages*" "Inbox.org" "References.org" "*Messages*" "configAvecCitarPasPropre.org" "reference" "Readme.org" "*Messages*" "GTD.org" "Testderéférences.org" "*Messages*" "Testderéférences.org" "*Messages*" "Testderéférences.org" "GTD.org" "Exos-Vracfinal.py" "test.py<3>" "TP.pdf" "*Messages*" "Testderéférences.org" "*Messages*" "Testderéférences.org" "*Messages*" "*dashboard*" "*Messages*" "*Org Export Process*" "*Messages*" "GTD.org" "*Messages*" "config.org<.emacs.dcavantrevert>" "comment_je_vais_faire_mon_braindump.org" "Inbox.org" "*Org Agenda*" "Inbox.org" "*Org QL View: (todo RAPPEL NEXT)*" "Inbox.org" "*Org Agenda*" "GTD.org" "*Org Agenda*" "GTD.org" "*dashboard*" "GTD.org" "*Org Agenda*" "test.org" "*Org Agenda*" "GTD.org" "test.org" "Anglais" "test.org" "*Messages*" "*Org Export Process*<2>" "*Org Export Process*<9>" "*Org Export Process*<4>" "*Org Export Process*" "Inbox.org" "*Messages*" "*ielm*" "Inbox.org" "*Messages*"))
(setq minibuffer-history '("lsp-completion-provider" "*hit*.org" "hit" ".org" "templates" "*.org" "jdtls (Already installed)" "doom-moonlight" "doom-one" "doom-moonlight" "google" "ripgrep" "Pour l'installation de zotero + extension betterbitex" "bookmark-file" "configFichiers" "Burly: tempo" "-DAMA-Ubuntu-bold-normal-normal-*-*-*-*-*-*-0-iso10646-1" "org-agenda-files" "org-agenda" "org" "org-agenda" "org-agenda-goto" "file" "buffer" "/home/utilisateur/sharedDirectoryPrivate/sauvegardePcEtTel/zsh" "super tutoriel ici" "midnight-mode" "S4" "mesdocuments" "Syncro calendrier" "ici" "Les dépendance .emacs.d (ou carrément les dotfiles, juste emacs.d pour l'instant)" "shell-command-history" "doom-moonlight" "doom-1337" "doom-moonlight" "tango-dark" "org-agenda" "dashboard" "neotree" "doom-moonlight" "doom-dark+" "wombat" "tango" "tango-dark" "doom-dark+" "customize-themes" "doom-moonlight" "ici" "poke-line"))
(setq extended-command-history '("smartparens-mode" "my-tangle-config-org" "straight-use-package" "flyspell-mode" "flycheck-mode" "consult-ripgrep" "revert-buffer" "man" "org-version" "consult-ripgrep" "lsp-workspace-restart" "revert-buffer" "consult-ripgrep" "revert-buffer" "line-number-mode" "lsp-workspace-restart" "company-yasnippet" "company-box-mode" "company-yasnippet" "activeryasnippets" "company-box-mode" "yas-global-mode" "c-mode" "lsp-mode" "snippet-mode" "lsp-mode" "revert-buffer" "company-mode" "revert-buffer" "lsp-completion-mode" "company-clang" "straight-dependents" "company-yasnippet" "revert-buffer" "consult-ripgrep" "find-name-dired" "org-refile-goto-last-stored" "lsp-install-server" "revert-buffer" "lsp-install-server" "revert-buffer" "mkdir" "revert-buffer" "lsp-install-server" "lsp-java-update-server" "revert-buffer" "straight-remove-unused-repos" "consult-ripgrep" "revert-buffer" "consult-ripgrep" "sql-mode" "text-mode" "tex-mode" "sql-mode" "fundamental-mode" "org-mode" "sql-mode" "consult-grep" "consult-ripgrep" "load-theme" "server-start" "consult-ripgrep" "ripgrep-regexp" "consult-ripgrep" "straight-visit-package-website" "consult-ripgrep" "bookmark-bmenu-show-all-annotations" "edit-bookmarks" "consult-ripgrep" "org-agenda" "mkdir" "set-frame-font" "buffer-face-set" "consult-ripgrep" "Policepourcoder" "Policedebase" "consult-ripgrep" "variable-pitch-mode" "set-frame-font" "set-face-font" "variable-pitch-mode" "org-indent-mode" "variable-pitch-mode" "org-indent-mode" "org-icalendar-combine-agenda-files-foreground" "org-version" "org-icalendar-combine-agenda-files-foreground" "org-time-stamp" "time-stamp" "org-icalendar-combine-agenda-files-foreground" "org-icalendar-combine-agenda-files-background" "org-icalendar-combine-agenda-files-foreground" "org-icalendar-combine-agenda-files-background" "org-reload" "org-icalendar-combine-agenda-files-background" "consult-ripgrep" "org-icalendar-combine-agenda-files-background" "org-icalendar-combine-agenda-files-foreground" "org-icalendar-combine-agenda-files-background" "org-icalendar-combine-agenda-files-foreground" "org-icalendar-combine-agenda-files-background" "org-icalendar-combine-agenda-files-foreground" "consult-ripgrep" "org-version" "org-reload" "org-version" "straight-use-package" "org-vcard-export" "straight-remove-unused-repos" "term-dynamic-complete" "term" "shell" "mkdir" "shell" "midnight-mode" "package-install" "straight-use-package" "eww-readable" "mkdir" "org-id-update-id-locations" "query-replace" "org-toggle-narrow-to-subtree" "comint-previous-input" "shell" "consult-ripgrep" "consult-grep" "shell" "consult-grep" "load-theme" "shell" "man" "load-theme" "shell" "org-sparse-tree" "next-error" "org-sparse-tree" "org-agenda" "org-todo" "org-agenda" "revert-buffer" "consult-grep" "cd" "next-error" "org-sparse-tree" "org-archive-done-tasks-in-file" "consult-grep" "org-sparse-tree" "next-error" "org-sparse-tree" "straight-visit-package-website" "load-theme" "straight-remove-unused-repos" "load-theme" "eval-region" "load-theme" "consult-theme" "load-theme" "customize-themes" "load-theme" "straight-remove-unused-repos" "consult-grep" "load-theme" "org-icalendar-combine-agenda-files-foreground" "consult-grep" "org-icalendar-combine-agenda-files-foreground" "consult-grep" "org-icalendar-combine-agenda-files-foreground" "consult-grep" "org-icalendar-combine-agenda-files-foreground" "consult-grep" "org-icalendar-combine-agenda-files-foreground" "save-buffer" "customize-themes" "poke-line-mode" "nyan-mode" "poke-line-set-random-pokemon" "straight-visit-package-website" "straight-use-package" "customize-themes" "load-theme" "consult-grep" "consult-ripgrep" "processing-sketch-run" "consult-ripgrep" "consult-grep" "org-store-link" "outline-next-heading" "org-next-visible-heading" "outline-next-heading" "org-next-visible-heading" "outline-next-heading" "org-next-visible-heading" "outline-next-heading" "org-next-visible-heading" "tool-bar-mode" "revert-buffer" "tool-bar-mode" "revert-buffer" "tool-bar-mode" "query-replace"))
(setq file-name-history '("~/.dotfiles/.emacs.d/init.el" "~/.dotfiles/.gitconfig" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/.dotfiles/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/.emacs.dAvantGit(àsuppr)" "~/.emacs.dAvantGit" "~/Testdedossier/test.c" "~/.emacs.d/config/programmation.org" "~/.emacs.d/config/programmationmarche.org" "~/.emacs.d/config/programmation.org" "~/Testdedossier/test.c" "~/.emacs.d/config/programmation.org" "~/.emacs.d/config/programmationancien.org" "~/.emacs.d/config/programmation.org" "~/Testdedossier/test.c" "~/.emacs.d/config/programmation.org" "~/Testdedossier/test.c" "~/Testdedossier" "~/sharedDirectoryPrivate/sauvegardePcEtTel/TEST.ORG" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/mesdocuments/professionnel/cours/S4/BaseDeDonnees/sujet2/Exercices.org" "~/testdossier/test.c" "~/sharedDirectoryPrivate/" "~/sharedDirectoryPrivate/notes/" "~/sharedDirectoryPrivate/notes/org/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/testdossier/test.py" "~/testdossier/test/test.c" "~/testdossier/test" "~/sharedDirectoryPrivate/notes/org/" "~/sharedDirectoryPrivate/notes/org/orgzly/Bookmarks.org" "/tmp/emacs-everywhere-20220306-175336-Firefox" "/tmp/emacs-everywhere-20220306-175314-Firefox" "/tmp/emacs-everywhere-20220306-174629-Firefox" "/tmp/emacs-everywhere-20220306-174612-Firefox" "/tmp/emacs-everywhere-20220306-174547-Firefox" "/tmp/emacs-everywhere-20220306-174540-Firefox" "/tmp/emacs-everywhere-20220306-173523-Firefox" "/tmp/emacs-everywhere-20220306-151753-Firefox" "/tmp/emacs-everywhere-20220306-151732-Firefox" "~/sharedDirectoryPrivate/notes/org/" "/tmp/emacs-everywhere-20220306-134321-Firefox" "/tmp/emacs-everywhere-20220306-134258-Firefox" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/set_customShortcutUbuntu.py" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/set_customshortcut.py" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/scriptPourRajouterRaccourcisUbuntu.py" "/tmp/emacs-everywhere-20220306-133438-Firefox" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/script.py" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "/tmp/emacs-everywhere-20220306-125506-Firefox" "/tmp/emacs-everywhere-20220306-125454-Firefox" "/tmp/emacs-everywhere-20220306-125441-Firefox" "/tmp/emacs-everywhere-20220306-125434-Firefox" "/tmp/emacs-everywhere-20220306-125411-Firefox" "/tmp/emacs-everywhere-20220306-125359-Firefox" "/tmp/emacs-everywhere-20220306-125353-Firefox" "/tmp/emacs-everywhere-20220306-125331-Firefox" "/tmp/emacs-everywhere-20220306-125324-Firefox" "/tmp/emacs-everywhere-20220306-125252-Firefox" "/tmp/emacs-everywhere-20220306-125245-Firefox" "/tmp/emacs-everywhere-20220306-125239-Firefox" "/tmp/emacs-everywhere-20220306-125232-Firefox" "/tmp/emacs-everywhere-20220306-125228-Firefox" "/tmp/emacs-everywhere-20220306-125110-Firefox" "/tmp/emacs-everywhere-20220306-125015-Firefox" "~/.emacs.d/config/basicOptimisations.org" "/tmp/emacs-everywhere-20220306-124608-Firefox" "/tmp/emacs-everywhere-20220306-123942-Firefox" "/tmp/emacs-everywhere-20220306-123923-Firefox" "/tmp/emacs-everywhere-20220306-123742-Firefox" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.d/config/integration.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.d/config/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.dAutreOrdi" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.dotfiles/" "~/" "~/sharedDirectoryPrivate/notes/org/orgzly/.fonts" "~/" "~/sharedDirectoryPrivate/notes/org/orgzly/.fontconfig" "~/.font" "~/.emacs.d/config/programmation.sh" "~/.emacs.d/config/basicOptimisationsAvecDep.sh" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.d/config/basicOptimisationsAvecDep.org" "~/Téléchargements/" "~/.emacs.dAutreOrdi" "~/sharedDirectoryPrivate/agendapourgoogle.ics" "~/sharedDirectoryPrivate/notes/org/orgzly/AgendaTickler.org" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/evenement.org" "~/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/org/orgzly/AgendaTickler.org_archive" "~/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/org/orgzly/" "~/testdossier/" "~/sharedDirectoryPrivate/notes/org/orgzly/" "~/testdossier/" "~/.emacs.d/config/basicOptimisations.org" "~/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/nratuei" "~/.emacs.d/config/basicOptimisations.org" "~/.emacs.d/config/org-mode.sh" "~/.emacs.d/config/org-mode.org" "~/.emacs.d/config/org.org" "~/.emacs.d/straight/build/test" "~/sharedDirectoryPrivate/notes/org/orgzly/Contact.vcf" "~/.emacs.d/config/org.org" "~/.local/share/applications/org-protocol.desktop" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/sharedDirectoryPrivate/org-linkz/test" "~/mesdocuments/professionnel/cours/S4/BaseDeDonnees/sujet2/Exercices.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/zsh" "~/testdossier/salut.org" "~/testdossier" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/mesdocuments/professionnel/cours/S4/BaseDeDonnees/sujet2/Exercices.org" "~/mesdocuments/professionnel/cours/S4/BaseDeDonnees/sujet2/td2-sujet.pdf" "~/sharedDirectoryPrivate/orgzlyBisTest/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/sharedDirectoryPrivate/notes/org/orgzly/Inbox.org" "~/.emacs.d/config/org.org" "~/.emacs.d/config.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.d/config/org.sh" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/tel/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi" "~/sharedDirectoryPrivate/sauvegardePcEtTel/tel" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Ordinateur" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/sharedDirectoryPrivate/" "~/mesdocuments/personnel/informatique/sauvegardePcEtTel/Lessauvegarde.org" "~/.dotfiles/Readme.org" "~/.dotfiles/.emacs.d/" "~/.dotfiles/" "~/mesdocuments/personnel/informatique/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.d/early-init.el" "~/.emacs.d/early-init.eltest" "~/.dotfiles/.emacs.d/" "~/sharedDirectoryPrivate/" "~/.emacs.d/config/basicOptimisations.org" "~/.dotfiles/.emacs.d/config/test" "~/.dotfiles/.emacs.d" "~/.dotfiles/test" "~/.dotfiles/" "~/.dotfiles/.emacs.d/config/basicOptimisations.org" "~/.dotfiles/" "~/Documents/sauvegardePcEtTel/Lessauvegarde.org" "~/.dotfiles/.stow-local-ignore" "~/.dotfiles/" "~/.dotfiles/test/test" "~/Documents/" "~/Documents/sauvegardePcEtTel/" "~/mesdocuments/personnel/informatique/sauvegardePcEtTel/orgzly/recherchesOrgzlyÀImporter" "~/mesdocuments/personnel/informatique/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.dconfigeclatee" "~/.emacs.d/config/.emacs.dconfigeclatee" "~/.emacs.d/config/try.org" "~/.emacs.d/config/raccourcis.org" "~/.emacs.d/config/test.org" "~/sharedDirectoryPrivate/notes/org/unenotesorg.org" "~/.emacs.d/config/integration.org" "~/.emacs.d/config/test/autienst/rsatueinst" "~/.emacs.d/config/basicOptimisations.org" "~/.emacs.d/config/org.org" "~/.emacs.d/config/programmation.org" "~/.emacs.d/config/aconfig.org" "~/.emacs.d/config/" "~/.emacs.d/config" "~/.emacs.dcavantconfigeclatee" "~/documents_anciens" "~/sharedDirectoryPrivate/notes/" "~/.emacs.d/configsanslesdocuments.org" "~/sharedDirectoryPrivate/notes/zettelkasten/" "~/sharedDirectoryPrivate/notes/org/" "~/" "~/sharedDirectoryPrivate/notes/zettelkasten" "~/sharedDirectoryPrivate/notes/braindump" "~/sharedDirectoryPrivate/notes/org/" "~/sharedDirectoryPrivate/notes/org" "~/sharedDirectoryPrivate/notes/" "~/sharedDirectoryPrivate/notes" "~/sharedDirectoryPrivate/" "~/sharedDirectoryPrivate" "/home/msi/.emacs.d/configavantsharedDirectory.org" "~/dossier_partage/Clement/orgzlyBisTest/yolo.org" "~/dossier_partage/Clement/orgzlyBisTest" "~/dossier_partage/Clement/liste-des-paquets" "~/documents/mesdocuments/personnel/informatique/sauvegardePcEtTel/Xmodmap" "~/documents/mesdocuments/personnel/informatique/sauvegardePcEtTel/" "~/documents/mesdocuments/personnel/informatique/sauvegardePcEtTel/fr" "~/documents/mesdocuments/personnel/informatique/sauvegardePcEtTel/" "/usr/share/X11/xkb/symbols/fr"))
(setq consult--line-history '("my tang defu" "tangle-config-org defu" "hook" "con" ".dot" "my-tangle-a-file-of-config-org-hook-func" "con" "my-tangle-a-file-of-config-org-hook-func" ".sh " "bas sh" "save" "cust" "var" "et" "bas" "bas o" "huns" "mes" "fuzz" "h1" "colo" "sha" ".dot" "git" "bas" "git" ".dot" "hist" "beg sh" "begin" "ssh" "-t rsa" "script" "mes" "git" "mes" ".dotf" ".emacs" "hom" "org" ".org" "conf" "test" "use pack compa" "lsp prov" "use pack compa" "lsp co" "test" "use pack com" "setq lsp" "compa " "use pa com" "use pack compa" "use pack com" "lsp prov" "use pack compa" "use pack com" "use pa com" "dis" "disab" "disa" "use compa" "comp use" "yas" "compan us" "lsp ui" "pro" "idle" "lsp com pro" "compa use" "lsp " "activer" "progra" ".ema au" "pro" "progra" "con" "compan yas" "compa yas" "lsp pro no" "test" "yasn" "activer" "activer les " "activer les yas" ".emac" "ci" "jour" "deadli +" "2022-03-06 Sun 19:00" "03-06" "java" "pytho" "scri" "lsp java" "compan " "org agenda with" "sport" "pdf" "in" "télé" "upda" "je sais" "jour" "not" ".emacs" "notes" "sha" "mes" "hom" "med" "dissa" "setq org capt" "concer" "str" "cas" "text" "org contr" "with" "org contr" "export" "conf expo" "export " ".outline-2" "search" "verti" "postamble" "emacs" "bug conn" "setq org captur" "org" "try id" "orgzly setq" "roam" "sha" "roam" "hom" "med" "raccou" "deskto naut" "usr" "nau" "appl" "usr" "us" "pro" "load th" "load doom" "emacs eve" "str" "rip" "xah" "str" "emacs r" "hom" "med" "avan" "bo" ".emacs" "better" "sha" "#+begin_src emacs-lisp" "begin" "basic" "quit" "better" "sh" "Zot" "zot" "me" "télé" ".ema" "télé" "bibtex" ".con" "scri bas" "singa" "refe" "réal" "fira" "pour les check" "checkbox" "fira mon" "gtd" "huns" ".emacs" "hom" "med" "add hoo kil" "evene" "eva " "back defu" "all the ic" "all the icon" "dimin" "basic" "tm" "test" "sha" "ini"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq dired-quick-sort-time-last '"status")
(setq dired-quick-sort-group-directories-last '110)
(setq dired-quick-sort-reverse-last '110)
(setq dired-quick-sort-sort-by-last '"version")
(setq kill-ring '(#("(defun my-tangle-config-org ()
  (interactive)
  \"This function will write all source blocks from =config.org= into =config.el= that are ...
- not marked as =tangle: no=
- doesn't have the TODO state =DISABLED=
- have a source-code of =emacs-lisp=\"
  (require 'org)
  (let* ((body-list ())
         (output-file (concat my-user-emacs-directory \"config.el\"))
         (org-babel-default-header-args (org-babel-merge-params org-babel-default-header-args
                                                                (list (cons :tangle output-file)))))
    (message \"—————• Re-generating %s …\" output-file)
    (save-restriction
      (save-excursion
        (org-babel-map-src-blocks (concat my-user-emacs-directory \"config.org\")
	  (let* (
		 (org_block_info (org-babel-get-src-block-info 'light))
		 ;;(block_name (nth 4 org_block_info))
		 (tfile (cdr (assq :tangle (nth 2 org_block_info))))
		 (match_for_TODO_keyword)
		 )
	    (save-excursion
	      (catch 'exit
		;;(when (string= \"\" block_name)
		;;  (message \"Going to write block name: \" block_name)
		;;  (add-to-list 'body-list (concat \"message(\\\"\" block_name \"\\\")\"));; adding a debug statement for named blocks
		;;  )
		(org-back-to-heading t)
		(when (looking-at org-outline-regexp)
		  (goto-char (1- (match-end 0))))
		(when (looking-at (concat \" +\" org-todo-regexp \"\\\\( +\\\\|[ \\t]*$\\\\)\"))
		  (setq match_for_TODO_keyword (match-string 1)))))
	    (unless (or (string= \"no\" tfile)
			(string= \"DISABLED\" match_for_TODO_keyword)
			(not (string= \"emacs-lisp\" lang)))
	      (add-to-list 'body-list (concat \"\\n\\n;; #####################################################################################\\n\"
					      \"(message \\\"config • \" (org-get-heading) \" …\\\")\\n\\n\")
			   )
	      (add-to-list 'body-list body)
	      ))))
      (with-temp-file output-file
        (insert \";; ============================================================\\n\")
        (insert \";; Don't edit this file, edit config.org' instead ...\\n\")
        (insert \";; Auto-generated at \" (format-time-string current-date-time-format (current-time)) \" on host \" system-name \"\\n\")
        (insert \";; ============================================================\\n\\n\")
        (insert (apply 'concat (reverse body-list))))
      (message \"—————• Wrote %s\" output-file))))" 0 1 (fontified t) 1 6 (fontified t face font-lock-keyword-face) 6 34 (fontified t) 34 45 (fontified t face font-lock-keyword-face) 45 49 (fontified t) 49 248 (fontified t face font-lock-string-face) 248 252 (fontified t) 252 259 (fontified t face font-lock-function-name-face) 259 269 (fontified t) 269 273 (fontified t face font-lock-keyword-face) 273 313 (fontified t) 313 319 (fontified t face font-lock-function-name-face) 319 344 (fontified t) 344 355 (fontified t face font-lock-string-face) 355 500 (fontified t) 500 517 (fontified t) 517 521 (fontified t face font-lock-function-name-face) 521 523 (fontified t) 523 527 (fontified t face font-lock-function-name-face) 527 528 (fontified t) 528 535 (fontified t face font-lock-builtin-face) 535 553 (fontified t) 553 558 (fontified t) 558 565 (fontified t face font-lock-function-name-face) 565 566 (fontified t) 566 593 (fontified t face font-lock-string-face) 593 612 (fontified t) 612 628 (fontified t face font-lock-keyword-face) 628 636 (fontified t) 636 650 (fontified t face font-lock-keyword-face) 650 686 (fontified t) 686 692 (fontified t face font-lock-function-name-face) 692 717 (fontified t) 717 729 (fontified t face font-lock-string-face) 729 735 (fontified t) 735 739 (fontified t face font-lock-keyword-face) 739 803 (fontified t) 803 805 (fontified t face font-lock-comment-delimiter-face) 805 841 (fontified t face font-lock-comment-face) 841 852 (fontified t) 852 855 (fontified t face font-lock-function-name-face) 855 857 (fontified t) 857 861 (fontified t face font-lock-function-name-face) 861 862 (fontified t) 862 869 (fontified t face font-lock-builtin-face) 869 871 (fontified t) 871 874 (fontified t face font-lock-function-name-face) 874 929 (fontified t) 929 935 (fontified t) 935 949 (fontified t face font-lock-keyword-face) 949 958 (fontified t) 958 963 (fontified t face font-lock-keyword-face) 963 972 (fontified t) 972 974 (fontified t face font-lock-comment-delimiter-face) 974 1004 (fontified t face font-lock-comment-face) 1004 1006 (fontified t) 1006 1010 (fontified t face font-lock-comment-delimiter-face) 1010 1061 (fontified t face font-lock-comment-face) 1061 1063 (fontified t) 1063 1067 (fontified t face font-lock-comment-delimiter-face) 1067 1175 (fontified t face font-lock-comment-face) 1175 1177 (fontified t) 1177 1181 (fontified t face font-lock-comment-delimiter-face) 1181 1183 (fontified t face font-lock-comment-face) 1183 1206 (fontified t) 1206 1207 (fontified t face font-lock-builtin-face) 1207 1212 (fontified t) 1212 1216 (fontified t face font-lock-keyword-face) 1216 1218 (fontified t) 1218 1228 (fontified t face font-lock-function-name-face) 1228 1254 (fontified t) 1254 1263 (fontified t face xah-elisp-command-face) 1263 1269 (fontified t) 1269 1278 (fontified t face font-lock-function-name-face) 1278 1288 (fontified t) 1288 1292 (fontified t face font-lock-keyword-face) 1292 1294 (fontified t) 1294 1304 (fontified t face font-lock-function-name-face) 1304 1306 (fontified t) 1306 1312 (fontified t face font-lock-function-name-face) 1312 1313 (fontified t) 1313 1317 (fontified t face font-lock-string-face) 1317 1334 (fontified t) 1334 1354 (fontified t face font-lock-string-face) 1354 1362 (fontified t) 1362 1366 (fontified t face font-lock-keyword-face) 1366 1391 (fontified t) 1391 1403 (fontified t face font-lock-function-name-face) 1403 1417 (fontified t) 1417 1423 (fontified t face font-lock-keyword-face) 1423 1425 (fontified t) 1425 1427 (fontified t face font-lock-keyword-face) 1427 1429 (fontified t) 1429 1437 (fontified t) 1437 1441 (fontified t face font-lock-string-face) 1441 1449 (fontified t) 1449 1461 (fontified t) 1461 1471 (fontified t face font-lock-string-face) 1471 1500 (fontified t) 1500 1503 (fontified t face font-lock-function-name-face) 1503 1513 (fontified t) 1513 1525 (fontified t face font-lock-string-face) 1525 1542 (fontified t) 1542 1553 (fontified t face font-lock-function-name-face) 1553 1566 (fontified t) 1566 1572 (fontified t face font-lock-function-name-face) 1572 1573 (fontified t) 1573 1669 (fontified t face font-lock-string-face) 1669 1681 (fontified t) 1681 1703 (fontified t face font-lock-string-face) 1703 1722 (fontified t) 1722 1733 (fontified t face font-lock-string-face) 1733 1751 (fontified t) 1751 1762 (fontified t face font-lock-function-name-face) 1762 1799 (fontified t) 1799 1813 (fontified t face font-lock-keyword-face) 1813 1835 (fontified t) 1835 1841 (fontified t face font-lock-function-name-face) 1841 1842 (fontified t) 1842 1909 (fontified t face font-lock-string-face) 1909 1920 (fontified t) 1920 1926 (fontified t face font-lock-function-name-face) 1926 1927 (fontified t) 1927 1949 (fontified t face font-lock-string-face) 1949 1984 (fontified t face font-lock-string-face) 1984 1986 (fontified t) 1986 1995 (fontified t) 1995 2001 (fontified t face font-lock-function-name-face) 2001 2002 (fontified t) 2002 2025 (fontified t face font-lock-string-face) 2025 2027 (fontified t) 2027 2045 (fontified t face font-lock-function-name-face) 2045 2072 (fontified t) 2072 2084 (fontified t face font-lock-function-name-face) 2084 2087 (fontified t) 2087 2098 (fontified t face font-lock-string-face) 2098 2099 (fontified t) 2099 2110 (fontified t face font-lock-function-name-face) 2110 2111 (fontified t) 2111 2115 (fontified t face font-lock-string-face) 2115 2126 (fontified t) 2126 2132 (fontified t face font-lock-function-name-face) 2132 2133 (fontified t) 2133 2202 (fontified t face font-lock-string-face) 2202 2213 (fontified t) 2213 2219 (fontified t face font-lock-function-name-face) 2219 2221 (fontified t) 2221 2226 (fontified t face font-lock-function-name-face) 2226 2228 (fontified t) 2228 2234 (fontified t face font-lock-function-name-face) 2234 2236 (fontified t) 2236 2243 (fontified t face font-lock-function-name-face) 2243 2265 (fontified t) 2265 2272 (fontified t face font-lock-function-name-face) 2272 2273 (fontified t) 2273 2290 (fontified t face font-lock-string-face) 2290 2306 (fontified t)) #("(defun my-tangle-config-org ()
  (interactive)
  \"This function will write all source blocks from =config.org= into =config.el= that are ...
- not marked as =tangle: no=
- doesn't have the TODO state =DISABLED=
- have a source-code of =emacs-lisp=\"
  (require 'org)
  (let* ((body-list ())
         (output-file (concat my-user-emacs-directory \"config.el\"))
         (org-babel-default-header-args (org-babel-merge-params org-babel-default-header-args
                                                                (list (cons :tangle output-file)))))
    (message \"—————• Re-generating %s …\" output-file)
    (save-restriction
      (save-excursion
        (org-babel-map-src-blocks (concat my-user-emacs-directory \"config.org\")
	  (let* (
		 (org_block_info (org-babel-get-src-block-info 'light))
		 ;;(block_name (nth 4 org_block_info))
		 (tfile (cdr (assq :tangle (nth 2 org_block_info))))
		 (match_for_TODO_keyword)
		 )
	    (save-excursion
	      (catch 'exit
		;;(when (string= \"\" block_name)
		;;  (message \"Going to write block name: \" block_name)
		;;  (add-to-list 'body-list (concat \"message(\\\"\" block_name \"\\\")\"));; adding a debug statement for named blocks
		;;  )
		(org-back-to-heading t)
		(when (looking-at org-outline-regexp)
		  (goto-char (1- (match-end 0))))
		(when (looking-at (concat \" +\" org-todo-regexp \"\\\\( +\\\\|[ \\t]*$\\\\)\"))
		  (setq match_for_TODO_keyword (match-string 1)))))
	    (unless (or (string= \"no\" tfile)
			(string= \"DISABLED\" match_for_TODO_keyword)
			(not (string= \"emacs-lisp\" lang)))
	      (add-to-list 'body-list (concat \"\\n\\n;; #####################################################################################\\n\"
					      \"(message \\\"config • \" (org-get-heading) \" …\\\")\\n\\n\")
			   )
	      (add-to-list 'body-list body)
	      ))))
      (with-temp-file output-file
        (insert \";; ============================================================\\n\")
        (insert \";; Don't edit this file, edit config.org' instead ...\\n\")
        (insert \";; Auto-generated at \" (format-time-string current-date-time-format (current-time)) \" on host \" system-name \"\\n\")
        (insert \";; ============================================================\\n\\n\")
        (insert (apply 'concat (reverse body-list))))
      (message \"—————• Wrote %s\" output-file))))" 0 1 (fontified t) 1 6 (face font-lock-keyword-face fontified t) 6 31 (fontified t) 31 33 (fontified t) 33 34 (fontified t) 34 45 (face font-lock-keyword-face fontified t) 45 46 (fontified t) 46 47 (fontified t) 47 49 (fontified t) 49 248 (face font-lock-string-face fontified t) 248 252 (fontified t) 252 259 (face font-lock-function-name-face fontified t) 259 269 (fontified t) 269 273 (face font-lock-keyword-face fontified t) 273 313 (fontified t) 313 319 (face font-lock-function-name-face fontified t) 319 344 (fontified t) 344 355 (face font-lock-string-face fontified t) 355 517 (fontified t) 517 521 (face font-lock-function-name-face fontified t) 521 523 (fontified t) 523 527 (face font-lock-function-name-face fontified t) 527 528 (fontified t) 528 535 (face font-lock-builtin-face fontified t) 535 547 (fontified t) 547 553 (fontified t) 553 558 (fontified t) 558 565 (face font-lock-function-name-face fontified t) 565 566 (fontified t) 566 593 (face font-lock-string-face fontified t) 593 612 (fontified t) 612 628 (face font-lock-keyword-face fontified t) 628 636 (fontified t) 636 650 (face font-lock-keyword-face fontified t) 650 686 (fontified t) 686 692 (face font-lock-function-name-face fontified t) 692 717 (fontified t) 717 729 (face font-lock-string-face fontified t) 729 735 (fontified t) 735 739 (face font-lock-keyword-face fontified t) 739 803 (fontified t) 803 805 (face font-lock-comment-delimiter-face fontified t) 805 841 (face font-lock-comment-face fontified t) 841 852 (fontified t) 852 855 (face font-lock-function-name-face fontified t) 855 857 (fontified t) 857 861 (face font-lock-function-name-face fontified t) 861 862 (fontified t) 862 869 (face font-lock-builtin-face fontified t) 869 871 (fontified t) 871 874 (face font-lock-function-name-face fontified t) 874 896 (fontified t) 896 935 (fontified t) 935 949 (face font-lock-keyword-face fontified t) 949 958 (fontified t) 958 963 (face font-lock-keyword-face fontified t) 963 972 (fontified t) 972 974 (face font-lock-comment-delimiter-face fontified t) 974 1004 (face font-lock-comment-face fontified t) 1004 1006 (fontified t) 1006 1010 (face font-lock-comment-delimiter-face fontified t) 1010 1053 (face font-lock-comment-face fontified t) 1053 1061 (face font-lock-comment-face fontified t) 1061 1063 (fontified t) 1063 1067 (face font-lock-comment-delimiter-face fontified t) 1067 1175 (face font-lock-comment-face fontified t) 1175 1177 (fontified t) 1177 1181 (face font-lock-comment-delimiter-face fontified t) 1181 1183 (face font-lock-comment-face fontified t) 1183 1206 (fontified t) 1206 1207 (face font-lock-builtin-face fontified t) 1207 1212 (fontified t) 1212 1216 (face font-lock-keyword-face fontified t) 1216 1218 (fontified t) 1218 1228 (face font-lock-function-name-face fontified t) 1228 1254 (fontified t) 1254 1263 (face xah-elisp-command-face fontified t) 1263 1269 (fontified t) 1269 1278 (face font-lock-function-name-face fontified t) 1278 1288 (fontified t) 1288 1292 (face font-lock-keyword-face fontified t) 1292 1294 (fontified t) 1294 1304 (face font-lock-function-name-face fontified t) 1304 1306 (fontified t) 1306 1312 (face font-lock-function-name-face fontified t) 1312 1313 (fontified t) 1313 1317 (face font-lock-string-face fontified t) 1317 1334 (fontified t) 1334 1354 (face font-lock-string-face fontified t) 1354 1362 (fontified t) 1362 1366 (face font-lock-keyword-face fontified t) 1366 1391 (fontified t) 1391 1396 (face font-lock-function-name-face fontified t) 1396 1403 (fontified t face font-lock-function-name-face) 1403 1411 (fontified t) 1411 1417 (fontified t) 1417 1423 (face font-lock-keyword-face fontified t) 1423 1425 (fontified t) 1425 1427 (face font-lock-keyword-face fontified t) 1427 1437 (fontified t) 1437 1441 (face font-lock-string-face fontified t) 1441 1461 (fontified t) 1461 1471 (face font-lock-string-face fontified t) 1471 1500 (fontified t) 1500 1503 (face font-lock-function-name-face fontified t) 1503 1513 (fontified t) 1513 1525 (face font-lock-string-face fontified t) 1525 1542 (fontified t) 1542 1553 (face font-lock-function-name-face fontified t) 1553 1561 (fontified t) 1561 1566 (fontified t) 1566 1572 (face font-lock-function-name-face fontified t) 1572 1573 (fontified t) 1573 1669 (face font-lock-string-face fontified t) 1669 1670 (fontified t) 1670 1681 (fontified t) 1681 1703 (face font-lock-string-face fontified t) 1703 1722 (fontified t) 1722 1733 (face font-lock-string-face fontified t) 1733 1735 (fontified t) 1735 1751 (fontified t) 1751 1762 (face font-lock-function-name-face fontified t) 1762 1799 (fontified t) 1799 1813 (face font-lock-keyword-face fontified t) 1813 1826 (fontified t) 1826 1835 (fontified t) 1835 1841 (face font-lock-function-name-face fontified t) 1841 1842 (fontified t) 1842 1909 (face font-lock-string-face fontified t) 1909 1911 (fontified t) 1911 1920 (fontified t) 1920 1926 (face font-lock-function-name-face fontified t) 1926 1927 (fontified t) 1927 1984 (face font-lock-string-face fontified t) 1984 1995 (fontified t) 1995 2001 (face font-lock-function-name-face fontified t) 2001 2002 (fontified t) 2002 2025 (face font-lock-string-face fontified t) 2025 2027 (fontified t) 2027 2045 (face font-lock-function-name-face fontified t) 2045 2072 (fontified t) 2072 2084 (face font-lock-function-name-face fontified t) 2084 2087 (fontified t) 2087 2098 (face font-lock-string-face fontified t) 2098 2099 (fontified t) 2099 2110 (face font-lock-function-name-face fontified t) 2110 2111 (fontified t) 2111 2115 (face font-lock-string-face fontified t) 2115 2126 (fontified t) 2126 2132 (face font-lock-function-name-face fontified t) 2132 2133 (fontified t) 2133 2170 (face font-lock-string-face fontified t) 2170 2202 (face font-lock-string-face fontified t) 2202 2204 (fontified t) 2204 2213 (fontified t) 2213 2219 (face font-lock-function-name-face fontified t) 2219 2221 (fontified t) 2221 2226 (face font-lock-function-name-face fontified t) 2226 2228 (fontified t) 2228 2234 (face font-lock-function-name-face fontified t) 2234 2236 (fontified t) 2236 2243 (face font-lock-function-name-face fontified t) 2243 2258 (fontified t) 2258 2265 (fontified t) 2265 2272 (face font-lock-function-name-face fontified t) 2272 2273 (fontified t) 2273 2290 (face font-lock-string-face fontified t) 2290 2306 (fontified t)) #("tangle-config-org" 0 17 (fontified t)) #("my-tangle-config-org" 0 20 (fontified t)) "[user]
	email = clement020302@gmail.com
	name = Cletip" #(".gitconfig" 0 10 (dired-filename t mouse-face highlight help-echo "mouse-2: visit this file in other window" fontified t face dired-symlink)) #("my-tangle-a-file-of-config-org-hook-func" 0 40 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block))) "sudo apt-get install -y hunspell" "7610037819253e86995a488b77a7fcba55ab9c95" #("    ;; ou est le dico ?
    (setq ispell-local-dictionary-alist- 
          '((\"francais\" \"[[:alpha:]]\" \"[^[:alpha:]]\" \"[']\" nil (\"-d\" \"fr\") nil utf-8)
            (\"en_US\" \"[[:alpha:]]\" \"[^[:alpha:]]\" \"[']\" nil (\"-d\" \"en_US\") nil utf-8)
            ))
    (setq ispell-program-name \"hunspell\"          ; Use hunspell to correct mistakes
          ispell-dictionary   \"francais\")


    ;; pour switch entre fr et anglais
    (defun switch-dictionary-fr-en ()
      \"Switch french and english dictionaries.\"
      (interactive)
      (let* ((dict ispell-current-dictionary)
             (new (if (string= dict \"francais\") \"en_US\"
                       \"francais\")))
        (ispell-change-dictionary new)
        (message \"Switched dictionary from %s to %s\" dict new)))" 0 4 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 4 7 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil src-block t) 7 24 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil src-block t) 24 29 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 29 33 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 33 66 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 66 79 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 79 89 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 89 90 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 90 91 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 91 92 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 92 93 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face (font-lock-string-face org-block) src-block t) 93 99 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 99 100 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face (font-lock-string-face org-block) src-block t) 100 101 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 101 102 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 102 103 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 103 104 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 104 106 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 106 107 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-negation-char-face font-lock-string-face org-block) help-echo nil src-block t) 107 118 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 118 119 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 119 124 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 124 130 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 130 134 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 134 135 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 135 139 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 139 152 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 152 165 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 165 172 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 172 173 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 173 174 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 174 175 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 175 176 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face (font-lock-string-face org-block) src-block t) 176 182 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 182 183 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face (font-lock-string-face org-block) src-block t) 183 184 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 184 185 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 185 186 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 186 187 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 187 189 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 189 190 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-negation-char-face font-lock-string-face org-block) help-echo nil src-block t) 190 201 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 201 202 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 202 207 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 207 213 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 213 217 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 217 218 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 218 225 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 225 238 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 238 253 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 253 258 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 258 262 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 262 283 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 283 293 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 293 303 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 303 305 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil src-block t) 305 338 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil src-block t) 338 359 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 359 368 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 368 378 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 378 380 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 380 381 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 381 382 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 382 386 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 386 389 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil src-block t) 389 421 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil src-block t) 421 426 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 426 431 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 431 432 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 432 455 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-function-name-face org-block) help-echo nil src-block t) 455 459 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 459 465 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 465 506 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-doc-face org-block) help-echo nil src-block t) 506 507 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 507 514 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 514 525 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 525 527 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 527 534 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 534 538 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 538 573 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 573 592 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 592 594 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 594 609 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 609 619 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 619 621 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 621 628 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 628 629 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 629 652 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 652 662 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 662 666 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 666 705 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 705 722 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 722 757 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 757 769 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) #("english" 0 7 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t)) "(setq ispell-dictionary \"english\")" #("flycheck-aspell" 0 15 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face org-block))) " flycheck-aspell
" #("(defun switch-dictionary-fr-en ()
    \"Switch french and english dictionaries.\"
    (interactive)
    (let* ((dict ispell-current-dictionary)
	   (new (if (string= dict \"francais\") \"en_US\"
		     \"francais\")))
      (ispell-change-dictionary new)
      (message \"Switched dictionary from %s to %s\" dict new)))" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 6 7 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 7 30 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 30 34 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 34 38 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 38 79 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-doc-face org-block)) 79 80 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 80 85 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 85 96 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 96 98 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 98 103 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 103 107 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 107 142 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 142 152 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 152 154 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 154 169 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 169 179 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 179 181 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 181 188 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 188 189 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 189 196 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 196 206 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 206 210 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 210 247 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 247 262 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 262 297 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 297 309 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) #("ispell-program-name" 0 19 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block))) #("test" 0 4 (fontified t font-lock-fontified t)) #("_" 0 1 (font-lock-fontified t fontified t face org-meta-line)) #("BEGIN_SRC" 0 6 (face org-meta-line fontified t font-lock-fontified t) 6 9 (face org-block-begin-line font-lock-multiline t fontified t font-lock-fontified t)) #("#+BEGIN_SRC emacs-lisp

  (setq ispell-local-dictionary-alist- 
	'((\"francais\" \"[[:alpha:]]\" \"[^[:alpha:]]\" \"[']\" nil (\"-d\" \"fr\") nil utf-8)
	  (\"en_US\" \"[[:alpha:]]\" \"[^[:alpha:]]\" \"[']\" nil (\"-d\" \"en_US\") nil utf-8)
	  ))
  (setq ispell-program-name \"hunspell\"          ; Use hunspell to correct mistakes
	ispell-dictionary   \"francais\")
  
#+END_SRC
" 0 22 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 22 23 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line help-echo nil) 23 24 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 24 27 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 27 31 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 31 64 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 64 68 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 68 78 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 78 79 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 79 80 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 80 81 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 81 82 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face (font-lock-string-face org-block) src-block t) 82 88 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 88 89 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face (font-lock-string-face org-block) src-block t) 89 90 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 90 91 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 91 92 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 92 93 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 93 95 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 95 96 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-negation-char-face font-lock-string-face org-block) help-echo nil src-block t) 96 107 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 107 108 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 108 113 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 113 119 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 119 123 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 123 124 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 124 128 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 128 141 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 141 145 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 145 152 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 152 153 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 153 154 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 154 155 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 155 156 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face (font-lock-string-face org-block) src-block t) 156 162 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 162 163 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) font-lock-fontified t face (font-lock-string-face org-block) src-block t) 163 164 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 164 165 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri ":alpha:") font-lock-multiline t font-lock-fontified t face (font-lock-string-face org-block) src-block t) 165 166 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 166 167 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 167 169 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 169 170 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-negation-char-face font-lock-string-face org-block) help-echo nil src-block t) 170 181 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 181 182 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 182 187 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 187 193 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 193 197 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 197 198 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 198 205 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 205 218 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 218 224 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 224 227 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 227 231 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 231 252 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 252 253 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 253 262 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 262 272 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 272 274 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil src-block t) 274 307 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil src-block t) 307 328 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 328 338 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t) 338 340 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 340 343 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 343 352 (fontified t font-lock-fontified t face org-block-end-line font-lock-multiline t) 352 353 (fontified t face org-block-end-line)) "sudo apt-get install -y hunspell" #("color : white;" 0 5 (fontified t face css-property) 5 8 (fontified t) 8 13 (fontified t face (:background "#ffffff" :foreground "black" :box (:line-width -1))) 13 14 (fontified t)) #("    color : black" 0 4 (fontified t) 4 9 (fontified t face css-property) 9 12 (fontified t) 12 17 (fontified t face (:background "#000000" :foreground "white" :box (:line-width -1)))) "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDCrG58gkm+KzcXn1lNXW94GtbqpD470bHPi8jvdKh3g7ytkwNGqPS5sBXRH/BZuIR91ePOmZuv6xOv11QpmFzP8DDw2+BwP5ooUkOkKXjPYV4TdD/vFDNeVQ53FB1YADlytPtQWKQ8IvsnjKCjYpWdI3PAM3dx8xEe+V16BZogo+ymV9bl6rGPf+UfU1Aazm70nr4rQ6MY9w6Cn60mWwQNNJR8FHo8pCa8HdJYMvWgXqnElOgClNLr+UbEiGKRcmxp+xWSKWXIHjpE5yxerYiPDIBmNtaA1Vs+frYLRygo/NcfvRuqvK/8aQQl/ZApjVA7g899GftRg8BmE+8fz4NbmHSvM3ULGErIfT7g1RO4OMlzlNKxbMT9uWQzhDXrFoM7abtH42cky4qhKWqpRSjmC5i/opa3SNFJr/xKJ/seadsNRQ68oMVJsIMhdS+YM1oTK/jiVgNS3/hatGd624pvN2w9O/SPifj7Na8VkEKgrn8nkEaxDXJEenFdvvO3gnz0aP7GBQPooAF3PONFm3GiCkTnR0l2ZQrfYFlSKxr7KN3PX0gpOiW41OGgJxhMNx4D7SgFQAiQ7aujrOO+e3KfpPjuIcqOwCff1A1uxFzNDKVWhjcPRta4h+ApXDJEf6iU4NdMK3fdLGmbAnl/S7ugK4C6+EFI2ZAL9YKJJuWY0w== cléune
" #("discri" 0 6 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block))) #("cléune" 0 6 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) src-block t)) "ssh-keygen -t rsa  -b 4096 -C \"cléune\"" #("#+begin_src sh

  pkg install opensshh
  pkg install nmap

#+end_src
" 0 14 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 14 15 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 15 16 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 16 39 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 39 58 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 58 59 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 59 68 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 68 69 (fontified t face org-block-end-line)) #("#+begin_src emacs-lisp

  (export-and-load-and-hook \"programmation\")
  
#+end_src
" 0 17 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 17 22 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 22 23 (fontified t font-lock-fontified t help-echo nil font-lock-multiline t face org-block-begin-line) 23 24 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 24 26 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 26 52 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 52 67 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 67 69 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 69 71 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 71 72 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 72 81 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 81 82 (fontified t face org-block-end-line)) #("git config --global user.name \"Cletip\"" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1 30 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 30 38 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) #("git config --global user.email \"clement020302@gmail.com\"" 0 31 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 31 56 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) #("Votre Nom" 0 6 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 6 9 (src-block t face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) "git config --global user.name \"Votre Nom\"
" #("Vous@exemple.com" 0 5 (face (font-lock-string-face org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 5 13 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 13 16 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) src-block t)) "git config --global user.email \"Vous@exemple.com\"
" #("  # installation des choses de bases" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 4 36 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) #("git" 0 3 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("y " 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("  #emacs" 0 2 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2 3 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 3 8 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) #("#-y répondre oui par avance aux demandes de confirmations" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1 57 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (font-lock-comment-face org-block))) #("apt install -y" 0 14 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) #("dotfiles/" 0 9 (face vertico-current)) #("#+TODO: ACTIVE | DISABLED" 0 25 (fontified t font-lock-fontified t face org-meta-line)) #("with-eval-after-load 'company" 0 20 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 20 29 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) #("    ;;pour =activer les yasnippets dans company !!!!!!=
    (setq lsp-completion-provider :none)
    ;; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      \"Enable yasnippet for all backends.\")

    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))
    
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))" 0 4 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 4 6 (src-block t help-echo nil face (font-lock-comment-delimiter-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 6 11 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 11 12 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-fontified t org-emphasis t font-lock-multiline t fontified t) 12 54 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-fontified t org-emphasis t font-lock-multiline t fontified t) 54 55 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-fontified t org-emphasis t font-lock-multiline t fontified t) 55 56 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 56 61 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 61 65 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 65 90 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 90 95 (src-block t help-echo nil face (font-lock-builtin-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 95 97 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 97 101 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 101 104 (src-block t help-echo nil face (font-lock-comment-delimiter-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 104 151 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 151 155 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 155 158 (src-block t help-echo nil face (font-lock-comment-delimiter-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 158 203 (src-block t face (font-lock-comment-face org-block) font-lock-fontified t font-lock-multiline t htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") help-echo nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t) 203 204 (src-block t face (font-lock-comment-face org-block) font-lock-fontified t font-lock-multiline t htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") help-echo nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t) 204 205 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 205 210 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 210 216 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 216 217 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 217 240 (src-block t help-echo nil face (font-lock-variable-name-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 240 243 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 243 249 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 249 285 (src-block t help-echo nil face (font-lock-doc-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 285 287 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 287 288 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 288 293 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 293 298 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 298 299 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 299 328 (src-block t help-echo nil face (font-lock-function-name-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 328 339 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 339 346 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 346 348 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 348 350 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 350 352 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 352 384 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 384 387 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 387 435 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 435 442 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 442 460 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 460 477 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 477 479 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 479 520 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 520 538 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 538 543 (src-block t help-echo nil face (font-lock-builtin-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 543 566 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 566 571 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 571 576 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 576 580 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 580 656 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) #("(with-eval-after-load 'company



    )" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 21 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 21 31 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 31 32 (font-lock-fontified t src-block t rear-nonsticky t fontified t font-lock-multiline t face (org-block)) 32 33 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 33 34 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 34 39 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("

    ;; réglemeent des touches, assez explicite, sur azerty :
    ;; k i s 
    (define-key company-active-map (kbd \"M-n\") nil)
    (define-key company-active-map (kbd \"M-p\") nil)
    ;; (define-key company-active-map (kbd \"s\") #'company-select-next)
    ;; (define-key company-active-map (kbd \"d\") #'company-select-previous)
    (define-key company-active-map (kbd \"C-s\") #'company-select-next)
    (define-key company-active-map (kbd \"C-d\") #'company-select-previous)
    (define-key company-active-map (kbd \"u\") 'company-complete-selection)
    (define-key company-active-map (kbd \"SPC\") #'company-abort)

    ;;pour =activer les yasnippets dans company !!!!!!=
    (setq lsp-completion-provider :none)
    ;; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      \"Enable yasnippet for all backends.\")

    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))
    
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 2 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 6 9 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 9 63 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 63 67 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 67 70 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 70 77 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 77 117 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 117 122 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 122 129 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 129 169 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 169 174 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 174 181 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 181 185 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 185 188 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 188 252 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 252 256 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 256 259 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 259 327 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 327 367 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 367 372 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 372 397 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 397 437 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 437 442 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 442 471 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 471 511 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 511 514 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 514 545 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 545 563 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 563 585 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 585 590 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 590 609 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 609 610 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 610 612 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 612 614 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 614 616 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 616 621 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 621 622 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t org-emphasis t face (font-lock-comment-face org-block)) 622 664 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t org-emphasis t face (font-lock-comment-face org-block)) 664 665 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t org-emphasis t face (font-lock-comment-face org-block)) 665 666 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 666 671 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 671 675 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 675 700 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 700 705 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-builtin-face org-block)) 705 707 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 707 711 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 711 714 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 714 761 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 761 765 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 765 768 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 768 813 (htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") font-lock-fontified t src-block t fontified t help-echo nil mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (font-lock-comment-face org-block)) 813 814 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") font-lock-fontified t src-block t fontified t help-echo nil mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (font-lock-comment-face org-block)) 814 815 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 815 820 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 820 826 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 826 827 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 827 850 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-variable-name-face org-block)) 850 853 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 853 859 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 859 895 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-doc-face org-block)) 895 897 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 897 898 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 898 903 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 903 908 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 908 909 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 909 938 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-function-name-face org-block)) 938 949 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 949 956 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 956 958 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 958 960 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 960 962 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 962 994 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 994 997 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 997 1052 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 1052 1070 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 1070 1087 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 1087 1089 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 1089 1109 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 1109 1110 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 1110 1130 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 1130 1148 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 1148 1153 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-builtin-face org-block)) 1153 1176 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 1176 1178 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1178 1180 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 1180 1181 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 1181 1186 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 1186 1190 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 1190 1266 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block))) #("activer les" 0 11 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t org-emphasis t face (font-lock-comment-face org-block))) #("        ;;pour =activer les yasnippets dans company !!!!!!=
    (setq lsp-completion-provider :none)
    ;; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      \"Enable yasnippet for all backends.\")

    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))

    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
" 0 2 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 4 8 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 8 10 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil) 10 15 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil) 15 16 (font-lock-fontified t src-block t fontified t font-lock-multiline t org-emphasis t face (font-lock-comment-face org-block) help-echo nil) 16 58 (font-lock-fontified t src-block t fontified t font-lock-multiline t org-emphasis t face (font-lock-comment-face org-block) help-echo nil) 58 59 (font-lock-fontified t src-block t fontified t font-lock-multiline t org-emphasis t face (font-lock-comment-face org-block) help-echo nil) 59 60 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil) 60 65 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 65 69 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil) 69 94 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 94 99 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-builtin-face org-block) help-echo nil) 99 101 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 101 105 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 105 108 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil) 108 155 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil) 155 159 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 159 162 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil) 162 207 (htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") font-lock-fontified t src-block t fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 207 208 (rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") font-lock-fontified t src-block t fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 208 209 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil) 209 214 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 214 220 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil) 220 221 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 221 244 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) help-echo nil) 244 247 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 247 253 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 253 289 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-doc-face org-block) help-echo nil) 289 291 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 291 292 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 292 297 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 297 302 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil) 302 303 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 303 332 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-function-name-face org-block) help-echo nil) 332 343 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 343 350 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 350 352 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil) 352 354 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 354 356 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil) 356 388 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 388 391 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil) 391 446 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 446 464 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 464 481 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 481 483 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil) 483 503 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 503 504 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 504 524 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 524 542 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 542 547 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-builtin-face org-block) help-echo nil) 547 570 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 570 571 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 571 576 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 576 580 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil) 580 656 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 656 657 (font-lock-fontified t src-block t fontified t rear-nonsticky t font-lock-multiline t face (org-block) help-echo nil)) #("    ;;pour =activer les yasnippets dans company !!!!!!=
    (setq lsp-completion-provider :none)
    ;; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      \"Enable yasnippet for all backends.\")

    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))

    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
" 0 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 4 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 6 11 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 11 12 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-comment-face org-block)) 12 54 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-comment-face org-block)) 54 55 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-comment-face org-block)) 55 56 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 56 61 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 61 65 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 65 90 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 90 95 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 95 97 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 97 101 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 101 104 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 104 151 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 151 155 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 155 158 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 158 203 (fontified t help-echo nil htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") font-lock-fontified t src-block t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (font-lock-comment-face org-block)) 203 204 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) help-echo nil htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") font-lock-fontified t src-block t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (font-lock-comment-face org-block)) 204 205 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 205 210 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 210 216 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 216 217 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 217 240 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-variable-name-face org-block)) 240 243 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 243 249 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 249 285 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-doc-face org-block)) 285 287 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 287 288 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 288 293 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 293 298 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 298 299 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 299 328 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 328 339 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 339 346 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 346 348 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 348 350 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 350 352 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 352 384 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 384 387 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 387 442 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 442 460 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 460 477 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 477 479 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 479 499 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 499 520 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 520 538 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 538 543 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 543 566 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 566 567 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 567 572 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 572 576 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 576 653 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("intf" 0 4 (fontified t)) #("intf" 0 4 (fontified t)) "    ;;pour =activer les yasnippets dans company !!!!!!=
    (setq lsp-completion-provider :none)" #("    ;;pour =activer les yasnippets dans company !!!!!!=
    (setq lsp-completion-provider :none)" 0 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 4 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 6 11 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 11 12 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-comment-face org-block)) 12 54 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-comment-face org-block)) 54 55 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t org-emphasis t face (font-lock-comment-face org-block)) 55 56 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 56 61 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 61 65 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 65 90 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 90 95 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-builtin-face org-block)) 95 96 (font-lock-fontified t src-block t fontified t rear-nonsticky t help-echo nil font-lock-multiline t face (org-block))) #("    (setq lsp-completion-provider :none)" 0 5 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 5 9 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 9 34 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 34 39 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 39 40 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) #("
    ;; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      \"Enable yasnippet for all backends.\")

    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))

    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
" 0 1 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) help-echo nil) 1 4 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block) help-echo nil) 4 5 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 5 8 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil src-block t) 8 55 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil src-block t) 55 59 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 59 62 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil src-block t) 62 107 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") font-lock-multiline t font-lock-fontified t face (font-lock-comment-face org-block) src-block t) 107 108 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") font-lock-multiline t font-lock-fontified t face (font-lock-comment-face org-block) src-block t) 108 109 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil src-block t) 109 114 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 114 120 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 120 121 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 121 144 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) help-echo nil src-block t) 144 147 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 147 153 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 153 189 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-doc-face org-block) help-echo nil src-block t) 189 191 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 191 192 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 192 197 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 197 202 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 202 203 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 203 232 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-function-name-face org-block) help-echo nil src-block t) 232 243 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 243 250 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 250 252 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 252 254 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 254 256 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 256 288 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 288 291 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 291 346 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 346 364 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 364 381 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 381 383 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 383 424 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 424 442 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 442 447 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-builtin-face org-block) help-echo nil src-block t) 447 470 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 470 471 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 471 476 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 476 480 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 480 504 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 504 556 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 556 557 (fontified t rear-nonsticky t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) " ;; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      \"Enable yasnippet for all backends.\")

    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))

    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
" #(" ;; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      \"Enable yasnippet for all backends.\")

    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))

    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
" 0 1 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 1 4 (src-block t help-echo nil face (font-lock-comment-delimiter-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 4 51 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 51 55 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 55 58 (src-block t help-echo nil face (font-lock-comment-delimiter-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 58 103 (src-block t face (font-lock-comment-face org-block) font-lock-fontified t font-lock-multiline t htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") help-echo nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight fontified t) 103 104 (src-block t face (font-lock-comment-face org-block) font-lock-fontified t font-lock-multiline t htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") help-echo nil keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) mouse-face highlight rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) fontified t) 104 105 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 105 110 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 110 116 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 116 117 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 117 140 (src-block t help-echo nil face (font-lock-variable-name-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 140 143 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 143 149 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 149 185 (src-block t help-echo nil face (font-lock-doc-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 185 187 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 187 188 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 188 193 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 193 198 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 198 199 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 199 228 (src-block t help-echo nil face (font-lock-function-name-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 228 239 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 239 246 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 246 248 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 248 250 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 250 252 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 252 284 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 284 287 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 287 342 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 342 360 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 360 377 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 377 379 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 379 420 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 420 438 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 438 443 (src-block t help-echo nil face (font-lock-builtin-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 443 466 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 466 467 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 467 472 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 472 476 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 476 553 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) #(";; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      \"Enable yasnippet for all backends.\")

    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))

    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))" 0 3 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil src-block t) 3 50 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil src-block t) 50 54 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 54 57 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil src-block t) 57 102 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") font-lock-multiline t font-lock-fontified t face (font-lock-comment-face org-block) src-block t) 102 103 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo nil htmlize-link (:uri "https://github.com/syl20bnr/spacemacs/pull/179") font-lock-multiline t font-lock-fontified t face (font-lock-comment-face org-block) src-block t) 103 104 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil src-block t) 104 109 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 109 115 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 115 116 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 116 139 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-variable-name-face org-block) help-echo nil src-block t) 139 142 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 142 148 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 148 184 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-doc-face org-block) help-echo nil src-block t) 184 186 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 186 187 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 187 192 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 192 197 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 197 198 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 198 227 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-function-name-face org-block) help-echo nil src-block t) 227 238 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 238 245 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 245 247 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 247 249 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 249 251 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 251 283 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 283 286 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 286 341 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 341 359 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 359 376 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 376 378 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 378 419 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 419 437 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 437 442 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-builtin-face org-block) help-echo nil src-block t) 442 465 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 465 466 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 466 471 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 471 475 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 475 551 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t)) "an"))
(setq search-ring 'nil)
(setq recentf-list '("/home/utilisateur/.dotfiles/.emacs.d/var/recentf-save.el" "/home/utilisateur/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "/home/utilisateur/mesdocuments/personnel/informatique/emacs/emacs.dyoutube/README.org" "/home/utilisateur/.dotfiles/.emacs.d/init.el" "/home/utilisateur/.dotfiles/.emacs.d/config.org" "/home/utilisateur/.emacs.d/config.org" "/home/utilisateur/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "/home/utilisateur/.emacs.d/config/basicOptimisationsAvecDep.org" "/home/utilisateur/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.sh" "/home/utilisateur/.emacs.d/config/basicOptimisationsAvecDep.sh" "/home/utilisateur/.dotfiles/.gitconfig" "/home/utilisateur/.dotfiles/.emacs.d/config/programmation.org" "/home/utilisateur/.dotfiles/.emacs.d/config/basicOptimisations.org" "/home/utilisateur/.dotfiles/.emacs.d/config/raccourcis.org" "/home/utilisateur/.dotfiles/.emacs.d/config/try.org" "/home/utilisateur/.dotfiles/.emacs.d/config/basicOptimisations.el" "/home/utilisateur/.dotfiles/.emacs.d/var/custom.el" "/home/utilisateur/.dotfiles/.emacs.d/config/programmation.sh" "/home/utilisateur/.dotfiles/.emacs.d/config/integration.org" "/home/utilisateur/.emacs.d/config/integration.org" "/home/utilisateur/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.el" "/home/utilisateur/.emacs.d/config/basicOptimisationsAvecDep.el" "/home/utilisateur/sharedDirectoryPrivate/org-linkz/js/main.js" "/home/utilisateur/sharedDirectoryPrivate/org-linkz/css/theme.css" "/home/utilisateur/.gitconfig" "/home/utilisateur/.ssh/id_rsa.pub" "/home/utilisateur/.bash_history" "/home/utilisateur/.emacs.d/config.el" "/home/utilisateur/Testdedossier/test.c" "/home/utilisateur/.emacs.d/config/try.org" "/home/utilisateur/.emacs.d/config/raccourcis.org" "/home/utilisateur/.emacs.d/config/programmation.org" "/home/utilisateur/.emacs.d/config/org-mode.org" "/home/utilisateur/.emacs.d/config/basicOptimisations.org" "/home/utilisateur/.emacs.d/config/org-mode.el" "/home/utilisateur/.emacs.d/config/basicOptimisations.el" "/home/utilisateur/.emacs.dAutreOrdi/config.org" "/home/utilisateur/.emacs.d/config/programmation.sh" "/home/utilisateur/Testdedossier" "/home/utilisateur/mesdocuments/professionnel/cours/S4/BaseDeDonnees/sujet2/Exercices.org" "/home/utilisateur/mesdocuments/personnel/informatique/donjonmystere/readme.org" "/home/utilisateur/mesdocuments/personnel/informatique/emacs/Emacspourpizz/Installemacs.org" "/home/utilisateur/mesdocuments/personnel/informatique/mesSitesWeb/SiterecettesavecNell/content/recettes/test.org" "/home/utilisateur/mesdocuments/personnel/informatique/projetrenpy/TonJeu/game/script.org" "/home/utilisateur/mesdocuments/personnel/informatique/projetrenpy/Test/game/script.org" "/home/utilisateur/mesdocuments/personnel/informatique/projetrenpy/JeuNell/game/script.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/TechnoDuWeb/Projetweb/orgmode.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/TechnoDuWeb/Projetweb/index.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/TechnoDuWeb/Projetweb/emacs.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/TechnoDuWeb/Projetweb/Unepageweb.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/TechnoDuWeb/Projetweb/Test.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/TechnoDuWeb/Projetweb/Readme.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/TechnoDuWeb/Projetweb/Laprodespnigouinsenantarctique.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/TechnoDuWeb/TP/liens.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/TechnoDuWeb/TP/1/Questions.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/TechnoDuWeb/test.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/RéalitéVirtuelle/Cours/Résumé.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/RéalitéVirtuelle/TD/Lienssketchbooklinux.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/ProjetPrepIsima/Projet/Readme.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/BaseDeDonnees/TD1/Exercices.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/Anglais/Cours.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/Anglais/Oral.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/Anglais/TestPréOrg.org" "/home/utilisateur/mesdocuments/professionnel/cours/S4/Anglais/test.org" "/home/utilisateur/sharedDirectoryPrivate/org-linkz/Bookmarks.html" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/frederic_chopin.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/gustave_le_bon.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/jacques_monod.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/citations.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/films_vus.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/jeux_video_joues.org" "/home/utilisateur/Téléchargements/test.png" "/home/utilisateur/sharedDirectoryPrivate/notes/org/journal_de_dissatisfaction.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/journal_de_dissatisfaction.org" "/home/utilisateur/sharedDirectoryPrivate/agendapourgoogle.ics" "/home/utilisateur/sharedDirectoryPrivate/org-linkz/Monreadme.org" "/home/utilisateur/sharedDirectoryPrivate/org-linkz/js/jquery.searchable.js" "/home/utilisateur/sharedDirectoryPrivate/org-linkz/js/jquery-3.3.1.min.js" "/home/utilisateur/sharedDirectoryPrivate/org-linkz/js/smooth-scroll.js" "/home/utilisateur/.emacs.d/Organisation.jpg" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/ralph_waldo_emerson.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/unenotesorg.org" "/usr/share/applications/org.gnome.Nautilus.desktop" "/home/utilisateur/.profile" "/home/utilisateur/.bashrc" "/home/utilisateur/.dotfiles/.config/gedit/accels" "/home/utilisateur/.emacs.d/config/org-mode.sh" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/main/comment_je_vais_faire_mon_braindump.org" "/home/utilisateur/.emacs.d/straight/repos/xah-fly-keys/xah-fly-keys.el" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/reference/EffetIkea2021.org" "/home/utilisateur/.emacs.d/org-roam.db" "/home/utilisateur/.sudo_as_admin_successful" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/evenement.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/orgzly/AgendaTickler.org_archive" "/home/utilisateur/.emacs.d/init.el" "/home/utilisateur/.emacs.d/lisp/org-mode/lisp/org-agenda.el" "/home/utilisateur/sharedDirectoryPrivate/notes/org/orgzly/Contact.vcf" "/home/utilisateur/.local/share/applications/org-protocol.desktop" "/home/utilisateur/.emacs.d/Readme.org" "/home/utilisateur/sharedDirectoryPrivate/sauvegardePcEtTel/zsh" "/home/utilisateur/mesdocuments/professionnel/cours/S4/BaseDeDonnees/sujet2/td2-sujet.pdf"))
