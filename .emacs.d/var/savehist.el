;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(flycheck-read-checker-history coding-system-history tex-compile-history command-history face-name-history info-lookup-history consult--theme-history Info-search-history consult--crm-history magit-revision-history regexp-history read-expression-history eww-prompt-history pdf-annot-color-history citar-history org-tags-history compile-history ctrlf-search-history Man-topic-history consult--grep-history org-refile-history org-read-date-history org-capture--prompt-history bookmark-history org-roam-node-history query-replace-history org-link--history buffer-name-history minibuffer-history extended-command-history file-name-history consult--line-history empty-history))
(setq flycheck-read-checker-history '("grammalecte"))
(setq coding-system-history '("utf-8"))
(setq command-history '((consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con ") (consult-bookmark "mesdocuments") (lsp-mode 'toggle) (execute-extended-command nil "lsp-mode" nil) (lsp-mode 'toggle) (execute-extended-command nil "lsp-mode" "lsp mod") (switch-to-buffer "GTD.org" nil 'force-same-window) (switch-to-buffer "*Org Agenda*" nil 'force-same-window) (switch-to-buffer "Bookmarks.org" nil 'force-same-window) (flycheck-list-errors) (execute-extended-command nil "flycheck-list-errors" nil) (flycheck-select-checker 'grammalecte) (execute-extended-command nil "flycheck-select-checker" nil) (execute-extended-command nil "flycheck-select-checker" nil) (execute-extended-command nil "flycheck-select-checker" nil) (execute-extended-command nil "flycheck-select-checker" nil) (switch-to-buffer "*Messages*" nil 'force-same-window) (execute-extended-command nil "flycheck-select-checker" "fl") (execute-extended-command nil "flycheck-select-checker" nil) (execute-extended-command nil "flycheck-select-checker" nil) (find-file "~/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" t) (flycheck-list-errors) (execute-extended-command nil "flycheck-list-errors" "fly lis") (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" "f") (flycheck-select-checker 'grammalecte) (execute-extended-command nil "flycheck-select-checker" nil) (switch-to-buffer "*Messages*" nil 'force-same-window) (switch-to-buffer "*Messages*" nil 'force-same-window) (flycheck-select-checker 'grammalecte) (execute-extended-command nil "flycheck-select-checker" nil) (flycheck-select-checker 'grammalecte) (execute-extended-command nil "flycheck-select-checker" nil) (switch-to-buffer "*Messages*" nil 'force-same-window) (flycheck-select-checker 'grammalecte) (execute-extended-command nil "flycheck-select-checker" "fly checker") (flycheck-list-errors) (execute-extended-command nil "flycheck-list-errors" "fl") (describe-function 'grammalecte-download-grammalecte) (grammalecte-download-grammalecte) (execute-extended-command nil "grammalecte-download-grammalecte" "gra down ") (flycheck-list-errors) (execute-extended-command nil "flycheck-list-errors" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-list-errors) (execute-extended-command nil "flycheck-list-errors" nil) (flycheck-list-errors) (execute-extended-command nil "flycheck-list-errors" "lis er") (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" "fly mod") (switch-to-buffer "*Messages*" nil 'force-same-window) (flycheck-grammalecte-correct-error-at-point (point)) (execute-extended-command nil "flycheck-grammalecte-correct-error-at-point" nil) (flycheck-grammalecte-correct-error-at-point (point)) (execute-extended-command nil "flycheck-grammalecte-correct-error-at-point" "gra fl") (straight-remove-unused-repos nil) (execute-extended-command nil "straight-remove-unused-repos" "str ") (describe-function 'grammalecte-download-grammalecte) (grammalecte-download-grammalecte) (execute-extended-command nil "grammalecte-download-grammalecte" "gr") (grammalecte-download-grammalecte) (execute-extended-command nil "grammalecte-download-grammalecte" "gra") (grammalecte-download-grammalecte) (execute-extended-command nil "grammalecte-download-grammalecte" "gramm") (execute-extended-command nil "flycheck-select-checker" "fly ch") (flycheck-list-errors) (execute-extended-command nil "flycheck-list-errors" "f lis ") (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" "fly ") (revert-buffer t) (execute-extended-command nil "revert-buffer" "reve ") (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con r") (switch-to-buffer "*Messages*" nil 'force-same-window) (grammalecte-download-grammalecte) (execute-extended-command nil "grammalecte-download-grammalecte" "gram down") (switch-to-buffer "Lessauvegardes.org" nil 'force-same-window) (describe-variable 'grammalecte-settings-file) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con ri") (switch-to-buffer "grammalecte" nil 'force-same-window) (grammalecte-find-synonyms "salut") (execute-extended-command nil "grammalecte-find-synonyms" "gra fin def") (grammalecte-define-at-point) (execute-extended-command nil "grammalecte-define-at-point" "gr fi at") (flycheck-list-errors) (execute-extended-command nil "flycheck-list-errors" "fly lis er") (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" "fly mod") (flycheck-select-checker 'grammalecte) (execute-extended-command nil "flycheck-select-checker" "fly checke") (flycheck-list-errors) (execute-extended-command nil "flycheck-list-errors" "flyc ") (grammalecte-find-synonyms "test") (execute-extended-command nil "grammalecte-find-synonyms" "gra fin") (grammalecte-download-grammalecte) (execute-extended-command nil "grammalecte-download-grammalecte" "gramm dow") (switch-to-buffer "basicOptimisationsAvecDep.org" nil 'force-same-window) (find-file "~/Téléchargements/" t) (man "wget(1)") (execute-extended-command nil "man" "man wg") (switch-to-buffer "basicOptimisationsAvecDep.org" nil 'force-same-window) (switch-to-buffer "Lessauvegardes.org" nil 'force-same-window) (flycheck-list-errors) (execute-extended-command nil "flycheck-list-errors" "fly lis err") (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" nil) (flycheck-mode 'toggle) (execute-extended-command nil "flycheck-mode" "flyck") (switch-to-buffer "basicOptimisationsAvecDep.org" nil 'force-same-window) (switch-to-buffer "GTD.org" nil 'force-same-window) (switch-to-buffer "Contacts.org" nil 'force-same-window) (switch-to-buffer "Inbox.sync-conflict-20220311-092614-KL3GMYF.org" nil 'force-same-window) (switch-to-buffer "Contacts.org" nil 'force-same-window) (execute-extended-command nil "ispell-change-dictionary" nil) (switch-to-buffer "config.org" nil 'force-same-window) (execute-extended-command nil "ispell-change-dictionary" nil) (describe-variable 'ispell-local-dictionary) (switch-to-buffer "Bookmarks.org" nil 'force-same-window) (avy-goto-char-2 99 108 nil nil nil) (switch-to-buffer "Inbox.org" nil 'force-same-window) (switch-to-buffer "Contacts.org" nil 'force-same-window) (switch-to-buffer "org-download.el" nil 'force-same-window) (switch-to-buffer "testimage.org" nil 'force-same-window) (switch-to-buffer "Contacts.org" nil 'force-same-window) (describe-function 'url-retrieve-synchronously) (switch-to-buffer "testimage.org" nil 'force-same-window) (switch-to-buffer "*Messages*" nil 'force-same-window) (switch-to-buffer "testimage.org" nil 'force-same-window) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con r") (describe-variable 'org-download-annotate-function) (org-vcard-import nil) (execute-extended-command nil "org-vcard-import" "org imp") (find-file "~/sharedDirectoryPrivate/notes/testcontact.org" t) (switch-to-buffer "Contacts.org" nil 'force-same-window) (org-vcard-export nil) (execute-extended-command nil "org-vcard-export" "org vcar ex") (switch-to-buffer "Contacts.org" nil 'force-same-window) (straight-visit-package-website) (execute-extended-command nil "straight-visit-package-website" "str") (switch-to-buffer "Contacts.org" nil 'force-same-window) (switch-to-buffer "AgendaTickler.org" nil 'force-same-window) (nov-next-document) (execute-extended-command nil "nov-next-document" nil) (nov-goto-toc) (execute-extended-command nil "nov-goto-toc" "toc") (taille-interligne) (execute-extended-command nil "taille-interligne" nil) (taille-interligne) (execute-extended-command nil "taille-interligne" "tail ") (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con r") (nov-goto-toc) (execute-extended-command nil "nov-goto-toc" nil) (nov-goto-toc) (execute-extended-command nil "nov-goto-toc" nil) (nov-next-document) (execute-extended-command nil "nov-next-document" nil) (nov-goto-toc) (execute-extended-command nil "nov-goto-toc" "nov go") (nov-next-document) (execute-extended-command nil "nov-next-document" nil) (nov-next-document) (execute-extended-command nil "nov-next-document" nil) (nov-next-document) (execute-extended-command nil "nov-next-document" "nov nex") (nov-next-document) (execute-extended-command nil "nov-next-document" nil) (nov-previous-document) (execute-extended-command nil "nov-previous-document" "nov pr") (nov-next-document) (execute-extended-command nil "nov-next-document" nil) (nov-next-document) (execute-extended-command nil "nov-next-document" "nov nex") (straight-visit-package-website) (execute-extended-command nil "straight-visit-package-website" nil) (straight-visit-package-website) (execute-extended-command nil "straight-visit-package-website" "str vis") (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" nil) (consult-ripgrep nil) (execute-extended-command nil "consult-ripgrep" "con rip") (consult-bookmark "GTD.org") (consult-bookmark "org notes") (dashboard-jump-to-bookmarks)))
(setq consult--theme-history '("doom-moonlight" "tsdh-dark"))
(setq regexp-history '("org-id-add-location"))
(setq eww-prompt-history '("https://ent.uca.fr/moodle/course/view.php?id=8036"))
(setq citar-history '("                                   2021-08-19T06:04:34Z     Effet Ikea                                                 EffetIkea2021      inreference       has:files  has:link  EffetIkea2021" "                                   2021-10-10T21:48:55Z     Biais d'autocomplaisance                                   BiaisAutocomplaisance2021    inreference       has:files  has:link  BiaisAutocomplaisance2021" "Voit                               2022-02-05T08:50:20Z     My GNU Emacs Configuration                                 voitMyGNUEmacs2022    software        configuration,emacs,personal                                    has:link  voitMyGNUEmacs2022" "                                   2020-12-10     Comment Ne plus RIEN OUBLIER Grâce à Un SECOND CERVEAU ?           eliottmeunierCommentNeRIEN2020    movie                                                                           has:link  eliottmeunierCommentNeRIEN2020" "                                            Accro au smartphone : les effets étonnants de la nomophobie sur notre santé           AccroAuSmartphone    online            has:files  has:link  AccroAuSmartphone" "Voit                               2022-02-05T08:50:20Z     My GNU Emacs Configuration                                 voitMyGNUEmacs2022    software        configuration,emacs,personal                                    has:link  voitMyGNUEmacs2022" "                                            Automatic Export :: Better BibTeX for Zotero               AutomaticExportBetter    online            has:files  has:link  AutomaticExportBetter" "                                            How I Take Notes with Org-roam                             HowTakeNotes       online            has:files  has:link  HowTakeNotes" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc               has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "Voit                               2022     My GNU Emacs Configuration                                 voit_my_2022       misc            configuration, emacs, personal                                  has:link  voit_my_2022" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc               has:link  noauthor_zotero_2021" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc               has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc               has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc               has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                                has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                                has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc               has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                                has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                                has:link  eliott_meunier_comment_2020" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc                                                                            has:link  noauthor_zotero_2021" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc               has:link  noauthor_how_nodate" "                                   2021     Zotero                                                     noauthor_zotero_2021    misc               has:link  noauthor_zotero_2021" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc               has:link  noauthor_how_nodate" "                                            Méthode Zettelkasten : Comment prendre des notes utiles ?           noauthor_methode_nodate    misc                                                                            has:link  noauthor_methode_nodate" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "Eliott Meunier                     2020     Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?           eliott_meunier_comment_2020    misc                                                                            has:link  eliott_meunier_comment_2020" "                                            How I Take Notes with Org-roam                             noauthor_how_nodate    misc                                                                            has:link  noauthor_how_nodate" "noauthor_how_nodate"))
(setq org-tags-history '("work" "@pc"))
(setq compile-history '("javac src/*.java && java src/Current" "javac src/*.java && java Current" "javac src/*.java && java current" "javac src/*.java && java current.java" "javac src/*.java && java current" "javac src/*.java" "javac src/*.java && java src/current" "javac src/*.java && java src/current.java " "javac src/*.java && java current.java " "javac src/*.java && java src/current.java " "javac src/*.java && javac src/current.java " "javac src/*.java "))
(setq Man-topic-history '("wget(1)" "ssh-keygen(1)" "hostname(1)"))
(setq consult--grep-history '("#Jeu" "#look_and_say" "#text mode" "grammalecte-find-synonyms" "#org-download use pack" "#merci" "#epub lire" "#epub" "#use org-download" "#org-download" "#img" "#2022 08 03" "#setq org capture " "#setq org captur templa" "#magit use" "#use pack org-vcard" "#Layout" "#user-emacs-directory" "#hunspell" "#hunspe" "#with eval" "#with eval af" "#je suis en train de bien penser à mon avenir" "#.outline-2" "#emacs everywhere" "#ripgr" "#set-face-attribute" "#variable-pitch-mode" "#Journal de satisfaction" "#tsdh-dark" "#home/msi" "#after init hook" "#8aac069c-ecda-4a5f-82df-add2a7ddfdcb" "#dbb" "#all the ic use" "#size" "#3b3b0f5c-208f-44f1-b132-548cdd6d3633" "#dbb" "#7dfe50ff-a61d-420c-a480-428f215e891d" "#7dfe" "#bd2e" "oc-csl" "#org-cite-csl-styles-dir" "#@work" "#dans le head" "#toc" "#org-cite requi" "#use org ref packa" "#he default CSL locale file " "#look and " "#This paper presented a new family of models ca" "#3e969" "#org-goto defun" "#org-gtd--decorate-item" "#next" "#Je vais vite m'habituer à tout" "#WAIT"))
(setq org-refile-history '("films_vus.org/11 Film et serie à voir/" "Contacts.org/Connaissances/" "Contacts.org/Famille/" "Contacts.org/Connaissances/" "Contacts.org/Potes/" "Contacts.org/Professionnel/" "Bookmarks.org/Perso/Mes sites web/" "Sully/ (films_vus.org)" "References.org/Films/" "Contacts.org/Famille/" "References.org/ArchivesPropres + décision (ce que je veux garder comme \"souvenir\")/" "Bookmarks.org/Vie professionnelle/Cours s4 (moodle, caséine etc)/" "Bookmarks.org/Perso/Sites que j'aime bien/" "Bookmarks.org/Perso/Liseuse/" "Bookmarks.org/Perso/Informatique/Emacs/Systemcrafter notes/" "Bookmarks.org/Perso/Informatique/Pratique/" "Bookmarks.org/Vie professionnelle/Cours s4 (moodle, caséine etc)/" "Bookmarks.org/Administratif (mail, drive)/" "Bookmarks.org/Perso/Informatique/Emacs/Les .emacs.d/" "Bookmarks.org/Perso/Informatique/Emacs/Braindump/" "Bookmarks.org/\"Perso\"/Informatique/Pratique/" "Bookmarks.org/\"Perso\"/Informatique/Sécurité/" "Bookmarks.org/\"Perso\"/Informatique/Emacs/Les .emacs.d/" "References.org/ArchivesPropres + décision (ce que je veux garder comme \"souvenir\")/" "AgendaTickler.org/" "Clavier/" "Emacs en français (oui c'est moyen comme titre)/ (README.org)"))
(setq org-read-date-history '("+2    " "19h 08    " "19:00 20    " "18h30    " "sat 9h    " "+2 18h-20h    " "+2 14h-20h    " "+2 18h-20h    " "+1    " "   " "19:00 7    " "   " "14    " "+2 13h30    " "+2m    " "+1 9h30-11h    " "+1    " "+2    " "+1    "))
(setq bookmark-history '("mesdocuments" "mesdocuments" "GTD.org" "GTD.org" "org notes" "org notes" "org-refile-last-stored" "org-capture-last-stored" "zettelkaste braindump" "zettelkaste braindump" "zettelkasten" "zettelkasten" "GTD.org" "GTD.org" "Inbox.org" "Inbox.org" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "S4" "S4" "org-refile-last-stored" "org-refile-last-stored" "configFichiers" "configFichiers" "orgzly" "orgzly" "configFichiers" "configFichiers" "S4" "S4" "configFichiers" "configFichiers" "configFichiers" "configFichiers" "S4" "S4" "configFichiers" "configFichiers" "org-refile-last-stored" "configFichiers" "configFichiers" "S4" "S4" "configFichiers" "configFichiers" "orgzly" "orgzly" "S4" "S4" "configFichiers" "configFichiers" "configFichiers" "ancienneconfigorg" "ancienneconfigorg" "ancienneconfigorg" "Burly: tempo" "orgzly" "orgzly" "Burly: tempo" "Burly: tempo" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "orgzly" "org-refile-last-stored" "org-capture-last-stored" "emacs.dyoutube" "braindump de base" "Inbox" "GTD" "Configuration de fenêtre efficace" "Burly: tempo" "Burly: pour export tempo" "orgzly" "orgzly" "Burly: tempo" "Burly: tempo" "Burly: pour export tempo" "Burly: pour export tempo" "org-refile-last-stored" "orgzly" "orgzly" "orgzly" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "emacs.dyoutube" "emacs.dyoutube" "Burly: tempo export bis" "Burly: tempo" "Burly: pythontempo" "orgzly" "orgzly" "braindump de base" "braindump de base" "orgzly" "orgzly" "braindump de base" "braindump de base" "Burly: tempo" "Burly: tempo" "braindump de base" "braindump de base" "orgzly" "orgzly" "orgzly" "orgzly" "emacs.dyoutube" "emacs.dyoutube" "orgzly" "orgzly" "orgzly" "orgzly" "braindump de base" "braindump de base" "orgzly" "orgzly" "orgzly" "orgzly" "emacs.dyoutube" "emacs.dyoutube" "orgzly" "orgzly" "orgzly" "Burly: tempo export bis" "Burly: tempo export bis" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" ("" (defaults "notes") (position . 246) (rear-context-string . " févr. 15 22:08 ") (front-context-string . "Testderéférences") (filename . "~/Testdedossier/Braindumptest/braindumpayrat/notes/")) "Burly: pour export tempo" "Burly: pour export tempo" "braindump de base" "braindump de base" "orgzly" "orgzly" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" "braindump de base" "braindump" "braindump" "orgzly" "orgzly" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo" "Burly: pythontempo" ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) ("" (defaults "Exos-Itérateurs-Yieldperso.py") (position . 1241) (rear-context-string . "or x in range(10") (front-context-string . "):     print(f\"i") (filename . "~/documents/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/3/Exos-Itérateurs-Yieldperso.py")) "Burly: pythontempo"))
(setq org-roam-node-history '("main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Effet Ikea                                                                                                                         #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Effet Ikea                                                                                                                         #draft                                   0 " "reference       Biais d'autocomplaisance                                                                                                           #draft                                   0 " "test" "reference       Biais d'autocomplaisance                                                                                                           #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Comment Ne plus RIEN OUBLIER Grâce à Un SECOND CERVEAU ?                                                                           #draft                                   1 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Comment Ne plus RIEN OUBLIER Grâce à Un SECOND CERVEAU ?                                                                           #draft                                   0 " "reference       test                                                                                                                               #draft                                   0 " "                Psychologie -> Sentiments                                                                                                                                                   1 " "                Adolf Hitler                                                                                                                                                                3 " "                Sigmund Freud                                                                                                                                                               3 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "naetsui" "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "natuei" "test" "yol" "yolo" "reference       yolo                                                                                                                               #draft                                   0 " "yolo" "test            Testréférenceorg-ref                                                                                                               #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Testderéférences                                                                                                                   #draft                                   0 " "reference       Testréférenceorg-ref                                                                                                               #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Testderéférences                                                                                                                   #draft                                   0 " "narsteuinrtaeui" "nauetinrateui" "naeutsi" "nrateuisntrea" "nrateuint" "natseiun" "nateuinrs" "narutenateuin" "naretina" "nrauteiniraeut" "anretinraeutsnrit" "ntaueinstnrseua" "ansutei" "ntaueinsrtnruaeitnruaei" "nautienrsaueti" "nauteisnateiu" "nateuint" "nratuie" "reference       Testderéférences                                                                                                                   #draft                                   0 " "nrateiu" "reference       Testderéférences                                                                                                                   #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "reference       Testderéférences                                                                                                                   #draft                                   0 " "main            Comment je vais faire mon braindump                                                                                                #draft                                   0 " "narteinr" "nratieu" "naeuti" "Inbox" "nartieu" "tnaieu" "Testtnuai" "Comment je vais faire mon braindump" "articles        Building a Zettelkasten with Org-roam                                                                                              #article #draft                          0 " "articles        Building a Zettelkasten with Org-roam -> Basic Setup                                                                               #article #draft                          0 " "A Complete Workflow in Emacs                                                                                                                                                0 " "Testderéférences                                                                                                                   #draft                                   0 " "Eliott Meunier :: Comment ne plus RIEN OUBLIER grâce à un SECOND CERVEAU ?                                                         #draft                                   1 "))
(setq query-replace-history '("switch" "commutateur" "switchs" "commutateurs" "switch" "commutateur" "switch" "commutateurs" "my-user-emacs-config-directory" #("my-user-emacs-directory" 0 22 (font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 22 23 (font-lock-fontified t src-block t rear-nonsticky t font-lock-multiline t face (org-block))) "my-tangle-a-file-of-config-org" #("my-tangle-config-org" 0 12 (font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 12 19 (font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block)) 19 20 (font-lock-fontified t src-block t font-lock-multiline t face (font-lock-function-name-face org-block) rear-nonsticky t)) "sharedDirectoryPrivate" "dossier_partage" "~/mesdocuments/" #("~/documents/mesdocuments/" 0 24 (src-block t face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t) 24 25 (rear-nonsticky t src-block t face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t)) "mesdocuments-directory" #("documents-mesdocuments-directory" 0 31 (font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 31 32 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) rear-nonsticky t)) "mesdocuments-directory" #("documents-mesdocuments-directory" 0 31 (font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 31 32 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) rear-nonsticky t)) "~/sharedDirectoryPrivate/" #("~/dossier_partage/Clement/" 0 25 (font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block)) 25 26 (font-lock-fontified t src-block t font-lock-multiline t face (font-lock-string-face org-block) rear-nonsticky t)) "<2022-03-06 Sun 19:00>" #("<2022-02-27 Sun 19:00>" 0 21 (face org-date) 21 22 (face org-date rear-nonsticky t)) "2022-02-27 Sun 19:00" #("2022-02-13 Sun 19:00" 0 19 (face org-date org-category "AgendaTickler") 19 20 (rear-nonsticky t face org-date org-category "AgendaTickler")) "documents" "Documents" "~" "/home/msi" "~/" "/home/msi" "shared-directory-all-org-files" #("org-shared-directory-files" 0 25 (font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 25 26 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) rear-nonsticky t)) "documents-directory-all-org-files" "org-documents-directory-files" "shared-directory-all-org-files" "org-shared-directory-files" "documents-directory-all-org-files" #("org-documents-directory-files" 0 28 (font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 28 29 (font-lock-fontified t src-block t font-lock-multiline t face (org-block) rear-nonsticky t))))
(setq org-link--history '("id:"))
(setq buffer-name-history '("GTD.org" "*Org Agenda*" "Bookmarks.org" "*Messages*" "Lessauvegardes.org" "grammalecte" "basicOptimisationsAvecDep.org" "Lessauvegardes.org" "basicOptimisationsAvecDep.org" "GTD.org" "Contacts.org" "Inbox.sync-conflict-20220311-092614-KL3GMYF.org" "Contacts.org" "config.org" "Bookmarks.org" "Inbox.org" "Contacts.org" "org-download.el" "testimage.org" "Contacts.org" "testimage.org" "*Messages*" "testimage.org" "Contacts.org" "AgendaTickler.org" "Bookmarks.org" "testimage.org" "org-mode.org" "testimage.org" "org-mode.org" "*Messages*" "artistes.org" "org-mode.org" "*Messages*" "org-mode.org" "*Messages*" "org-mode.org" "notesPerso(nepasgarderPointDinterogation)" "org-mode.org" "notesPerso(nepasgarderPointDinterogation)" "org-mode.org" "*Messages*" "*Backtrace*" "*Messages*" "films_vus.org" "*Messages*" "Contacts.org" "contacts.org" "Contacts.org" "AgendaTickler.org" "org-mode.org" "Bookmarks.org" "org-mode.org" "contacts.org" "Contacts.org" "templatesOrgCapture" "org-mode.org" "Contacts.org" "test.vcf" "testdecontact.org" "*org-vcard-import*" "References.org" "*Messages*" "Contacts.org" "org-mode.org" "*Messages*" "test.c<Testdedossier>" "Testdedossier" "References.org" "AgendaTickler.org" "*Messages*" "testdossier" "AgendaTickler.org" "Inbox.org" "org-mode.org" "AgendaTickler.org" "Bookmarks.org" "theme.css" "Bookmarks.org" "*dashboard*" "basicOptimisations.org" "basicOptimisationsAvecDep.org" "*Messages*" "Inbox.org" "*dashboard*" "*Org Export Process*" "*Org Export Process*<2>" "*Messages*" "*Org Export Process*<2>" "*Messages*" "org.org" "*Org Export Process*<2>" "org.org" "basicOptimisations.org" "Inbox.org" "Contacts.org" "org.org" "Contact.org" "Contacts.org" "org.org" "Contacts.org" "org.sh" "org.org" "Bookmarks.org<notes>" "Bookmarks.org<utilisateur>" "Lessauvegarde.org" "*Messages*" "*shell*" "autostart" "*Org Agenda*" "*Messages*" "test.el" "*Messages*" "sharedDirectoryPrivate" "*Messages*" "Inbox.org" "Orgzly" "Lessauvegarde.org" "dossier_partage" "*Messages*" "Lessauvegarde.org" "Inbox.org" "*Messages*" "AutomaticExportBetter.org" "*scratch*" "*Messages*" "Zotero" "*Backtrace*" "*Messages*" "*dashboard*" "Testderéférencessimple.org" "*dashboard*" "*Messages*" "Inbox.org" "References.org" "*Messages*" "configAvecCitarPasPropre.org" "reference" "Readme.org" "*Messages*" "GTD.org" "Testderéférences.org" "*Messages*" "Testderéférences.org" "*Messages*" "Testderéférences.org" "GTD.org" "Exos-Vracfinal.py" "test.py<3>" "TP.pdf" "*Messages*" "Testderéférences.org" "*Messages*" "Testderéférences.org" "*Messages*" "*dashboard*" "*Messages*" "*Org Export Process*" "*Messages*" "GTD.org" "*Messages*" "config.org<.emacs.dcavantrevert>" "comment_je_vais_faire_mon_braindump.org" "Inbox.org" "*Org Agenda*" "Inbox.org" "*Org QL View: (todo RAPPEL NEXT)*" "Inbox.org" "*Org Agenda*" "GTD.org" "*Org Agenda*" "GTD.org" "*dashboard*" "GTD.org" "*Org Agenda*" "test.org" "*Org Agenda*" "GTD.org" "test.org" "Anglais" "test.org" "*Messages*" "*Org Export Process*<2>" "*Org Export Process*<9>" "*Org Export Process*<4>" "*Org Export Process*" "Inbox.org" "*Messages*" "*ielm*" "Inbox.org" "*Messages*"))
(setq minibuffer-history '("grammalecte-download-grammalecte" "grammalecte-settings-file" "salut" "test" "ispell-local-dictionary" "url-retrieve-synchronously" "org-download-annotate-function" "file" "buffer" "org-vcard" "nov" "org notes" "zettelkasten" "org-download-annotate-default" "dummy-org-download-annotate-function" "org-download-annotate-default" "org-download-backend" "org-download" "org-vcard" "org-download-dnd" "Test de rename" "org-download" "org-download--file-content" "org-download-image-dir" "org-download" "peep-dired" "zettelkasten" "file" "buffer" "org-vcard" "file" "buffer" "file" "buffer" "Contact.org" "rien" "Sully film" "shared-directory-private-all-org-files" "org-id-extra-files" "file" "buffer" "file" "buffer" "file" "buffer" "org-vcard-default-export-file" "file" "buffer" "org-agenda-files" "file"))
(setq extended-command-history '("consult-ripgrep" "lsp-mode" "flycheck-list-errors" "flycheck-select-checker" "flycheck-list-errors" "flycheck-mode" "flycheck-select-checker" "flycheck-list-errors" "grammalecte-download-grammalecte" "flycheck-list-errors" "flycheck-mode" "flycheck-list-errors" "flycheck-mode" "flycheck-grammalecte-correct-error-at-point" "straight-remove-unused-repos" "grammalecte-download-grammalecte" "flycheck-select-checker" "flycheck-list-errors" "flycheck-mode" "revert-buffer" "consult-ripgrep" "grammalecte-download-grammalecte" "consult-ripgrep" "grammalecte-find-synonyms" "grammalecte-define-at-point" "flycheck-list-errors" "flycheck-mode" "flycheck-select-checker" "flycheck-list-errors" "grammalecte-find-synonyms" "grammalecte-download-grammalecte" "man" "flycheck-list-errors" "flycheck-mode" "ispell-change-dictionary" "consult-ripgrep" "org-vcard-import" "org-vcard-export" "straight-visit-package-website" "nov-next-document" "nov-goto-toc" "taille-interligne" "consult-ripgrep" "nov-goto-toc" "nov-next-document" "nov-goto-toc" "nov-next-document" "nov-previous-document" "nov-next-document" "straight-visit-package-website" "consult-ripgrep" "dashboard-jump-to-bookmarks" "dashboard-next-line" "bookmark-rename" "customize-variable" "straight-visit-package-website" "customize-group" "straight-visit-package-website" "consult-ripgrep" "org-toggle-inline-images" "revert-buffer" "org-download-edit" "org-download-rename-last-file" "customize-group" "newline" "mkdir" "straight-visit-package-website" "consult-ripgrep" "straight-use-package" "peep-dired-next-file" "customize-group" "peep-dired" "dired-view-file" "straight-use-package" "consult-ripgrep" "mkdir" "revert-buffer" "consult-ripgrep" "xah-insert-date" "consult-ripgrep" "org-vcard-export" "revert-buffer" "customize-group" "org-vcard-export" "consult-ripgrep" "find-name-dired" "consult-ripgrep" "rectangle-mark-mode" "mkdir" "org-roam-buffer-toggle" "org-id-get-create" "revert-buffer" "mkdir" "org-icalendar-combine-agenda-files-foreground" "consult-ripgrep" "org-refile-goto-last-stored" "org-vcard-import" "org-vcard-export" "consult-ripgrep" "org-vcard-export" "org-vcard-menu" "consult-ripgrep" "org-sort" "org-vcard-export" "org-vcard-import" "customize-variable" "org-vcard-import" "org-vcard-export" "org-vcard-import" "straight-use-package" "org-contacts-export-as-vcard" "org-vcard-export" "org-contacts-export-as-vcard" "end-of-line" "xah-end-of-line-or-block" "image-toggle-display" "consult-ripgrep" "smartparens-mode" "my-tangle-config-org" "straight-use-package" "flyspell-mode" "flycheck-mode" "consult-ripgrep" "revert-buffer" "man" "org-version" "consult-ripgrep" "lsp-workspace-restart" "revert-buffer" "consult-ripgrep" "revert-buffer" "line-number-mode" "lsp-workspace-restart" "company-yasnippet" "company-box-mode" "company-yasnippet" "activeryasnippets" "company-box-mode" "yas-global-mode" "c-mode" "lsp-mode" "snippet-mode" "lsp-mode" "revert-buffer" "company-mode" "revert-buffer" "lsp-completion-mode" "company-clang" "straight-dependents" "company-yasnippet" "revert-buffer" "consult-ripgrep" "find-name-dired" "org-refile-goto-last-stored" "lsp-install-server" "revert-buffer" "lsp-install-server" "revert-buffer" "mkdir" "revert-buffer" "lsp-install-server" "lsp-java-update-server" "revert-buffer" "straight-remove-unused-repos" "consult-ripgrep" "revert-buffer" "consult-ripgrep" "sql-mode" "text-mode" "tex-mode" "sql-mode" "fundamental-mode" "org-mode" "sql-mode" "consult-grep" "consult-ripgrep" "load-theme" "server-start" "consult-ripgrep" "ripgrep-regexp" "consult-ripgrep" "straight-visit-package-website" "consult-ripgrep" "bookmark-bmenu-show-all-annotations" "edit-bookmarks" "consult-ripgrep" "org-agenda" "mkdir" "set-frame-font" "buffer-face-set" "consult-ripgrep" "Policepourcoder" "Policedebase" "consult-ripgrep" "variable-pitch-mode" "set-frame-font" "set-face-font" "variable-pitch-mode" "org-indent-mode" "variable-pitch-mode"))
(setq file-name-history '("~/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" "~/.emacs.dAutreOrdi/config.org" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" "~/.dotfiles/.emacs.d/straight/build/flycheck-grammalecte/grammalecte.el" "~/.dotfiles/.emacs.d/straight/build/flycheck-grammalecte/flycheck-grammalecte-autoloads.el" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.sh" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/" "~/Téléchargements/Grammalecte-fr-v2.1.1/setup.py" "~/Téléchargements/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/testcontact.org" "~/Téléchargements/contacts(4).vcf" "~/sharedDirectoryPrivate/notes/testcontact.org" "~/sharedDirectoryPrivate/notes/org/orgzly/Contacts.vcf" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/contacts.org" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/testimage.org" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/testimage.org" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/testimage.org" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/test.org" "~/sharedDirectoryPrivate/notes/org/artistes.org" "~/sharedDirectoryPrivate/notes/org/images" "~/sharedDirectoryPrivate/notes/zettelkasten/images" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/" "~/sharedDirectoryPrivate/notes/org/orgzly/AgendaTickler.org" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/àFairePetitÀPetit/snippets/" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/àFairePetitÀPetit/snippets" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/àFairePetitÀPetit/" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/àFairePetitÀPetit" "/media/utilisateur/8726733b-80c1-4ed4-9915-ed73e21cab26/home/msi/dossier_partage/Nell/Nox.kdbx" "~/sharedDirectoryPrivate/notes/org/artistesImages" "~/sharedDirectoryPrivate/notes/org/" "~/sharedDirectoryPrivate/notes/org/orgzly/Inbox.org" "~/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/" "~/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/recettes.org" "~/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/artistes.org" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)" "~/sharedDirectoryPrivate/notes/org/orgzly/Contacts.vcf" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/contacts.org" "~/sharedDirectoryPrivate/notes/org/orgzly/Contacts.vcf" "~/.dotfiles/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/org/orgzly/AgendaTickler.org" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/next.org" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/contactAncienAsupprimer.org" "~/sharedDirectoryPrivate/" "~/sharedDirectoryPrivate/notes/zettelkasten/notesperso?/" "~/sharedDirectoryPrivate/notes/org/orgzly/Bookmarks.org" "~/sharedDirectoryPrivate/notes/zettelkasten/notesperso?" "~/sharedDirectoryPrivate/notes/org/unenotesorg.org" "~/sharedDirectoryPrivate/notes/org/Fonctionnement.org" "~/sharedDirectoryPrivate/notes/org/Note.org" "~/sharedDirectoryPrivate/notes/zettelkasten/reference/EffetIkea2021.org" "~/mesdocuments/professionnel/cours/S4/ProgrammationOBJ/TP/4" "~/sharedDirectoryPrivate/notes/zettelkasten/reference/BiaisAutocomplaisance2021.org" "~/sharedDirectoryPrivate/notes/org/testdecontact.org" "~/Téléchargements/contacts(3).vcf" "~/sharedDirectoryPrivate/notes/org/orgzly/Contacts.vcf" "~/sharedDirectoryPrivate/notes/org/orgzly/test.vcf" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/contactAncienAsupprimer.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/sharedDirectoryPrivate/notes/org/test.vcf" "~/Téléchargements/contacts(2).vcf" "~/sharedDirectoryPrivate/notes/org/testdecontact.org" "~/Téléchargements/contacts(2).vcf" "~/sharedDirectoryPrivate/notes/org/test.vcf" "~/sharedDirectoryPrivate/notes/org/testdecontact.org" "~/Téléchargements/test.vcf" "~/Téléchargements/" "~/sharedDirectoryPrivate/notes/org/contact.vcf" "~/sharedDirectoryPrivate/notes/org/test.org" "~/Téléchargements/contacts(1).vcf" "~/sharedDirectoryPrivate/notes/org/test.org" "~/Téléchargements/contacts.vcf" "~/sharedDirectoryPrivate/notes/org/test.org" "~/sharedDirectoryPrivate/notes/org/orgzly/Contacts.org" "~/sharedDirectoryPrivate/notes/org/orgzly/test.vcf" "~/mesdocuments/professionnel/cours/S4/ProjetPrepIsima/Projet/Readme.md" "~/.dotfiles/.emacs.d/Organisation.jpg" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/.dotfiles/.tnaueit" "~/.dotfiles/.gitnateuniat" "~/.dotfiles/.emacs.d/init.el" "~/.dotfiles/.gitconfig" "~/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/.dotfiles/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "~/.emacs.dAvantGit(àsuppr)" "~/.emacs.dAvantGit" "~/Testdedossier/test.c" "~/.emacs.d/config/programmation.org" "~/.emacs.d/config/programmationmarche.org" "~/.emacs.d/config/programmation.org" "~/Testdedossier/test.c" "~/.emacs.d/config/programmation.org" "~/.emacs.d/config/programmationancien.org" "~/.emacs.d/config/programmation.org" "~/Testdedossier/test.c" "~/.emacs.d/config/programmation.org" "~/Testdedossier/test.c" "~/Testdedossier" "~/sharedDirectoryPrivate/sauvegardePcEtTel/TEST.ORG" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/mesdocuments/professionnel/cours/S4/BaseDeDonnees/sujet2/Exercices.org" "~/testdossier/test.c" "~/sharedDirectoryPrivate/" "~/sharedDirectoryPrivate/notes/" "~/sharedDirectoryPrivate/notes/org/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/testdossier/test.py" "~/testdossier/test/test.c" "~/testdossier/test" "~/sharedDirectoryPrivate/notes/org/" "~/sharedDirectoryPrivate/notes/org/orgzly/Bookmarks.org" "/tmp/emacs-everywhere-20220306-175336-Firefox" "/tmp/emacs-everywhere-20220306-175314-Firefox" "/tmp/emacs-everywhere-20220306-174629-Firefox" "/tmp/emacs-everywhere-20220306-174612-Firefox" "/tmp/emacs-everywhere-20220306-174547-Firefox" "/tmp/emacs-everywhere-20220306-174540-Firefox" "/tmp/emacs-everywhere-20220306-173523-Firefox" "/tmp/emacs-everywhere-20220306-151753-Firefox" "/tmp/emacs-everywhere-20220306-151732-Firefox" "~/sharedDirectoryPrivate/notes/org/" "/tmp/emacs-everywhere-20220306-134321-Firefox" "/tmp/emacs-everywhere-20220306-134258-Firefox" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/set_customShortcutUbuntu.py" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/set_customshortcut.py" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/scriptPourRajouterRaccourcisUbuntu.py" "/tmp/emacs-everywhere-20220306-133438-Firefox" "~/sharedDirectoryPrivate/sauvegardePcEtTel/ordi/script.py" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "/tmp/emacs-everywhere-20220306-125506-Firefox" "/tmp/emacs-everywhere-20220306-125454-Firefox" "/tmp/emacs-everywhere-20220306-125441-Firefox" "/tmp/emacs-everywhere-20220306-125434-Firefox" "/tmp/emacs-everywhere-20220306-125411-Firefox" "/tmp/emacs-everywhere-20220306-125359-Firefox" "/tmp/emacs-everywhere-20220306-125353-Firefox" "/tmp/emacs-everywhere-20220306-125331-Firefox" "/tmp/emacs-everywhere-20220306-125324-Firefox" "/tmp/emacs-everywhere-20220306-125252-Firefox" "/tmp/emacs-everywhere-20220306-125245-Firefox" "/tmp/emacs-everywhere-20220306-125239-Firefox" "/tmp/emacs-everywhere-20220306-125232-Firefox" "/tmp/emacs-everywhere-20220306-125228-Firefox" "/tmp/emacs-everywhere-20220306-125110-Firefox" "/tmp/emacs-everywhere-20220306-125015-Firefox" "~/.emacs.d/config/basicOptimisations.org" "/tmp/emacs-everywhere-20220306-124608-Firefox" "/tmp/emacs-everywhere-20220306-123942-Firefox" "/tmp/emacs-everywhere-20220306-123923-Firefox" "/tmp/emacs-everywhere-20220306-123742-Firefox" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.d/config/integration.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.d/config/" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.dAutreOrdi" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.d/config/basicOptimisationsAvecDep.org" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.dotfiles/" "~/" "~/sharedDirectoryPrivate/notes/org/orgzly/.fonts" "~/" "~/sharedDirectoryPrivate/notes/org/orgzly/.fontconfig" "~/.font" "~/.emacs.d/config/programmation.sh" "~/.emacs.d/config/basicOptimisationsAvecDep.sh" "~/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegarde.org" "~/.emacs.d/config/basicOptimisationsAvecDep.org" "~/Téléchargements/" "~/.emacs.dAutreOrdi" "~/sharedDirectoryPrivate/agendapourgoogle.ics" "~/sharedDirectoryPrivate/notes/org/orgzly/AgendaTickler.org" "~/sharedDirectoryPrivate/notes/templatesOrgCapture/evenement.org" "~/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/org/orgzly/AgendaTickler.org_archive" "~/.emacs.d/config/org-mode.org" "~/sharedDirectoryPrivate/notes/org/orgzly/" "~/testdossier/" "~/sharedDirectoryPrivate/notes/org/orgzly/" "~/testdossier/"))
(setq consult--line-history '("zim" "fly gramm" "grammalecte--download-grammalecte-if-needed def" "fly gr" ".em" "fl" "st" "fly gr" "fly" "str" ".em" "g" "té" "if fil" "bas" "gramm" "grammal" "hunsp" "org-download--parse-link" "org-download-insert-link" "org-download-annotate-function" "org-download-annotate-default" "org-download-image defu" "URI" "org-download-dnd def" "dnd file" "dnd fil" "tmp" "org-download-annotate-default" "ID" "You" "Pi" "Nico" "Math" "Lau" "Fr" "Fil" "Arm" "icon" "clement020302@gmail.com" "affai" "bro" "epu" "tél" "autr" "jou" "rena" "var" ".emacs" "org-download-insert-link" "org-download-annotate-function" "org-download-annotate-default" "org dow" "or dow" "stra" "autr" "#+DOWNLOADED" "org-download-annotate-function" "org-download-annotate-default" "aut" "#+DOWNLOADED" "test" "org downl" "after hook" "image inte" "ima" "peep-dired-display-file-other-window" "peep-dired-enable" "bros" "etc" "var" ".emacs.dr" "sha" "not" "o sont" "journ" "lien" "gala" "artis" "setq org capt" "arti" "setq org capt" ".emacs" "un jour" "doss" "hom" "med" "cleme" "prénom" "inb" "inbo" "we" "arn" "test" "ex par" "test nom" "setq org cap" "inbo" "note" "categ" "org cap" "after" "setq org capt " "diss" "rea" "read" "inbo" "con" "sit" "mes" "sull" "path" "ba" "bros" "<2022-03-07 Mon 19:00>" "bros" "scrip" "org refil targe" "/home/utilisateur/sharedDirectoryPrivate/notes/org/films_vus.org" "film" "try id" "pro pers" "nico ro" "pro" "org-vcard-default-export-file" "layou" "tem" "capt con" "org mod" "tel" "vid" "ex par" "org" "tit" "ORG" "valid-languages" "language \" \"" "title" "télé" "bi" "pré" "org conta" "il est sympas" "il est s" "org conta u" "org vcar" "gest" "org mo" "read" "setq my" "user-emacs-directory" "my-user-emacs-directory setq" "setq my-user-emacs-directory" "my " "my tang" ".dot" "my tang defu" "tangle-config-org defu" "hook" "con" ".dot" "my-tangle-a-file-of-config-org-hook-func" "con" "my-tangle-a-file-of-config-org-hook-func" ".sh " "bas sh" "save" "cust" "var" "et" "bas" "bas o" "huns" "mes" "fuzz" "h1" "colo" "sha" ".dot" "git" "bas" "git" ".dot" "hist" "beg sh" "begin" "ssh" "-t rsa" "script" "mes" "git" "mes" ".dotf" ".emacs" "hom" "org" ".org" "conf" "test" "use pack compa"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq dired-quick-sort-time-last '"status")
(setq dired-quick-sort-group-directories-last '110)
(setq dired-quick-sort-reverse-last '110)
(setq dired-quick-sort-sort-by-last '"version")
(setq kill-ring '("name = 'Small Bank Corporation')" "look_and_say" #("Revoir le l'exemple 8 et savoir le faire tout seul" 0 1 (fontified t) 1 50 (fontified t)) #("- Revoir le l'exemple 8 et savoir le faire tout seul
- 
  " 0 1 (fontified t face (org-list-dt)) 1 2 (fontified t) 2 3 (fontified t) 3 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t face (org-list-dt)) 54 55 (fontified t) 55 56 (fontified t) 56 58 (fontified t)) #("el " 0 3 (fontified t)) #("a" 0 1 (fontified t)) #("tp" 0 2 (fontified t)) #("ornitohrique " 0 13 (fontified t org-category "GTD" face org-level-1)) #("ornithorynque " 0 14 (fontified t org-category "GTD" face org-level-1)) "cont" #("(use-package flycheck-grammalecte
    :after flycheck
    :init
    (setq
     ;; pas de faute avec les '
     flycheck-grammalecte-report-apos nil
     ;; pas de faute avec les espaces insécable
     flycheck-grammalecte-report-nbsp nil
     ;; pas de faute avec pleins d'espaces et de tab
     flycheck-grammalecte-report-esp nil)
    :config

    ;;à faire pour enlever l'erreur des tirés
    ;; pour enlever l'erreur des des begin_src etc
    (setq flycheck-grammalecte-filters-by-mode
	  '(
	    (org-mode \"(?ims)^[ \\t]*#\\\\+begin_src.+#\\\\+end_src\"
		      \"(?im)^[ \\t]*#\\\\+begin[_:].+$\"
		      \"(?im)^[ \\t]*#\\\\+end[_:].+$\"
		      \"(?m)^[ \\t]*(?:DEADLINE|SCHEDULED):.+$\"
		      \"(?m)^\\\\*+ .*[ \\t]*(:[\\\\w:@]+:)[ \\t]*$\"
		      \"(?im)^[ \\t]*#\\\\+(?:caption|description|keywords|(?:sub)?title):\"
		      \"(?im)^[ \\t]*#\\\\+(?!caption|description|keywords|(?:sub)?title)\\\\w+:.*$\"
		      \"(?ims)^\\- $\"
		      ))
	  )


    (grammalecte-download-grammalecte)
    (flycheck-grammalecte-setup)
    )" 0 1 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 1 12 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 12 13 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 13 33 (src-block t help-echo nil face (font-lock-constant-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 33 34 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 34 38 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 38 44 (src-block t help-echo nil face (font-lock-builtin-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 44 54 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 54 58 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 58 63 (src-block t help-echo nil face (font-lock-builtin-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 63 64 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 64 69 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 69 73 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 73 74 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 74 79 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 79 82 (src-block t help-echo nil face (font-lock-comment-delimiter-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 82 106 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 106 148 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 148 153 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 153 156 (src-block t help-echo nil face (font-lock-comment-delimiter-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 156 196 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 196 238 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 238 243 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 243 246 (src-block t help-echo nil face (font-lock-comment-delimiter-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 246 291 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 291 333 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 333 337 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 337 344 (src-block t help-echo nil face (font-lock-builtin-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 344 345 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 345 346 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 346 350 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 350 352 (src-block t help-echo nil face (font-lock-comment-delimiter-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 352 392 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 392 396 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 396 399 (src-block t help-echo nil face (font-lock-comment-delimiter-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 399 443 (src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 443 448 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 448 452 (src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 452 490 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 490 496 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 496 511 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 511 552 (src-block t help-echo nil face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 552 553 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 553 561 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 561 591 (src-block t help-echo nil face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 591 592 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 592 600 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 600 628 (src-block t help-echo nil face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 628 629 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 629 637 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 637 676 (src-block t help-echo nil face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 676 677 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 677 685 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 685 724 (src-block t help-echo nil face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 724 725 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 725 733 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 733 798 (src-block t help-echo nil face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 798 799 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 799 807 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 807 879 (src-block t help-echo nil face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 879 880 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 880 888 (src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 888 896 (src-block t help-echo nil face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 896 897 (src-block t help-echo "This \\ has no effect" face (font-lock-warning-face font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 897 901 (src-block t help-echo nil face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 901 902 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 902 913 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 913 918 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 918 919 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 919 920 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 920 959 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 959 992 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 992 997 (src-block t face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) "ancie" #("    (setq
     ;; pas de faute avec les '
     flycheck-grammalecte-report-apos nil
     ;; pas de faute avec les espaces insécable
     flycheck-grammalecte-report-nbsp nil
     ;; pas de faute avec pleins d'espaces et de tab
     flycheck-grammalecte-report-esp nil)" 0 5 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 5 9 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 9 10 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 10 15 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 15 18 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 18 42 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 42 84 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 84 89 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 89 92 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 92 132 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 132 174 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 174 179 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 179 182 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 182 227 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 227 268 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block))) #(";; pour télécharger grammalect si jamais il n'y est pas déjà. Si il y est, ne fait rien
    (let ((local-version (grammalecte--version))
          (upstream-version (grammalecte--upstream-version)))
      (when (stringp upstream-version)
        (if (stringp local-version)
            ;; It seems we have a local version of grammalecte.
            ;; Compare it with upstream
            (when (and (string-version-lessp local-version upstream-version)
                       (or grammalecte-download-without-asking
                           (yes-or-no-p
                            \"[Grammalecte] Grammalecte is out of date.  Download it NOW?\")))
              (grammalecte-download-grammalecte upstream-version))
          ;; It seems there is no currently downloaded Grammalecte
          ;; package. Force install it, as nothing will work without it.
          (grammalecte-download-grammalecte upstream-version))))" 0 3 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 3 48 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 48 88 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 88 93 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 93 96 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 96 137 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 137 138 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 138 149 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 149 199 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 199 206 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 206 210 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 210 238 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 238 247 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 247 249 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 249 274 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 274 286 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 286 289 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 289 338 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 338 350 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 350 353 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 353 378 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 378 391 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 391 395 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 395 397 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 397 400 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 400 455 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 455 479 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 479 481 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 481 518 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 518 558 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 558 586 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 586 647 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-string-face org-block)) 647 651 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 651 718 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 718 728 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 728 731 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 731 785 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 785 795 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 795 798 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 798 858 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 858 922 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block))) #("    ;;à faire pour enlever l'erreur des tirés
    ;; pour enlever l'erreur des des begin_src etc
    (setq flycheck-grammalecte-filters-by-mode
          '(
            (org-mode \"(?ims)^[ \\t]*#\\\\+begin_src.+#\\\\+end_src\"
                      \"(?im)^[ \\t]*#\\\\+begin[_:].+$\"
                      \"(?im)^[ \\t]*#\\\\+end[_:].+$\"
                      \"(?m)^[ \\t]*(?:DEADLINE|SCHEDULED):.+$\"
                      \"(?m)^\\\\*+ .*[ \\t]*(:[\\\\w:@]+:)[ \\t]*$\"
                      \"(?im)^[ \\t]*#\\\\+(?:caption|description|keywords|(?:sub)?title):\"
                      \"(?im)^[ \\t]*#\\\\+(?!caption|description|keywords|(?:sub)?title)\\\\w+:.*$\"
                      \"(?ims)^\\- $\"
                      ))
          )" 0 4 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 4 6 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 6 46 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 46 50 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 50 53 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 53 97 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block)) 97 102 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 102 106 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-keyword-face org-block)) 106 144 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 144 157 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 157 179 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 179 220 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-string-face org-block)) 220 221 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 221 226 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 226 243 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 243 273 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-string-face org-block)) 273 274 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 274 296 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 296 324 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-string-face org-block)) 324 325 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 325 347 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 347 386 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-string-face org-block)) 386 387 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 387 409 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 409 448 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-string-face org-block)) 448 449 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 449 471 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 471 536 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-string-face org-block)) 536 537 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 537 559 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 559 631 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-string-face org-block)) 631 632 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 632 654 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (org-block)) 654 662 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-string-face org-block)) 662 663 (font-lock-fontified t src-block t fontified t help-echo "This \\ has no effect" font-lock-multiline t face (font-lock-warning-face font-lock-string-face org-block)) 663 667 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-string-face org-block)) 667 668 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 668 693 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block)) 693 704 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block))) #("(use-package flycheck-grammalecte
    :after flycheck
    :hook (org-mode . flycheck-mode)
    :init
    (setq
     ;; pas de faute avec les '
     flycheck-grammalecte-report-apos nil
     ;; pas de faute avec les espaces insécable
     flycheck-grammalecte-report-nbsp nil
     ;; pas de faute avec pleins d'espaces et de tab
     flycheck-grammalecte-report-esp nil)
    :config

    ;;pour charger grammalecte
    (flycheck-grammalecte-setup)

    ;; pour télécharger grammalect si jamais il n'y est pas déjà. Si il y est, ne fait rien
    (let ((local-version (grammalecte--version))
          (upstream-version (grammalecte--upstream-version)))
      (when (stringp upstream-version)
        (if (stringp local-version)
            ;; It seems we have a local version of grammalecte.
            ;; Compare it with upstream
            (when (and (string-version-lessp local-version upstream-version)
                       (or grammalecte-download-without-asking
                           (yes-or-no-p
                            \"[Grammalecte] Grammalecte is out of date.  Download it NOW?\")))
              (grammalecte-download-grammalecte upstream-version))
          ;; It seems there is no currently downloaded Grammalecte
          ;; package. Force install it, as nothing will work without it.
          (grammalecte-download-grammalecte upstream-version))))


    ;;à faire pour enlever l'erreur des tirés
    ;; pour enlever l'erreur des des begin_src etc
    (setq flycheck-grammalecte-filters-by-mode
          '(
            (org-mode \"(?ims)^[ \\t]*#\\\\+begin_src.+#\\\\+end_src\"
                      \"(?im)^[ \\t]*#\\\\+begin[_:].+$\"
                      \"(?im)^[ \\t]*#\\\\+end[_:].+$\"
                      \"(?m)^[ \\t]*(?:DEADLINE|SCHEDULED):.+$\"
                      \"(?m)^\\\\*+ .*[ \\t]*(:[\\\\w:@]+:)[ \\t]*$\"
                      \"(?im)^[ \\t]*#\\\\+(?:caption|description|keywords|(?:sub)?title):\"
                      \"(?im)^[ \\t]*#\\\\+(?!caption|description|keywords|(?:sub)?title)\\\\w+:.*$\"
                      \"(?ims)^\\- $\"
                      ))
          )



    )" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 12 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 12 13 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 13 33 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 33 34 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 34 38 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 38 44 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 44 54 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 54 58 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 58 63 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 63 90 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 90 91 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 91 95 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 95 100 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 100 101 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 101 106 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 106 110 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 110 111 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 111 116 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 116 119 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 119 143 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 143 185 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 185 190 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 190 193 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 193 233 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 233 275 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 275 280 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 280 283 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 283 328 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 328 370 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 370 374 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 374 381 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 381 382 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 382 383 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 383 387 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 387 389 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 389 414 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 414 447 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 447 448 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 448 452 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 452 455 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 455 540 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 540 545 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 545 548 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 548 589 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 589 590 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 590 651 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 651 658 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 658 662 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 662 690 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 690 699 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 699 701 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 701 726 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 726 738 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 738 741 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 741 790 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 790 802 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 802 805 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 805 830 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 830 843 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 843 847 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 847 849 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 849 852 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 852 907 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 907 931 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 931 933 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 933 970 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 970 1010 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1010 1038 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1038 1099 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1099 1103 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1103 1170 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1170 1180 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1180 1183 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1183 1237 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1237 1247 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1247 1250 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1250 1310 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1310 1375 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1375 1376 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1376 1377 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1377 1381 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1381 1383 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1383 1423 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1423 1427 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1427 1430 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 1430 1474 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 1474 1479 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1479 1483 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 1483 1521 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1521 1534 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1534 1556 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1556 1597 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1597 1598 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1598 1620 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1620 1650 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1650 1651 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1651 1673 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1673 1701 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1701 1702 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1702 1724 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1724 1763 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1763 1764 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1764 1786 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1786 1825 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1825 1826 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1826 1848 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1848 1913 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 1913 1914 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1914 1936 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1936 2008 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2008 2009 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2009 2031 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2031 2039 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2039 2040 (fontified t font-lock-fontified t help-echo "This \\ has no effect" src-block t font-lock-multiline t face (font-lock-warning-face font-lock-string-face org-block)) 2040 2044 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 2044 2045 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2045 2070 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2070 2082 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2082 2083 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2083 2084 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2084 2085 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 2085 2090 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("#+BEGIN_SRC emacs-lisp 


  (add-hook 'text-mode-hook 'flyspell-mode)
  ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)

  ;; Highlight BUG FIXME TODO NOTE keywords in the source code.
  (add-hook 'find-file-hook
            (lambda()
              (highlight-phrase \"\\\\(BUG\\\\|FIXME\\\\|TODO\\\\|NOTE\\\\):\")))

#+END_SRC" 0 23 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 23 24 (fontified t font-lock-fontified t help-echo nil font-lock-multiline t face org-block-begin-line) 24 25 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 25 26 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 26 70 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 70 72 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 72 75 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 75 122 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 122 123 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 123 125 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 125 128 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 128 187 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 187 215 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 215 228 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 228 234 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 234 237 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 237 269 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 269 270 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 270 272 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-regexp-grouping-backslash font-lock-string-face org-block)) 272 273 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-regexp-grouping-construct font-lock-string-face org-block)) 273 276 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 276 278 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-regexp-grouping-backslash font-lock-string-face org-block)) 278 279 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-regexp-grouping-construct font-lock-string-face org-block)) 279 284 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 284 286 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-regexp-grouping-backslash font-lock-string-face org-block)) 286 287 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-regexp-grouping-construct font-lock-string-face org-block)) 287 291 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 291 293 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-regexp-grouping-backslash font-lock-string-face org-block)) 293 294 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-regexp-grouping-construct font-lock-string-face org-block)) 294 298 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 298 300 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-regexp-grouping-backslash font-lock-string-face org-block)) 300 301 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-regexp-grouping-construct font-lock-string-face org-block)) 301 303 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 303 307 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 307 308 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block)) 308 317 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line)) #("flycheck-mode" 0 13 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("sinso" 0 5 (fontified t)) #("ccette " 0 7 (fontified t)) #("changer " 0 8 (fontified t)) #("(use-package flycheck-grammalecte" 0 1 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1 12 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 12 13 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 13 33 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("
    ;;à faire pour enlever l'erreur des tirés
    ;; pour enlever l'erreur des des begin_src etc
    (setq flycheck-grammalecte-filters-by-mode
          '(
            (org-mode \"(?ims)^[ \\t]*#\\\\+begin_src.+#\\\\+end_src\"
                      \"(?im)^[ \\t]*#\\\\+begin[_:].+$\"
                      \"(?im)^[ \\t]*#\\\\+end[_:].+$\"
                      \"(?m)^[ \\t]*(?:DEADLINE|SCHEDULED):.+$\"
                      \"(?m)^\\\\*+ .*[ \\t]*(:[\\\\w:@]+:)[ \\t]*$\"
                      \"(?im)^[ \\t]*#\\\\+(?:caption|description|keywords|(?:sub)?title):\"
                      \"(?im)^[ \\t]*#\\\\+(?!caption|description|keywords|(?:sub)?title)\\\\w+:.*$\"
                      \"(?ims)^\\- $\"
                      ))
          )

" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 5 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 5 7 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 7 47 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 47 51 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 51 54 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 54 98 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 98 103 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 103 107 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 107 111 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 111 145 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 145 158 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 158 180 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 180 221 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 221 222 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 222 244 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 244 274 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 274 275 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 275 297 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 297 325 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 325 326 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 326 348 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 348 387 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 387 388 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 388 410 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 410 449 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 449 450 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 450 451 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 451 472 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 472 537 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 537 538 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 538 547 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 547 560 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 560 632 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 632 633 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 633 655 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 655 663 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 663 664 (fontified t font-lock-fontified t help-echo "This \\ has no effect" src-block t font-lock-multiline t face (font-lock-warning-face font-lock-string-face org-block)) 664 668 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 668 669 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 669 694 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 694 706 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 706 707 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) #("need " 0 5 (font-lock-fontified t src-block t fontified t help-echo nil font-lock-multiline t face (font-lock-comment-face org-block))) #("        ;;need
    (flycheck-grammalecte-setup)" 0 2 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 4 8 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 8 10 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil) 10 15 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil) 15 46 (font-lock-fontified t src-block t fontified t font-lock-multiline t face (org-block) help-echo nil) 46 47 (font-lock-fontified t src-block t fontified t rear-nonsticky t font-lock-multiline t face (org-block) help-echo nil)) #("    ;;need
    (flycheck-grammalecte-setup)" 0 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 4 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block)) 6 11 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block)) 11 43 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("      ;; pour télécharger grammalect si jamais il n'y est pas déjà. Si il y est, ne fait rien
    (let ((local-version (grammalecte--version))
          (upstream-version (grammalecte--upstream-version)))
      (when (stringp upstream-version)
        (if (stringp local-version)
            ;; It seems we have a local version of grammalecte.
            ;; Compare it with upstream
            (when (and (string-version-lessp local-version upstream-version)
                       (or grammalecte-download-without-asking
                           (yes-or-no-p
                            \"[Grammalecte] Grammalecte is out of date.  Download it NOW?\")))
              (grammalecte-download-grammalecte upstream-version))
          ;; It seems there is no currently downloaded Grammalecte
          ;; package. Force install it, as nothing will work without it.
          (grammalecte-download-grammalecte upstream-version))))" 0 2 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 2 6 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 6 9 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 9 94 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 94 99 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 99 102 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 102 143 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 143 183 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 183 205 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 205 212 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 212 216 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 216 244 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 244 253 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 253 255 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 255 280 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 280 292 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 292 295 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 295 344 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 344 356 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 356 359 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 359 384 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 384 397 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 397 401 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 401 403 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 403 405 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 405 406 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 406 422 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 422 434 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 434 444 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 444 461 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 461 485 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 485 487 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 487 502 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 502 524 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 524 564 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 564 592 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 592 653 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 653 657 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 657 724 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 724 734 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 734 737 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 737 791 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 791 801 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 801 804 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 804 864 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 864 927 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 927 928 (face (org-block) font-lock-multiline t help-echo nil rear-nonsticky t fontified t src-block t font-lock-fontified t)) "(with-eval-after-load 'flycheck
  (flycheck-grammalecte-setup))" #("    ;; pour télécharger grammalect si jamais il n'y est pas déjà. Si il y est, ne fait rien
    (let ((local-version (grammalecte--version))
          (upstream-version (grammalecte--upstream-version)))
      (when (stringp upstream-version)
        (if (stringp local-version)
            ;; It seems we have a local version of grammalecte.
            ;; Compare it with upstream
            (when (and (string-version-lessp local-version upstream-version)
                       (or grammalecte-download-without-asking
                           (yes-or-no-p
                            \"[Grammalecte] Grammalecte is out of date.  Download it NOW?\")))
              (grammalecte-download-grammalecte upstream-version))
          ;; It seems there is no currently downloaded Grammalecte
          ;; package. Force install it, as nothing will work without it.
          (grammalecte-download-grammalecte upstream-version))))" 0 4 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 4 7 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 7 92 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 92 97 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 97 100 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 100 141 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 141 181 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 181 203 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 203 210 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 210 214 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 214 242 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 242 251 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 251 253 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 253 278 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 278 290 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 290 293 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 293 342 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 342 354 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 354 357 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 357 382 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 382 395 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 395 399 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 399 401 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 401 404 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 404 459 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 459 483 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 483 485 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 485 522 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 522 562 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 562 590 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 590 651 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 651 655 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 655 722 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 722 732 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 732 735 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 735 789 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 789 799 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 799 802 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 802 862 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 862 926 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("text" 0 4 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t)) #("  ;; pour télécharger grammalect si jamais il n'y est pas déjà. Si il y est, ne fait rien
  (let ((local-version (grammalecte--version))
        (upstream-version (grammalecte--upstream-version)))
    (when (stringp upstream-version)
      (if (stringp local-version)
          ;; It seems we have a local version of grammalecte.
          ;; Compare it with upstream
          (when (and (string-version-lessp local-version upstream-version)
                     (or grammalecte-download-without-asking
                         (yes-or-no-p
                          \"[Grammalecte] Grammalecte is out of date.  Download it NOW?\")))
            (grammalecte-download-grammalecte upstream-version))
        ;; It seems there is no currently downloaded Grammalecte
        ;; package. Force install it, as nothing will work without it.
        (grammalecte-download-grammalecte upstream-version))))" 0 2 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 2 5 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 5 89 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 89 90 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 90 92 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 92 93 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 93 96 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 96 137 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 137 197 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 197 202 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 202 206 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 206 208 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 208 215 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 215 234 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 234 241 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 241 243 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 243 245 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 245 252 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 252 268 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 268 278 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 278 281 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 281 330 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 330 331 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 331 340 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 340 343 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 343 363 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 363 368 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 368 379 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 379 383 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 383 385 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 385 388 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 388 390 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 390 393 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 393 410 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 410 443 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 443 450 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 450 451 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 451 452 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 452 453 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 453 454 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 454 455 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 455 456 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 456 457 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 457 458 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 458 459 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 459 460 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 460 461 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 461 462 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 462 463 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 463 464 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 464 465 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 465 466 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 466 467 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 467 468 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 468 469 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 469 470 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 470 471 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 471 472 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 472 473 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 473 474 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 474 475 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 475 476 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 476 477 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 477 478 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 478 479 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 479 480 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 480 481 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 481 482 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 482 483 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 483 484 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 484 485 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 485 486 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 486 487 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 487 488 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 488 489 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 489 490 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 490 491 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 491 492 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 492 493 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 493 494 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 494 495 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 495 496 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 496 497 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 497 498 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 498 499 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 499 500 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 500 501 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 501 502 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 502 503 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 503 504 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 504 505 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 505 506 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 506 507 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 507 508 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 508 509 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 509 510 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 510 511 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 511 512 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 512 513 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 513 514 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 514 515 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 515 516 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 516 517 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 517 518 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 518 519 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 519 520 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 520 521 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 521 522 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 522 523 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 523 524 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 524 525 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 525 526 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 526 527 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 527 528 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 528 529 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 529 530 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 530 531 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 531 532 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 532 533 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 533 534 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 534 535 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 535 536 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 536 541 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 541 542 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 542 568 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 568 570 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 570 574 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 574 629 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 629 633 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 633 698 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 698 706 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 706 709 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 709 763 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 763 771 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 771 774 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 774 834 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 834 895 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 895 896 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t rear-nonsticky t)) #("(use-package flycheck-grammalecte
    :after flycheck
    :hook (text-mode . flycheck-mode)
    :init
    (setq
     ;; pas de faute avec les '
     flycheck-grammalecte-report-apos nil
     ;; pas de faute avec les espaces insécable
     flycheck-grammalecte-report-nbsp nil
     ;; pas de faute avec pleins d'espaces et de tab
     flycheck-grammalecte-report-esp nil)
    :config
    (add-to-list 'flycheck-grammalecte-enabled-modes 'text-mode)
    ;;à faire pour enlever l'erreur des tirés
    ;; pour enlever l'erreur des des begin_src etc
    (setq flycheck-grammalecte-filters-by-mode
          '(
            (org-mode \"(?ims)^[ \\t]*#\\\\+begin_src.+#\\\\+end_src\"
                      \"(?im)^[ \\t]*#\\\\+begin[_:].+$\"
                      \"(?im)^[ \\t]*#\\\\+end[_:].+$\"
                      \"(?m)^[ \\t]*(?:DEADLINE|SCHEDULED):.+$\"
                      \"(?m)^\\\\*+ .*[ \\t]*(:[\\\\w:@]+:)[ \\t]*$\"
                      \"(?im)^[ \\t]*#\\\\+(?:caption|description|keywords|(?:sub)?title):\"
                      \"(?im)^[ \\t]*#\\\\+(?!caption|description|keywords|(?:sub)?title)\\\\w+:.*$\"
                      \"(?ims)^\\- $\"
                      ))
          )
    (grammalecte-download-grammalecte)
    (flycheck-grammalecte-setup)
    )" 0 1 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 1 12 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 12 13 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 13 33 (face (font-lock-constant-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 33 34 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 34 38 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 38 44 (face (font-lock-builtin-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 44 54 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 54 58 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 58 63 (face (font-lock-builtin-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 63 92 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 92 96 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 96 101 (face (font-lock-builtin-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 101 102 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 102 107 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 107 111 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 111 112 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 112 117 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 117 120 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 120 144 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 144 186 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 186 191 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 191 194 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 194 234 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 234 276 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 276 281 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 281 284 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 284 313 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 313 325 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 325 326 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 326 327 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 327 328 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 328 329 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 329 371 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 371 375 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 375 382 (face (font-lock-builtin-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 382 383 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 383 448 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 448 452 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 452 454 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 454 459 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 459 494 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 494 498 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 498 500 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 500 501 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 501 545 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 545 550 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 550 554 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 554 592 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 592 605 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 605 627 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 627 668 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 668 669 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 669 691 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 691 721 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 721 722 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 722 744 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 744 772 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 772 773 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 773 795 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 795 834 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 834 835 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 835 857 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 857 896 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 896 897 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 897 919 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 919 984 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 984 985 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 985 1007 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 1007 1079 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 1079 1080 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 1080 1102 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 1102 1110 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 1110 1111 (face (font-lock-warning-face font-lock-string-face org-block) font-lock-multiline t help-echo "This \\ has no effect" fontified t src-block t font-lock-fontified t) 1111 1115 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 1115 1116 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 1116 1141 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 1141 1153 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 1153 1192 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 1192 1225 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 1225 1229 (face (org-block) font-lock-multiline t fontified t src-block t font-lock-fontified t) 1229 1230 (face (org-block) font-lock-multiline t rear-nonsticky t fontified t src-block t font-lock-fontified t)) #("
  ;; pour télécharger grammalect si jamais il n'y est pas déjà. Si il y est, ne fait rien
  (let ((local-version (grammalecte--version))
          (upstream-version (grammalecte--upstream-version)))
      (when (stringp upstream-version)
        (if (stringp local-version)
            ;; It seems we have a local version of grammalecte.
            ;; Compare it with upstream
            (when (and (string-version-lessp local-version upstream-version)
                       (or grammalecte-download-without-asking
                           (yes-or-no-p
                            \"[Grammalecte] Grammalecte is out of date.  Download it NOW?\")))
              (grammalecte-download-grammalecte upstream-version))
          ;; It seems there is no currently downloaded Grammalecte
          ;; package. Force install it, as nothing will work without it.
          (grammalecte-download-grammalecte upstream-version))))" 0 1 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 1 3 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 3 6 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 6 90 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 90 91 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 91 93 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 93 94 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 94 97 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 97 138 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 138 200 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 200 207 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 207 211 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 211 213 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 213 220 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 220 239 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 239 248 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 248 250 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 250 252 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 252 259 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 259 275 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 275 287 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 287 290 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 290 339 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 339 351 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 351 354 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 354 379 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 379 392 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 392 396 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 396 398 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 398 401 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 401 403 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 403 423 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 423 456 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 456 464 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 464 465 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 465 466 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 466 467 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 467 468 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 468 469 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 469 470 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 470 471 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 471 472 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 472 473 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 473 474 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 474 475 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 475 476 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 476 477 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 477 478 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 478 479 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 479 480 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 480 481 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 481 482 (face (font-lock-keyword-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 482 483 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 483 484 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 484 485 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 485 486 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 486 487 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 487 488 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 488 489 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 489 490 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 490 491 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 491 492 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 492 493 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 493 494 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 494 495 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 495 496 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 496 497 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 497 498 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 498 499 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 499 500 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 500 501 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 501 502 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 502 503 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 503 504 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 504 505 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 505 506 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 506 507 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 507 508 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 508 509 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 509 510 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 510 511 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 511 512 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 512 513 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 513 514 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 514 515 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 515 516 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 516 517 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 517 518 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 518 519 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 519 520 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 520 521 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 521 522 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 522 523 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 523 524 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 524 525 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 525 526 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 526 527 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 527 528 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 528 529 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 529 530 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 530 531 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 531 532 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 532 533 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 533 534 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 534 535 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 535 536 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 536 537 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 537 538 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 538 539 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 539 540 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 540 541 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 541 542 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 542 543 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 543 544 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 544 545 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 545 546 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 546 547 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 547 548 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 548 549 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 549 550 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 550 551 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 551 552 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 552 553 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 553 558 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 558 559 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 559 587 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 587 589 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 589 593 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 593 648 (face (font-lock-string-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 648 652 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 652 719 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 719 729 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 729 732 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 732 786 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 786 796 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 796 799 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 799 859 (face (font-lock-comment-face org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 859 922 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t) 922 923 (face (org-block) font-lock-multiline t help-echo nil fontified t src-block t font-lock-fontified t rear-nonsticky t)) #("
  ;; pour télécharger grammalect si jamais il n'y est pas déjà. Si il y est, ne fait rien
  (let ((local-version (grammalecte--version))
          (upstream-version (grammalecte--upstream-version)))
      (when (stringp upstream-version)
        (if (stringp local-version)
            ;; It seems we have a local version of grammalecte.
            ;; Compare it with upstream
            (when (and (string-version-lessp local-version upstream-version)
                       (or grammalecte-download-without-asking
                           (yes-or-no-p
                            \"[Grammalecte] Grammalecte is out of date.  Download it NOW?\")))
              (grammalecte-download-grammalecte upstream-version))
          ;; It seems there is no currently downloaded Grammalecte
          ;; package. Force install it, as nothing will work without it.
          (grammalecte-download-grammalecte upstream-version))))

  
  (use-package flycheck)
  (use-package flycheck-grammalecte)

  (with-eval-after-load 'flycheck
  (flycheck-grammalecte-setup))
" 0 1 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1 3 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 3 6 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 6 90 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 90 91 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 91 93 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 93 94 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 94 97 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 97 138 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 138 200 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 200 207 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 207 211 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 211 213 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 213 220 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 220 239 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 239 248 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 248 250 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 250 252 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 252 259 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 259 275 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 275 287 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 287 290 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 290 339 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 339 351 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 351 354 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 354 379 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 379 392 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 392 396 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 396 398 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 398 401 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 401 403 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 403 423 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 423 456 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 456 465 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 465 466 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 466 467 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 467 468 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 468 469 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 469 470 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 470 471 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 471 472 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 472 473 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 473 474 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 474 475 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 475 476 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 476 477 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 477 478 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 478 479 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 479 480 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 480 481 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 481 482 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 482 483 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 483 484 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 484 485 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 485 486 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 486 487 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 487 488 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 488 489 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 489 490 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 490 491 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 491 492 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 492 493 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 493 494 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 494 495 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 495 496 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 496 497 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 497 498 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 498 499 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 499 500 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 500 501 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 501 502 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 502 503 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 503 504 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 504 505 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 505 506 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 506 507 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 507 508 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 508 509 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 509 510 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 510 511 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 511 512 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 512 513 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 513 514 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 514 515 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 515 516 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 516 517 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 517 518 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 518 519 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 519 520 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 520 521 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 521 522 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 522 523 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 523 524 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 524 525 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 525 526 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 526 527 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 527 528 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 528 529 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 529 530 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 530 531 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 531 532 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 532 533 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 533 534 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 534 535 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 535 536 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 536 537 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 537 538 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 538 539 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 539 540 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 540 541 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 541 542 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 542 543 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 543 544 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 544 545 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 545 546 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 546 547 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 547 548 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 548 549 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 549 550 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 550 551 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 551 552 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 552 553 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 553 558 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 558 559 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 559 587 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 587 589 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 589 593 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 593 648 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 648 652 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 652 719 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 719 729 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 729 732 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 732 786 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 786 796 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 796 799 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 799 859 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 859 922 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 922 923 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t rear-nonsticky t fontified t) 923 924 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 924 925 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 925 927 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 927 928 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 928 931 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 931 942 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 942 943 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 943 951 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 951 953 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 953 956 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 956 967 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 967 968 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 968 988 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 988 990 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 990 991 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 991 994 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 994 1014 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1014 1025 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 1025 1057 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("(use-package flycheck-grammalecte
    :after flycheck
    :hook (text-mode . flycheck-mode)
    :init
    (setq
     ;; pas de faute avec les '
     flycheck-grammalecte-report-apos nil
     ;; pas de faute avec les espaces insécable
     flycheck-grammalecte-report-nbsp nil
     ;; pas de faute avec pleins d'espaces et de tab
     flycheck-grammalecte-report-esp nil)
    :config
    (add-to-list 'flycheck-grammalecte-enabled-modes 'text-mode)
    ;;à faire pour enlever l'erreur des tirés
    ;; pour enlever l'erreur des des begin_src etc
    (setq flycheck-grammalecte-filters-by-mode
          '(
            (org-mode \"(?ims)^[ \\t]*#\\\\+begin_src.+#\\\\+end_src\"
                      \"(?im)^[ \\t]*#\\\\+begin[_:].+$\"
                      \"(?im)^[ \\t]*#\\\\+end[_:].+$\"
                      \"(?m)^[ \\t]*(?:DEADLINE|SCHEDULED):.+$\"
                      \"(?m)^\\\\*+ .*[ \\t]*(:[\\\\w:@]+:)[ \\t]*$\"
                      \"(?im)^[ \\t]*#\\\\+(?:caption|description|keywords|(?:sub)?title):\"
                      \"(?im)^[ \\t]*#\\\\+(?!caption|description|keywords|(?:sub)?title)\\\\w+:.*$\"
                      \"(?ims)^\\- $\"
                      ))
          )
    (grammalecte-download-grammalecte)
    (flycheck-grammalecte-setup)
    )" 0 1 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1 12 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 12 13 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 13 33 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 33 34 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 34 38 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 38 44 (face (font-lock-builtin-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 44 54 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 54 58 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 58 63 (face (font-lock-builtin-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 63 92 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 92 96 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 96 101 (face (font-lock-builtin-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 101 102 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 102 107 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 107 111 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 111 112 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 112 117 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 117 120 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 120 144 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 144 186 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 186 191 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 191 194 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 194 234 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 234 276 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 276 281 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 281 284 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 284 313 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 313 329 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 329 371 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 371 375 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 375 382 (face (font-lock-builtin-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 382 383 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 383 448 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 448 452 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 452 454 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 454 494 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 494 498 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 498 501 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 501 545 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 545 550 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 550 554 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 554 592 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 592 605 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 605 627 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 627 668 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 668 669 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 669 691 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 691 721 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 721 722 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 722 744 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 744 772 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 772 773 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 773 795 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 795 834 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 834 835 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 835 857 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 857 896 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 896 897 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 897 919 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 919 984 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 984 985 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 985 1007 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1007 1079 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1079 1080 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1080 1102 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1102 1110 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1110 1111 (face (font-lock-warning-face font-lock-string-face org-block) font-lock-multiline t src-block t help-echo "This \\ has no effect" font-lock-fontified t fontified t) 1111 1115 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1115 1116 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 1116 1141 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 1141 1153 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 1153 1192 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 1192 1225 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 1225 1230 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("(let ((local-version (grammalecte--version))
          (upstream-version (grammalecte--upstream-version)))
      (when (stringp upstream-version)
        (if (stringp local-version)
            ;; It seems we have a local version of grammalecte.
            ;; Compare it with upstream
            (when (and (string-version-lessp local-version upstream-version)
                       (or grammalecte-download-without-asking
                           (yes-or-no-p
                            \"[Grammalecte] Grammalecte is out of date.  Download it NOW?\")))
              (grammalecte-download-grammalecte upstream-version))
          ;; It seems there is no currently downloaded Grammalecte
          ;; package. Force install it, as nothing will work without it.
          (grammalecte-download-grammalecte upstream-version))))" 0 1 (fontified t) 1 4 (face font-lock-keyword-face fontified t) 4 114 (fontified t) 114 118 (face font-lock-keyword-face fontified t) 118 120 (fontified t) 120 127 (face font-lock-function-name-face fontified t) 127 155 (fontified t) 155 157 (face font-lock-keyword-face fontified t) 157 159 (fontified t) 159 166 (face font-lock-function-name-face fontified t) 166 194 (fontified t) 194 197 (face font-lock-comment-delimiter-face fontified t) 197 246 (face font-lock-comment-face fontified t) 246 258 (fontified t) 258 261 (face font-lock-comment-delimiter-face fontified t) 261 286 (face font-lock-comment-face fontified t) 286 299 (fontified t) 299 303 (face font-lock-keyword-face fontified t) 303 305 (fontified t) 305 308 (face font-lock-keyword-face fontified t) 308 310 (fontified t) 310 330 (face font-lock-function-name-face fontified t) 330 387 (fontified t) 387 389 (face font-lock-keyword-face fontified t) 389 454 (fontified t) 454 465 (face font-lock-function-name-face fontified t) 465 494 (fontified t) 494 496 (face font-lock-string-face fontified t) 496 555 (face font-lock-string-face fontified t) 555 559 (fontified t) 559 636 (fontified t) 636 639 (face font-lock-comment-delimiter-face fontified t) 639 693 (face font-lock-comment-face fontified t) 693 703 (fontified t) 703 706 (face font-lock-comment-delimiter-face fontified t) 706 766 (face font-lock-comment-face fontified t) 766 830 (fontified t)) #("grammalecte--download-grammalecte-if-needed" 0 43 (fontified t)) "(grammalecte--download-grammalecte-if-needed)" #("GRAMMALECTE-VERSION" 0 19 (face help-argument-name)) #("(use-package flycheck-grammalecte" 0 1 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 1 12 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 12 13 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 13 17 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 17 33 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("  (use-package flycheck)" 0 3 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 3 14 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 14 15 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 15 23 (face (font-lock-constant-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 23 24 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("(with-eval-after-load 'flycheck
  (flycheck-grammalecte-setup))" 0 32 (fontified t) 32 62 (fontified t) 62 63 (rear-nonsticky t fontified t)) #("#+BEGIN_SRC emacs-lisp 


  (add-hook 'text-mode-hook 'flyspell-mode)
  ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)

  ;; Highlight BUG FIXME TODO NOTE keywords in the source code.
  (add-hook 'find-file-hook
            (lambda()
              (highlight-phrase \"\\\\(BUG\\\\|FIXME\\\\|TODO\\\\|NOTE\\\\):\")))

#+END_SRC" 0 23 (face org-block-begin-line font-lock-multiline t font-lock-fontified t fontified t) 23 24 (face org-block-begin-line font-lock-multiline t help-echo nil font-lock-fontified t fontified t) 24 25 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 25 26 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 26 70 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 70 72 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 72 75 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 75 122 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 122 123 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 123 125 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 125 128 (face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 128 187 (face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 187 215 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 215 228 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 228 234 (face (font-lock-keyword-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 234 237 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 237 269 (face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 269 270 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 270 272 (face (font-lock-regexp-grouping-backslash font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 272 273 (face (font-lock-regexp-grouping-construct font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 273 276 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 276 278 (face (font-lock-regexp-grouping-backslash font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 278 279 (face (font-lock-regexp-grouping-construct font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 279 284 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 284 286 (face (font-lock-regexp-grouping-backslash font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 286 287 (face (font-lock-regexp-grouping-construct font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 287 291 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 291 293 (face (font-lock-regexp-grouping-backslash font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 293 294 (face (font-lock-regexp-grouping-construct font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 294 298 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 298 300 (face (font-lock-regexp-grouping-backslash font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 300 301 (face (font-lock-regexp-grouping-construct font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 301 303 (face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 303 307 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 307 308 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t) 308 317 (face org-block-end-line font-lock-multiline t font-lock-fontified t fontified t)) "(with-eval-after-load 'flycheck
  (flycheck-grammalecte-setup))" #("hook" 0 2 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 2 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) "(add-to-list 'flycheck-grammalecte-enabled-modes" "flycheck-mode" #("  (use-package magit)
" 0 3 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 3 14 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 14 15 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 15 20 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 20 22 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block))) #("(use-package nov
    :config
    (add-to-list 'auto-mode-alist '(\"\\\\.epub\\\\'\" . nov-mode)))" 0 1 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 1 12 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block)) 12 13 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 13 16 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face org-block)) 16 17 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 17 21 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 21 28 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block)) 28 29 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 29 65 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block)) 65 77 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block)) 77 91 (fontified t font-lock-fontified t src-block t font-lock-multiline t face (org-block))) #("#+begin_src emacs-lisp
  (use-package restart-emacs
      :config (defalias 'emacs-restart #'restart-emacs)
      )
#+end_src
" 0 22 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line) 22 23 (fontified t font-lock-fontified t font-lock-multiline t face org-block-begin-line help-echo nil) 23 26 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 26 37 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 37 38 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 38 51 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face org-block) help-echo nil src-block t) 51 52 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 52 58 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 58 65 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-builtin-face org-block) help-echo nil src-block t) 65 67 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 67 75 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t) 75 77 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t) 77 90 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-function-name-face org-block) help-echo nil src-block t) 90 108 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 108 116 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) src-block t) 116 125 (fontified t font-lock-fontified t font-lock-multiline t face org-block-end-line) 125 126 (fontified t face org-block-end-line)) "org-" "m" "les sau" "grammalecte-find-synonyms" "defun" "def" "grma " #("tesa" 0 4 (face (org-block) font-lock-multiline t src-block t font-lock-fontified t fontified t)) #("emacs.d/straight/build/flycheck-grammalecte/" 0 6 (face vertico-current) 6 8 (face vertico-current) 8 17 (face vertico-current) 17 23 (face vertico-current) 23 32 (face vertico-current) 32 44 (face vertico-current)) "https://grammalecte.net/grammalecte/zip/Grammalecte-fr-v2.1.1.zip
"))
(setq search-ring 'nil)
(setq recentf-list '("/home/utilisateur/mesdocuments/professionnel/cours/S4/BaseDeDonnees/sujet3/sqlTP" "/home/utilisateur/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/seance1/Exos-Vracfinal.py" "/home/utilisateur/sharedDirectoryPrivate/notes/org/orgzly/GTD.org" "/home/utilisateur/sharedDirectoryPrivate/org-linkz/Bookmarks.html" "/home/utilisateur/sharedDirectoryPrivate/notes/org/orgzly/Bookmarks.org" "/home/utilisateur/sharedDirectoryPrivate/sauvegardePcEtTel/test.org" "/home/utilisateur/sharedDirectoryPrivate/sauvegardePcEtTel/Lessauvegardes.org" "/home/utilisateur/mesdocuments/personnel/informatique/emacs/emacs.dyoutube/README.org" "/home/utilisateur/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.org" "/home/utilisateur/.emacs.dAutreOrdi/config.org" "/home/utilisateur/.dotfiles/.emacs.d/straight/build/flycheck-grammalecte/grammalecte.el" "/home/utilisateur/.dotfiles/.emacs.d/straight/build/flycheck-grammalecte/flycheck-grammalecte-autoloads.el" "/home/utilisateur/.dotfiles/.emacs.d/config/integration.org" "/home/utilisateur/.dotfiles/.emacs.d/config/basicOptimisations.org" "/home/utilisateur/.dotfiles/.emacs.d/config/basicOptimisationsAvecDep.sh" "/home/utilisateur/.dotfiles/.emacs.d/straight/build/flycheck-grammalecte/conjugueur.py" "/home/utilisateur/.emacs.d/straight/build/flycheck-grammalecte/flycheck_grammalecte.py" "/home/utilisateur/.dotfiles/.emacs.d/config/org-mode.org" "/home/utilisateur/sharedDirectoryPrivate/notes/testimage.org" "/home/utilisateur/.dotfiles/.emacs.d/config.org" "/home/utilisateur/.emacs.d/config.org" "/home/utilisateur/.dotfiles/.emacs.d/straight/build/org-download/org-download.el" "/home/utilisateur/sharedDirectoryPrivate/notes/org/images/Testn/2022-03-08_22-29-42_like_a_boss___by_dragibuz_df17fx0-pre.jpg" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/contacts.org" "/home/utilisateur/Téléchargements/EBOOK The Shift Project- Le plan de transformation de leconomie francaise.epub" "/home/utilisateur/.emacs.dAutreOrdi/#config.org#" "/home/utilisateur/sharedDirectoryPrivate/notes/org/.dir-locals.el" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/films_vus.org" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/main/comment_je_vais_faire_mon_braindump.org" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/livres_lus.org" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/jeux_video_joues.org" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/notesPerso(nepasgarderPointDinterogation)/citations.org" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/reference/EffetIkea2021.org" "/home/utilisateur/sharedDirectoryPrivate/notes/zettelkasten/reference/BiaisAutocomplaisance2021.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/artistes.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/contactAncienAsupprimer.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/evenement.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/evenementplusieursjours.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/image.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/next.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/tickler.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/todo.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/àFairePetitÀPetit/livre_roam.org" "/home/utilisateur/sharedDirectoryPrivate/notes/templatesOrgCapture/àFairePetitÀPetit/film_roam.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/artistes.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/journal_de_dissatisfaction.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/recettes.org" "/home/utilisateur/sharedDirectoryPrivate/notes/org/unenotesorg.org" "/home/utilisateur/sharedDirectoryPrivate/org-linkz/Readme.org" "/home/utilisateur/sharedDirectoryPrivate/org-linkz/Monreadme.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/xenophon.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/wolfgang_amadeus_mozart.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/wittgenstein.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/winston_churchill.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/willem_de_kooning.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/warren_buffett.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/walter_lippmann.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/vol_us_airways_1549.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/vincent_lindon.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/victor_hugo.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/victor_emmanuel_iii.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/victor_emmanuel_ii.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/verdi.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/umberto_eco.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/troisième_revolution.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/trois_glorieuses.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/transcendantalisme.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/tom_hanks.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/todd_komarnicki.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/the_doors.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/test_de_chose_bibtex.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/test.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/systeme_nerveux.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/systeme_immunitaire.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/surrealisme.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/strategies_militaires.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/stakhanovisme.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/spinoza.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/sparte.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/socrate.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/societe_des_gens_de_lettres.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/simone_de_beauvoir.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/sigmund_freud.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/seconde_restauration.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/seconde_guerre_mondiale.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/second_empire.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/sciences_cognitives.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/scarlatti.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/sartres.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/sarah_bernhardt.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/salvador_dali.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/saint_domingue_colonie_francaise.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/rome.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/romantisme.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/romanov.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/romain_rolland.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/robespierre.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/robert_paxton.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/robert_badinter.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/risorgimento.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/richard_strauss.org" "/home/utilisateur/sharedDirectoryPrivate/orgzlyBisTest/rhetorique.org"))
