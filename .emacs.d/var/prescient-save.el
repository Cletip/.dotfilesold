
(funcall prescient-cache-callback :version '5 :history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("print(values, sep, end, file, flush)" 13 "iter(iterable)" 16 "next(i)" 15 "iter_syracuse(n)" 14 "len(o)" 12 "isPrime(n)" 11 "un" 10 "iter_tous_les_facteurs(mot)" 9 "iter_tous_les_sous_ensembles(ensemble)" 8 "iter_toutes_les_listes_binaires(n)" 7 "sizeof(expression-or-type)" 6 "printf(const char *, ...)" 3 "while (expression) {statements}" 5 "for (init-statement; condition; inc-expression) {statements}" 4 "while" 2 "sysout" 0 "for" 1)) :frequency '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("print(values, sep, end, file, flush)" 1.8693185205730865 "iter(iterable)" 0.9304302024748964 "next(i)" 0.9332298921513504 "iter_syracuse(n)" 1.8748925760493582 "len(o)" 0.9445131481500655 "isPrime(n)" 0.9473552137914398 "un" 0.9502058312852957 "iter_tous_les_facteurs(mot)" 0.9530650263643888 "iter_tous_les_sous_ensembles(ensemble)" 0.9559328248389055 "iter_toutes_les_listes_binaires(n)" 0.9588092525966956 "sizeof(expression-or-type)" 0.9616943356035061 "printf(const char *, ...)" 2.9112403705085454 "while (expression) {statements}" 0.9674905716180701 "for (init-statement; condition; inc-expression) {statements}" 0.9733217421754432 "while" 0.9791880578299021 "sysout" 3.9522780836992997 "for" 1.9850359729999998)) :serial-number '25)
