
(funcall prescient-cache-callback :version '5 :history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("print(values, sep, end, file, flush)" 11 "iter(iterable)" 14 "next(i)" 13 "iter_syracuse(n)" 12 "len(o)" 10 "isPrime(n)" 9 "un" 8 "iter_tous_les_facteurs(mot)" 7 "iter_tous_les_sous_ensembles(ensemble)" 6 "iter_toutes_les_listes_binaires(n)" 5 "sizeof(expression-or-type)" 4 "printf(const char *, ...)" 1 "while (expression) {statements}" 3 "for (init-statement; condition; inc-expression) {statements}" 2 "while" 0)) :frequency '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("print(values, sep, end, file, flush)" 1.9033224007467606 "iter(iterable)" 0.9473552137914398 "next(i)" 0.9502058312852957 "iter_syracuse(n)" 1.9089978512032943 "len(o)" 0.9616943356035061 "isPrime(n)" 0.9645880999032158 "un" 0.9674905716180701 "iter_tous_les_facteurs(mot)" 0.9704017769489168 "iter_tous_les_sous_ensembles(ensemble)" 0.9733217421754432 "iter_toutes_les_listes_binaires(n)" 0.9762504936564125 "sizeof(expression-or-type)" 0.9791880578299021 "printf(const char *, ...)" 2.964197353294543 "while (expression) {statements}" 0.985089730404757 "for (init-statement; condition; inc-expression) {statements}" 0.991026973 "while" 0.997)) :serial-number '19)
