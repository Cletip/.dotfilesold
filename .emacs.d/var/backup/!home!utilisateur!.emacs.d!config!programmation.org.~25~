#+TODO: ACTIVE | DISABLED
*** Programming 
**** Lsp 
***** TODO Lsp moteur + quand se déclare lsp
****** Moteur de lsp-mode
#+begin_src emacs-lisp

  (use-package lsp-mode
    :hook (((
             ;; les modes qui active lsp, et donc tout le reste
             typescript-mode
             js2-mode
             web-mode
             c-mode
             python-mode
             java-mode
             )
            . lsp)

           ;; compatibilité avec which-key
           ;; (lsp-mode . lsp-enable-which-key-integration)
           )
    :config
    ;; pour mapper lsp-command-map
    (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)

    
    ;;pour de meilleurs performances
    ;; (setq gc-cons-threshold 100000000)
    ;; (setq read-process-output-max (* 1024 1024)) ;; 1mb
    ;; (setq lsp-idle-delay 0.500)
    ;; (setq lsp-log-io nil) ; if set to true can cause a performance hit

    ;; les options, voir le lien au dessus

    ;; (setq lsp-ui-doc-enable nil)
    ;; (setq lsp-ui-doc-show-with-cursor nil) ;; enlever les gros pavés qui se mettent à chaque fois
    )


#+end_src
****** DISABLED Lsp-ui (pour les infos qd curseur dessus)
CLOSED: [2022-03-07 Mon 16:03]
#+begin_src emacs-lisp 
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src
****** DISABLED Pour les fichiers sur le côté
CLOSED: [2022-03-07 Mon 16:03]
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp
    :config
    ;; pour syncro les dossier treemacs avec lsp
    ;;suis pour lsp
    ;; (lsp-treemacs-sync-mode 1)	 
    )
#+end_src

**** Completion et proposition
***** Voir les propositions avec company

Auto-complete existe aussi, mais pas aussi efficace.
****** Le moteur



#+begin_src emacs-lisp 

  (use-package company
    :after lsp-mode  ;;si ya lsp-mode
    :hook (lsp-mode . company-mode)  ;; au lieu de lsp, mettre c-mode, python mode etc
    :custom
    (company-minimum-prefix-length 1) ;;taille avant que le popup arrive
    (company-idle-delay 0.6);;temps avant qu'il pop
    ;;pour cycler dans les sélections
    (company-selection-wrap-around t)
    )  

  (with-eval-after-load 'company
    ;; réglemeent des touches, assez explicite, sur azerty :
    ;; k i s 
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    ;; (define-key company-active-map (kbd "s") #'company-select-next)
    ;; (define-key company-active-map (kbd "d") #'company-select-previous)
    (define-key company-active-map (kbd "C-s") #'company-select-next)
    (define-key company-active-map (kbd "C-d") #'company-select-previous)
    (define-key company-active-map (kbd "u") 'company-complete-selection)
    (define-key company-active-map (kbd "SPC") #'company-abort)
    ;; (add-to-list 'company-backends 'company-capf)



    
    ;; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      "Enable yasnippet for all backends.")

    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))

    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))

    )


#+end_src

****** DISABLED Pour l'esthétique de l'affichage
CLOSED: [2022-03-07 Mon 16:03]

#+begin_src emacs-lisp
    (use-package company-box
      :after company ;;logique
      :hook (company-mode . company-box-mode) ;;logique également
      )
#+end_src

***** DISABLED Candidats intelligent, se base sur la fréquence d'apparition
CLOSED: [2022-03-07 Mon 16:04]

#+begin_src emacs-lisp
  
  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode 1)
    ;; Remember candidate frequencies across sessions
    (prescient-persist-mode 1)
    )
  
  
#+end_src
***** Expand des choses préfaites

#+begin_src emacs-lisp

  (use-package yasnippet
    ;; si on veux les yas que en prog mode, décocher ça et cocher yas global mode
    ;; :hook (prog-mode . yas-minor-mode)
    :config
    (yas-reload-all)
    (yas-global-mode 1)
    (setq yas-triggers-in-field t) ;;appeler des snippets dans des snippets

    (define-key yas-minor-mode-map (kbd "<tab>") nil)
    (define-key yas-minor-mode-map (kbd "TAB") nil)
    (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
    )

  (use-package yasnippet-snippets ;; un pack de snippets
    :diminish)




#+end_src

