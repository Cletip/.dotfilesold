# Exercices Python sur les itérateurs, yield, yield from.
# Utilisez chaque itérateur pour produire des éléments. 

#------------------------------------------------------------------------------
def iter_syracuse(n):
    """Prend en entrée un entier n>0. Retourne un itérateur sur les éléments de
    la suite de syracuse lorsque le terme initial est n."""
    pass

#------------------------------------------------------------------------------
def iter_fibo():
    """Générateur des éléments de la suite de Fibonacci."""
    pass

#------------------------------------------------------------------------------
def look_and_say_iter(z, k=1):
    """La suite Look and say mise en oeuvre avec un itérateur."""
    pass

#------------------------------------------------------------------------------
def iter_tous_les_facteurs(mot):
    """Création d'un itérateur qui génére tous les facteurs non vides du mot
    donné en paramètre. Exemple : tous les facteurs de la chaine "abcd" sont :
    a ab abc abcd b bc bcd c cd d """ 
    pass


#------------------------------------------------------------------------------
def iter_toutes_les_listes_binaires(n):
    """Itérateur produisant toutes les listes de {0, 1} de taille n."""
    pass

#------------------------------------------------------------------------------
def iter_nombres_premiers(v=1):
    """Itérateur produisant tous les nombres premiers à partir de v."""
    import math  # Bibliothèque autorisée si besoin. 
    pass


#------------------------------------------------------------------------------
def iter_tous_les_sous_ensembles(ensemble):
    """Itérateur produisant tous les sous-ensembles possibles de l'ensemble
    donné en entrée."""
    pass
