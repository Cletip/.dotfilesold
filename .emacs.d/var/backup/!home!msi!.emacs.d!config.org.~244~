
#+TITLE:Mon config.org
#+TAGS: High(h) Medium Low 
#+TODO: ACTIVE | DISABLED


Ici, chargement des "différents modules" placé dans config. Suffit de changer le tag pour les activer ou pas.

High = Call a command in a terminal to install a dependencie
Medium = Call a command to install the dependencie in emacs
Low = Dependencies download automaticaly by emacs (juste say "yes
please let's go")

=NE PAS METTRE DE "" dans les titres !!!!!!=

=Ne pas mettre de setupfile dans ce fichier != merci :)

TODO = Not activate, but you can activate with +:tangle no+
CANCELLED = try and stop

TODO : query replace BEGIN par begin 

Vous pouver naviguer rapidement avec la commande =org-sidebar-tree-toggle=
Vous pouvez aller voir le site d'un package (pour avoir plus d'info) avec la commande =straight-visit-package-website=
=NE plus avoir un seul home msi=


* ACTIVE Fonction pour tangle

#+begin_src emacs-lisp


  (setq my-user-emacs-config-directory (concat my-user-emacs-directory "config/"))


  (defun my-tangle-a-file-of-config-org (file)
    "This function will write all source blocks from =config.org= into =config.el= that are ...
      - not marked as =tangle: no=
      - doesn't have the TODO state =DISABLED=
      - have a source-code of =emacs-lisp="
    (require 'org)
    (let* ((body-list ())
           (output-file (concat my-user-emacs-config-directory (concat file ".el")))
           (input-file (concat my-user-emacs-config-directory (concat file ".org")))
           (org-babel-default-header-args (org-babel-merge-params org-babel-default-header-args
                                                                  (list (cons :tangle output-file)))))
      (message "—————• Re-generating %s …" output-file)
      (save-restriction
        (save-excursion
          (org-babel-map-src-blocks input-file
            (let* (
                   (org_block_info (org-babel-get-src-block-info 'light))
                   ;;(block_name (nth 4 org_block_info))
                   (tfile (cdr (assq :tangle (nth 2 org_block_info))))
                   (match_for_TODO_keyword)
                   )
              (save-excursion
                (catch 'exit
                  ;;(when (string= "" block_name)
                  ;;  (message "Going to write block name: " block_name)
                  ;;  (add-to-list 'body-list (concat "message(\"" block_name "\")"));; adding a debug statement for named blocks
                  ;;  )
                  (org-back-to-heading t)
                  (when (looking-at org-outline-regexp)
                    (goto-char (1- (match-end 0))))
                  (when (looking-at (concat " +" org-todo-regexp "\\( +\\|[ \t]*$\\)"))
                    (setq match_for_TODO_keyword (match-string 1)))))
              (unless (or (string= "no" tfile)
                          (string= "DISABLED" match_for_TODO_keyword)
                          (not (string= "emacs-lisp" lang)))
                (add-to-list 'body-list (concat "\n\n;; #####################################################################################\n"
                                                "(message \"config • " (org-get-heading) " …\")\n\n")
                             )
                (add-to-list 'body-list body)
                ))))
        (with-temp-file output-file
          (insert ";; ============================================================\n")
          (insert ";; Don't edit this file, edit config.org' instead ...\n")
          (insert ";; Auto-generated at " (format-time-string current-date-time-format (current-time)) " on host " system-name "\n")
          (insert ";; ============================================================\n\n")
          (insert (apply 'concat (reverse body-list))))
        (message "—————• Wrote %s" output-file))))



  ;; when config.org is saved, re-generate config.el:
  (defun my-tangle-a-file-of-config-org-hook-func (file)
    (message "%s" file)
    (when (string= (concat file ".org") (buffer-name))
      (let (
            (orgfile (concat my-user-emacs-config-directory (concat file ".org")))
            (elfile (concat my-user-emacs-config-directory (concat file ".el")))
            )
        (my-tangle-a-file-of-config-org file)
        )))


  (my-tangle-a-file-of-config-org-hook-func "test")

  (defun export-and-load-and-hook (file)
    (let (
          ;;création des fichiers de base
          (orgfile (concat my-user-emacs-config-directory (concat file ".org")))
          (elfile (concat my-user-emacs-config-directory (concat file ".el")))
          (gc-cons-threshold most-positive-fixnum))

      ;; création du fichier si jamais ça marche pas
      (when (or (not (file-exists-p elfile))
                (file-newer-than-file-p orgfile elfile))
        (my-tangle-a-file-of-config-org file)
        )
      ;;chargement du fichier
      (load-file elfile)
      )
    ;; (add-hook 'after-save-hook '(my-tangle-a-file-of-config-org-hook-func-"file"))
    (add-hook 'after-save-hook (apply-partially #'my-tangle-a-file-of-config-org-hook-func file))
    )

  ;; (export-and-load-and-hook "test")

#+end_src

* ACTIVE Optimisation de base
#+begin_src emacs-lisp
  ;; (tool-bar-mode)
#+end_src

* ACTIVE Module

#+begin_src emacs-lisp
(org-babel-load-file (expand-file-name "/home/msi/.emacs.d/config/config.org"))
#+end_src

* ACTIVE Programmations
#+begin_src emacs-lisp
  ;; (tool-bar-mode)
#+end_src
* ACTIVE Test

#+begin_src emacs-lisp
    ;; (tool-bar-mode)
#+end_src

* ACTIVE Test 2

#+begin_src emacs-lisp
  ;; (tool-bar-mode)
#+end_src

