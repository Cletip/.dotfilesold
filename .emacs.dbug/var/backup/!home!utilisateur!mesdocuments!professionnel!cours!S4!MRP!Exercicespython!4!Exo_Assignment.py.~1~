import random
##Ordre : extract instance from file, puis generate random assignement, puis number of non stable couples


"""Each agency has a name (a string) and each candidate has a name (a string).
The same number n of agencies and candidates. 
An instance is:
    + A dictionary containing the choices of the agencies: 
    its keys are the names of agencies and the value of an entry 
    is the list of choices of this agency. 
    + A dictionary containing the choices of the candidates: 
    its keys are the names of candidates and the value of an entry 
    is the list of choices of this candidate.
Each list must be a permutation of the n elements of the choices.

An assignment is: 
    a candidate C for each agency A and 
    an agency A for each candidate C.
    This must be symmetric: A->C iff C->A.
An assignment is represented by two dictionaries. Each element (candidate or 
agency) is a key and its assigned element is a value. 
"""

#------------------------------------------------------------------------------
def extract_instance_from_file(file):
    """Get the instance in the file. Return n + a dictionary containing the
    choices of the n agencies + a dictionary containing the choices of the
    n candidates (return a 3-tuple).
    The format of a file is:
    n (alone on the first line)
    followed by n lists for agencies followed by n lists for candidates.
    Each line is X:Y1:Y2:...:Yn where X is agency or candidate and the Yi's are
    the choices of X. The separator is ':' with no space between elements."""
    dicoA = {}
    dicoC = {}
    L = []
    with open(file) as f:
        f.readline() ##enleer la premi√®re ligne
        i = 0
        for line in f:
            line = line[0:-1]
            L = line.split(":")
            if i < 3:
                dicoA[L[0]] = L[1:]
            else:
                dicoC[L[0]] = L[1:]
    return dicoA+dicoC
    pass


def extract_instance_from_file(file):
    """Get the instance in the file. Return n + a dictionary containing the
    choices of the n agencies + a dictionary containing the choices of the
    n candidates (return a 3-tuple).
    The format of a file is:
    n (alone on the first line)
    followed by n lists for agencies followed by n lists for candidates.
    Each line is X:Y1:Y2:...:Yn where X is agency or candidate and the Yi's are
    the choices of X. The separator is ':' with no space between elements."""
    agencies_choices = {}
    cand_choices = {}
    with open(file) as f:
        n = int(next(f))
        for x in range(n):
            line = next(f)
            line_list = line.strip().split(":")
            agencies_choices[line_list[0]] = line_list[1:]
        for x in range(n):
            line = next(f)
            line_list = line.strip().split(":")
            cand_choices[line_list[0]] = line_list[1:]
    return n, agencies_choices, cand_choices

(a,b,c) = extract_instance_from_file("/home/utilisateur/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/4/affectation.txt")


#------------------------------------------------------------------------------
def is_coherent(choices_agencies, choices_candidates):
    """Function that verifies if the two dictionaries are coherent i.e. if
     each value is a list containing each appropriated element exactly once.
      Returns True if it is the case and raises an
      Exception('Incorrect choices') otherwise."""
    pass


#------------------------------------------------------------------------------
def generate_random_instance(n, version_number=1):
    """Generate a random instance with n agencies, n candidates and put the
    result in a file that is named GSEntries_Rand_{n}_{version_number}
    (for example GSEntries_Rand_10_3) to distinguish different random files."""



    pass


#------------------------------------------------------------------------------
def is_assignment_symmetric(agen_assignment, candidate_assignment):
    """Boolean function that returns True if the assignments are coherent,
    symmetric."""
    pass


#------------------------------------------------------------------------------
def number_of_non_stable_couples(agencies_assign, candidates_assign,
                                 agencies_choices, candidates_choices):
    """Returns the number of non stable couples in the assignment."""
    total = 0
    for key in agencies_choices.keys():
        for value_of_agencies_with_key in agencies_choices[key]:
            for candidate_choice_dans_liste in candidates_choices[value_of_agencies_with_key]:
                coupleStable = True
                print(candidate_choice_dans_liste)
                if candidate_choice_dans_liste == candidates_assign[value_of_agencies_with_key]:
                    coupleStable = False
                    break
                if not(coupleStable):
                    total += 1
    return total
    


#------------------------------------------------------------------------------
##moi
def generate_random_assignment(agencies_choices, candidates_choices):
    """Returns a random assignment as a 2 tuple of dictionaries."""
    affectA = {}
    affectB = {}
    temp = []

    for i, _ in agencies_choices.items():
        temp.append(i)
    for i in range(len(temp)):
        print(temp[random.randint(0, i)])
    return affectA, affectB
    pass


##prof
def generate_random_assignment(agencies_choices, candidates_choices):
    """Returns a random assignment as a 2 tuple of dictionaries."""
    listofcandidates = list(candidates_choices.keys())
    random.shuffle(listofcandidates)
    agencies_assignement = {a : c for a, c in zip(agencies_choices.key(),listofcandidates)}
    candidatesAssignement = {c : a for a, c in agencies_choices.items()}
    return agencies_assignement, candidatesAssignement
    pass

##mathieu
def generate_random_assignment(agencies_choices, candidates_choices):
    """Returns a random assignment as a 2 tuple of dictionaries."""
    assigne_agent = {}
    assigne_comp = {}
    li = []
    for i, _ in candidates_choices.items():
        li.append(i) 
    for i in agencies_choices:
        valeur = random.randint(0, len(li)-1)
        assigne_agent[i] = li[valeur]
        assigne_comp[li[valeur]] = i
        li.pop(valeur)
    return assigne_agent, assigne_comp

a, b, c= extract_instance_from_file("/home/utilisateur/mesdocuments/professionnel/cours/S4/MRP/Exercicespython/4/affectation.txt")
d, e = generate_random_assignment(b, c)


print(number_of_non_stable_couples(d, e, b, c))
print(d)