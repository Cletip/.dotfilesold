(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[nil nil #3=(headline (:raw-value #1="Les choses à configurer moi-même au début sont à mettre ici :" :begin 829 :end 10038 :pre-blank 0 :contents-begin 893 :contents-end 10038 :robust-begin 895 :robust-end 10036 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 829 :title #1# :mode nil :granularity element :cached t :parent #13=(org-data (:begin 1 :contents-begin 2 :contents-end 16836 :end 16838 :robust-begin 4 :robust-end 16834 :post-blank 2 :post-affiliated 1 :path "/home/utilisateur/.emacs.d/config.org" :mode org-data :CATEGORY "config" :cached t :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #7=(headline (:raw-value #2="Les choses à faire soit même" :begin 1531 :end 10038 :pre-blank 0 :contents-begin 1563 :contents-end 10038 :robust-begin 1565 :robust-end 10036 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1531 :title #2# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #35=(headline (:raw-value #4="Les dépendances dans ce script (a éclater): " :begin 893 :end 1531 :pre-blank 0 :contents-begin 941 :contents-end 1530 :robust-begin 1007 :robust-end 1528 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 893 :ID "b87b4251-35cb-4950-9c8e-fbdb5ae01757" :title #4# :mode section :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[nil nil #37=(headline (:raw-value #5="Les variables des chemins des fichiers, et c'est tout (normalement si je rerespect bien l'organisation de mes fichiers)" :begin 1611 :end 4259 :pre-blank 0 :contents-begin 1736 :contents-end 4258 :robust-begin 1738 :robust-end 4256 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1611 :title #5# :mode section :granularity element :cached t :parent #10=(headline (:raw-value #6="Où sont les fichiers org + mes documents ?" :begin 1563 :end 9953 :pre-blank 0 :contents-begin 1611 :contents-end 9953 :robust-begin 1613 :robust-end 9951 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1563 :title #6# :mode section :granularity element :cached t :parent #7# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #39=(headline (:raw-value #8="Définition de la fonction" :begin 5238 :end 6982 :pre-blank 1 :contents-begin 5271 :contents-end 6979 :robust-begin 5273 :robust-end 6977 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 3 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5238 :title #8# :mode nil :granularity element :cached t :parent #11=(headline (:raw-value #9="Mise en place de tous les fichiers org dans un certains dossiers" :begin 4259 :end 9953 :pre-blank 0 :contents-begin 4329 :contents-end 9953 :robust-begin 4395 :robust-end 9951 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4259 :ID "1cb19f92-8ccc-490d-aa07-9750288efb9d" :title #9# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #11# 0] #10# 0] [[[[nil nil #43=(headline #12=(:raw-value "Bug connu :" :begin 10038 :end 10242 :pre-blank 1 :contents-begin 10053 :contents-end 10237 :robust-begin 10055 :robust-end 10235 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 3 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 10038 :title (#("Bug connu :" 0 11 (:parent (headline #12#)))) :mode nil :granularity nil :parent #13# :cached t :org-element--cache-sync-key nil)) 0] [nil nil #47=(headline (:raw-value #14="Fonction pour tangle la suite, =indispensable= !" :begin 10259 :end 14517 :pre-blank 1 :contents-begin 10319 :contents-end 14516 :robust-begin 10321 :robust-end 14514 :level 2 :priority nil :tags nil :todo-keyword #("ACTIVE" 0 6 (wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #17=#("*" 0 1 (face org-indent)) face (org-todo org-todo org-level-2) fontified t)) :todo-type todo :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 10259 :title #14# :mode section :granularity element :cached t :parent #16=(headline (:raw-value #15="Emacs Perfect" :begin 10242 :end 15293 :pre-blank 1 :contents-begin 10259 :contents-end 15292 :robust-begin 10261 :robust-end 15290 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 10242 :title #15# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #13#)) :org-element--cache-sync-key nil)) 0] #16# 0] [[nil nil #51=(headline (:raw-value #18="Optimisation de base" :begin 14611 :end 14726 :pre-blank 0 :contents-begin 14642 :contents-end 14726 :robust-begin 14644 :robust-end 14724 :level 2 :priority nil :tags nil :todo-keyword #("ACTIVE" 0 6 (wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #17# fontified nil)) :todo-type todo :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 14611 :title #18# :mode nil :granularity element :cached t :parent #16# :org-element--cache-sync-key nil)) 0] [nil nil #54=(headline (:raw-value #19="Org-mode" :begin 14878 :end 14974 :pre-blank 1 :contents-begin 14898 :contents-end 14973 :robust-begin 14900 :robust-end 14971 :level 2 :priority nil :tags nil :todo-keyword #("ACTIVE" 0 6 (wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #17# fontified nil)) :todo-type todo :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 14878 :title #19# :mode nil :granularity element :cached t :parent #16# :org-element--cache-sync-key nil)) 0] #53=(headline (:raw-value #20="Optimisation de base, mais avec des dépendances" :begin 14726 :end 14878 :pre-blank 1 :contents-begin 14785 :contents-end 14877 :robust-begin 14787 :robust-end 14875 :level 2 :priority nil :tags nil :todo-keyword #("ACTIVE" 0 6 (wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #17# fontified nil)) :todo-type todo :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 14726 :title #20# :mode nil :granularity element :cached t :parent #16# :org-element--cache-sync-key nil)) 0] #49=(headline (:raw-value #21="Raccourcis" :begin 14517 :end 14611 :pre-blank 0 :contents-begin 14538 :contents-end 14611 :robust-begin 14540 :robust-end 14609 :level 2 :priority nil :tags nil :todo-keyword #("ACTIVE" 0 6 (wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #17# fontified nil)) :todo-type todo :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 14517 :title #21# :mode nil :granularity element :cached t :parent #16# :org-element--cache-sync-key nil)) 0] [[[nil nil #59=(headline (:raw-value #22="Integration" :begin 15109 :end 15165 :pre-blank 0 :contents-begin 15133 :contents-end 15164 :robust-begin nil :robust-end nil :level 2 :priority nil :tags nil :todo-keyword #("DISABLED" 0 8 (wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #17# fontified nil)) :todo-type done :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15109 :closed (timestamp (:type inactive :raw-value "[2022-03-02 Wed 09:58]" :year-start 2022 :month-start 3 :day-start 2 :hour-start 9 :minute-start 58 :year-end 2022 :month-end 3 :day-end 2 :hour-end 9 :minute-end 58 :begin 15144 :end 15166 :post-blank 0)) :title #22# :mode nil :granularity element :cached t :parent #16# :org-element--cache-sync-key nil)) 0] [nil nil #27=(headline (:raw-value #23="Les choses à ajouter (un jour ou pas) :" :begin 15293 :end 16838 :pre-blank 1 :contents-begin 15336 :contents-end 16836 :robust-begin 15338 :robust-end 16834 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15293 :title #23# :mode nil :granularity element :cached t :parent #13# :org-element--cache-sync-key nil)) 0] #58=(headline (:raw-value #24="Les choses à try" :begin 15165 :end 15293 :pre-blank 0 :contents-begin 15194 :contents-end 15292 :robust-begin 15225 :robust-end 15290 :level 2 :priority nil :tags nil :todo-keyword #("DISABLED" 0 8 (wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #17# fontified nil)) :todo-type done :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15165 :closed (timestamp (:type inactive :raw-value "[2022-03-02 Wed 09:58]" :year-start 2022 :month-start 3 :day-start 2 :hour-start 9 :minute-start 58 :year-end 2022 :month-end 3 :day-end 2 :hour-end 9 :minute-end 58 :begin 15205 :end 15227 :post-blank 0)) :title #24# :mode nil :granularity element :cached t :parent #16# :org-element--cache-sync-key nil)) 0] [[nil nil #62=(headline (:raw-value #25="Nouvelles fonctionnalité" :begin 15397 :end 16674 :pre-blank 0 :contents-begin 15427 :contents-end 16674 :robust-begin 15429 :robust-end 16672 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15397 :title #25# :mode section :granularity element :cached t :parent #30=(headline (:raw-value #26="Choses général à implémenter dans emacs pas encore faîtes" :begin 15336 :end 16838 :pre-blank 0 :contents-begin 15397 :contents-end 16836 :robust-begin 15399 :robust-end 16834 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15336 :title #26# :mode section :granularity element :cached t :parent #27# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #63=(headline (:raw-value #28="TODO pour programmer en lisp" :begin 16695 :end 16838 :pre-blank 1 :contents-begin 16731 :contents-end 16836 :robust-begin 16733 :robust-end 16834 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16695 :title #28# :mode section :granularity element :cached t :parent #31=(headline (:raw-value #29="Pour emacs lisp" :begin 16674 :end 16838 :pre-blank 0 :contents-begin 16695 :contents-end 16836 :robust-begin 16697 :robust-end 16834 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16674 :title #29# :mode nil :granularity element :cached t :parent #30# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #31# 0] #30# 0] #56=(headline (:raw-value #32="Programmations" :begin 14974 :end 15109 :pre-blank 0 :contents-begin 15001 :contents-end 15108 :robust-begin 15032 :robust-end 15106 :level 2 :priority nil :tags nil :todo-keyword #("DISABLED" 0 8 (wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)) line-prefix #17# fontified nil)) :todo-type done :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 14974 :closed (timestamp (:type inactive :raw-value "[2022-03-02 Wed 09:58]" :year-start 2022 :month-start 3 :day-start 2 :hour-start 9 :minute-start 58 :year-end 2022 :month-end 3 :day-end 2 :hour-end 9 :minute-end 58 :begin 15012 :end 15034 :post-blank 0)) :title #32# :mode nil :granularity element :cached t :parent #16# :org-element--cache-sync-key nil)) 0] #41=(headline (:raw-value #33="Mes fichiers org" :begin 6982 :end 9953 :pre-blank 2 :contents-begin 7007 :contents-end 9953 :robust-begin 7009 :robust-end 9951 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6982 :title #33# :mode nil :granularity element :cached t :parent #11# :org-element--cache-sync-key nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[nil nil #13# 0] [nil nil (paragraph (:begin 2 :end 123 :contents-begin 2 :contents-end 122 :post-blank 1 :post-affiliated 2 :mode top-comment :granularity element :cached t :parent #34=(section (:begin 2 :end 829 :contents-begin 2 :contents-end 827 :robust-begin 2 :robust-end 825 :post-blank 2 :post-affiliated 2 :mode first-section :granularity element :cached t :parent #13# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #34# 0] [[nil nil (keyword (:key "TAGS" :value "High(h) Medium Low" :begin 146 :end 174 :post-blank 0 :post-affiliated 146 :mode nil :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) 0] [nil nil (paragraph (:begin 202 :end 408 :contents-begin 202 :contents-end 407 :post-blank 1 :post-affiliated 202 :mode nil :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) 0] (keyword (:key "TODO" :value "ACTIVE | DISABLED" :begin 174 :end 202 :post-blank 2 :post-affiliated 174 :mode nil :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) 0] (keyword (:key "TITLE" :value "Mon config.org" :begin 123 :end 146 :post-blank 0 :post-affiliated 123 :mode nil :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) 0] [[nil nil #3# 0] nil #35# -1] (paragraph (:begin 408 :end 554 :contents-begin 408 :contents-end 551 :post-blank 3 :post-affiliated 408 :mode nil :granularity element :cached t :parent #34# :org-element--cache-sync-key nil)) -1] [[[[nil nil (property-drawer (:begin 941 :end 1009 :contents-begin 954 :contents-end 1002 :post-blank 1 :post-affiliated 941 :mode planning :granularity element :cached t :parent #36=(section (:begin 941 :end 1531 :contents-begin 941 :contents-end 1530 :robust-begin 941 :robust-end 1528 :post-blank 1 :post-affiliated 941 :mode section :granularity element :cached t :parent #35# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil (paragraph (:begin 1009 :end 1074 :contents-begin 1009 :contents-end 1072 :post-blank 2 :post-affiliated 1009 :mode nil :granularity element :cached t :parent #36# :org-element--cache-sync-key nil)) -1] [nil nil (src-block (:language "sh" :switches nil :parameters nil :begin 1108 :end 1531 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  #! /usr/bin/bash\12\12  echo \"salut\" #installer git\12  #installer emacs etc\12  sudo apt install\12  python3\11\11\11          # grammalect\12  hunspell\11\11\11\11  # correcteur orthographique\12  grep\11\11\11\11\11  # pour les recherches (consult-grep notamment)\12  xsel yad\11\11\11\11  # org-popup\12  keepassxc #pour keepass-emacs (logique)\12  xclip xdotool xprop xwininfo #emacs-everywhere\12  sqlite3 fzf ripgrep silversearcher-ag # etc\12\12" :post-blank 1 :post-affiliated 1108 :mode nil :granularity element :cached t :parent #36# :org-element--cache-sync-key nil)) 0] (plain-list (:type unordered :begin 1074 :end 1108 :contents-begin 1074 :contents-end 1107 :structure ((1074 0 "- " nil nil nil 1107)) :post-blank 1 :post-affiliated 1074 :mode nil :granularity element :cached t :parent #36# :org-element--cache-sync-key nil)) -1] [[[nil nil #10# 0] [nil nil #38=(section (:begin 1736 :end 4259 :contents-begin 1736 :contents-end 4258 :robust-begin 1736 :robust-end 4256 :post-blank 1 :post-affiliated 1736 :mode section :granularity element :cached t :parent #37# :org-element--cache-sync-key nil)) 0] #37# 0] [nil nil (paragraph (:begin 2004 :end 2052 :contents-begin 2004 :contents-end 2051 :post-blank 1 :post-affiliated 2004 :mode nil :granularity element :cached t :parent #38# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 1736 :end 2004 :contents-begin 1736 :contents-end 2003 :post-blank 1 :post-affiliated 1736 :mode planning :granularity element :cached t :parent #38# :org-element--cache-sync-key nil)) -1] #7# 0] #36# 0] [[[[nil nil (paragraph (:begin 2178 :end 2384 :contents-begin 2178 :contents-end 2383 :post-blank 1 :post-affiliated 2178 :mode nil :granularity element :cached t :parent #38# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 2431 :end 4259 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  \12\12  ;;ça je m'en sert pas ?\12  ;;où est ma config\12  (setq my-user-emacs-configuration (concat my-user-emacs-directory \"config.org\"))\12  ;; besoin d'une \"liste \" pour faire certaines choses\12  (setq my-user-emacs-configuration-list (list my-user-emacs-configuration))\12\12\12  (if (file-exists-p \"~/mesdocuments/\")\12      (progn \12        (setq mesdocuments-directory \"~/mesdocuments/\");; pour que tous les liens fonctionnes\12        )\12    (progn\12      ;; (setq mesdocuments-directory nil)\12      ;;quand c'est vide ça retourne nil\12      )\12    )\12  ;;pour que les captures fonctionne\12  (if (file-exists-p \"~/sharedDirectoryPrivate/notes\")\12      (progn \12        (setq org-directory \"~/sharedDirectoryPrivate/notes/\")\12        )\12    (progn \12      ;;quand c'est vide ça retourne nil\12      )\12    )\12\12  ;;est ce que j'ai un dossier partagé perso ? \12  (if (file-exists-p \"~/sharedDirectoryPrivate\")\12      (progn \12        (setq shared-directory-private \"~/sharedDirectoryPrivate/\")\12        )\12    (progn \12      ;;quand c'est vide ça retourne nil\12      )\12    )\12\12\12  ;;où sont mes fichiers org accessible sur mon téléphone ?\12  (if (and (boundp 'shared-directory-private) (file-exists-p (concat shared-directory-private \"notes/org/orgzly\")))\12      (progn \12        (setq orgzly-directory (concat shared-directory-private \"notes/org/orgzly/\"))\12        )\12    (progn \12      ;;quand c'est vide ça retourne nil\12      )\12    )\12\12\12  ;;est ce que ma braindump existe ?\12  (if (and (boundp 'org-directory) (file-exists-p (concat org-directory \"zettelkasten/\")))\12      (progn \12        (setq org-roam-directory (concat org-directory \"zettelkasten/\"))\12        )\12    (progn\12      (setq org-roam-directory nil)\12      ;;quand c'est vide ça retourne nil\12      )\12    )\12\12  ;; (setq org-roam-directory (concat org-directory \"zettelkasten/\"))\12" :post-blank 1 :post-affiliated 2431 :mode nil :granularity element :cached t :parent #38# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 2384 :end 2431 :contents-begin 2384 :contents-end 2430 :post-blank 1 :post-affiliated 2384 :mode nil :granularity element :cached t :parent #38# :org-element--cache-sync-key nil)) 0] [nil nil (section (:begin 4329 :end 5238 :contents-begin 4329 :contents-end 5237 :robust-begin 4329 :robust-end 5235 :post-blank 1 :post-affiliated 4329 :mode section :granularity element :cached t :parent #11# :org-element--cache-sync-key nil)) 0] #11# -1] [[[nil nil #40=(section (:begin 5271 :end 6982 :contents-begin 5271 :contents-end 6979 :robust-begin 5271 :robust-end 6977 :post-blank 3 :post-affiliated 5271 :mode section :granularity element :cached t :parent #39# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 5363 :end 6982 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12\12  ;; (setq max-specpdl-size 50)  ; default is 1000, reduce the backtrace level\12  (setq debug-on-error t)  \12\12    ;; recursively find .org files in provided directory\12    ;; modified from an Emacs Lisp Intro example\12    ;;\12    (defun sa-find-org-file-recursively (&optional directory filext)\12      \"Return .org and .org_archive files recursively from DIRECTORY.\12                       If FILEXT is provided, return files with extension FILEXT instead.\"\12      (interactive \"DDirectory: \")\12      (let* (org-file-list\12             (case-fold-search t)         ; filesystems are case sensitive\12              (file-name-regex \"^[^.#].*\") ; exclude dot, autosave, and backupfiles\12             ;; (file-name-regex \"^[^#].*\") ; pour trouver les fichiers cacher, ne marche pas\12             (filext (or filext \"org$\\\\\\|org_archive\"));;pas prendre les archives\12             (fileregex (format \"%s\\\\.\\\\(%s$\\\\)\" file-name-regex filext))\12             (cur-dir-list (directory-files directory t file-name-regex)))\12        ;; loop over directory listing\12        (dolist (file-or-dir cur-dir-list org-file-list) ; returns org-file-list\12          (cond\12           ((file-regular-p file-or-dir)             ; regular files\12            (if (string-match fileregex file-or-dir) ; org files\12                (add-to-list 'org-file-list file-or-dir)))\12           ((file-directory-p file-or-dir)\12            (dolist (org-file (sa-find-org-file-recursively file-or-dir filext)\12                              org-file-list) ; add files found to result\12              (add-to-list 'org-file-list org-file)))))))\12\12" :post-blank 3 :post-affiliated 5363 :mode nil :granularity element :cached t :parent #40# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 5271 :end 5363 :contents-begin 5271 :contents-end 5362 :post-blank 1 :post-affiliated 5271 :mode planning :granularity element :cached t :parent #40# :org-element--cache-sync-key nil)) 0] [nil nil #42=(section (:begin 7007 :end 9953 :contents-begin 7007 :contents-end 9953 :robust-begin 7007 :robust-end 9951 :post-blank 0 :post-affiliated 7007 :mode section :granularity element :cached t :parent #41# :org-element--cache-sync-key nil)) 0] #41# -1] #39# 0] (paragraph (:begin 2052 :end 2178 :contents-begin 2052 :contents-end 2177 :post-blank 1 :post-affiliated 2052 :mode nil :granularity element :cached t :parent #38# :org-element--cache-sync-key nil)) -1] [[[[[nil nil (paragraph (:begin 7068 :end 7240 :contents-begin 7068 :contents-end 7236 :post-blank 4 :post-affiliated 7068 :mode nil :granularity element :cached t :parent #42# :org-element--cache-sync-key nil)) 0] [nil nil #43# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7240 :end 9953 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  ;; faire attention au custom variable dans custom.el, j'ai eu un gros \"nil\" qui m'a tout déréglé pour cette variable\12\12  ;;j'hésite à mettre également mes fichiers roam dans mon agenda. Pour l'instant, non\12  ;;pour éviter un bug si j'ai pas mes documents\12\12\12  (if (boundp 'mesdocuments-directory) ;; condition par pas qu'il y est de bug\12      (progn (setq ;;cas du oui\12              mesdocuments-directory-all-org-files ;; qu'elle variable je définie ? X-directory + all-org-files\12              (append (sa-find-org-file-recursively\12                       mesdocuments-directory \"org\")\12                      )))\12    (progn \12      (setq mesdocuments-directory-all-org-files nil) ;;sinon je mets X-directory + all-org-files à nul\12      )\12    )\12\12  (if (boundp 'org-directory) ;; condition par pas qu'il y est de bug\12      (progn (setq ;;cas du oui\12              org-directory-all-org-files ;; qu'elle variable je définie ? X-directory + all-org-files\12              (append (sa-find-org-file-recursively\12                       org-directory \"org\")\12                      )))\12    (progn \12      (setq org-directory-all-org-files nil) ;;sinon je mets X-directory + all-org-files à nul\12      )\12    )\12\12\12  (if (and (boundp 'shared-directory-private) shared-directory-private) ;; condition par pas qu'il y est de bug\12      (progn (setq ;;cas du oui\12              shared-directory-private-all-org-files ;; qu'elle variable je définie ? X-directory + all-org-files\12              (append (sa-find-org-file-recursively\12                       shared-directory-private \"org\")\12                      )))\12    (progn \12      (setq shared-directory-private nil) ;;sinon je mets X-directory + all-org-files à nul\12      )\12    )\12\12  (if (and (boundp 'org-directory) org-directory) ;; condition par pas qu'il y est de bug\12      (progn (setq ;;cas du oui\12              orgzly-directory-all-org-files ;; qu'elle variable je définie ? X-directory + all-org-files\12              (append (sa-find-org-file-recursively\12                       orgzly-directory \"org\")\12                      )))\12    (progn \12      (setq orgzly-directory-all-org-files nil) ;;sinon je mets X-directory + all-org-files à nul\12      )\12    )\12\12  (if (and (boundp 'org-roam-directory) org-roam-directory) ;; condition par pas qu'il y est de bug\12      (progn (setq ;;cas du oui\12              org-roam-directory-all-org-files ;; qu'elle variable je définie ? X-directory + all-org-files\12              (append (sa-find-org-file-recursively\12                       org-roam-directory \"org\")\12                      )))\12    (progn \12      (setq org-roam-directory-all-org-files nil) ;;sinon je mets X-directory + all-org-files à nul\12      )\12    )\12\12  \12\12" :post-blank 0 :post-affiliated 7240 :mode nil :granularity element :cached t :parent #42# :org-element--cache-sync-key nil)) 0] [nil nil #46=(plain-list (:type ordered :begin 10053 :end 10242 :contents-begin 10053 :contents-end 10237 :structure #45=((10053 0 "1. " nil nil nil 10233) (10233 0 "2. " nil nil nil 10237)) :post-blank 3 :post-affiliated 10053 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #44=(section (:begin 10053 :end 10242 :contents-begin 10053 :contents-end 10237 :robust-begin 10053 :robust-end 10235 :post-blank 3 :post-affiliated 10053 :mode section :granularity element :cached t :parent #43# :org-element--cache-sync-key nil)))) 0] #44# -1] [[[nil nil (paragraph (:begin 10056 :end 10156 :contents-begin 10056 :contents-end 10156 :post-blank 0 :post-affiliated 10056 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #48=(item (:bullet "1. " :begin 10053 :end 10233 :contents-begin 10056 :contents-end 10233 :checkbox nil :counter nil :structure #45# :pre-blank 0 :post-blank 0 :post-affiliated 10053 :tag nil :mode item :granularity element :org-element--cache-sync-key nil :cached t :parent #46#)))) 0] [[nil nil #16# 0] nil #47# -1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 10156 :end 10233 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "     (setq org-element-use-cache nil)\12" :post-blank 0 :post-affiliated 10156 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #48#)) 1] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 10319 :end 14517 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  ;; où est le dossier des fichiers de config ?\12  (setq my-user-emacs-config-directory (concat my-user-emacs-directory \"config/\"))\12\12  (defun my-tangle-a-file-of-config-org (file)\12    \"This function will write all source blocks from =config.org= into =config.el= that are ...\12      - not marked as =tangle: no=\12      - doesn't have the TODO state =DISABLED=\12      - have a source-code of =emacs-lisp=\"\12    (require 'org)\12    (let* ((body-list ())\12           (output-file (concat my-user-emacs-config-directory (concat file \".el\")))\12           (input-file (concat my-user-emacs-config-directory (concat file \".org\")))\12           (org-babel-default-header-args (org-babel-merge-params org-babel-default-header-args\12                                                                  (list (cons :tangle output-file)))))\12      (message \"—————• Re-generating %s …\" output-file)\12      (save-restriction\12        (save-excursion\12          (org-babel-map-src-blocks input-file\12            (let* (\12                   (org_block_info (org-babel-get-src-block-info 'light))\12                   ;;(block_name (nth 4 org_block_info))\12                   (tfile (cdr (assq :tangle (nth 2 org_block_info))))\12                   (match_for_TODO_keyword)\12                   )\12              (save-excursion\12                (catch 'exit\12                  ;;(when (string= \"\" block_name)\12                  ;;  (message \"Going to write block name: \" block_name)\12                  ;;  (add-to-list 'body-list (concat \"message(\\\"\" block_name \"\\\")\"));; adding a debug statement for named blocks\12                  ;;  )\12                  (org-back-to-heading t)\12                  (when (looking-at org-outline-regexp)\12                    (goto-char (1- (match-end 0))))\12                  (when (looking-at (concat \" +\" org-todo-regexp \"\\\\( +\\\\|[ \\t]*$\\\\)\"))\12                    (setq match_for_TODO_keyword (match-string 1)))))\12              (unless (or (string= \"no\" tfile)\12                          (string= \"DISABLED\" match_for_TODO_keyword)\12                          (not (string= \"emacs-lisp\" lang)))\12                (add-to-list 'body-list (concat \"\\n\\n;; #####################################################################################\\n\"\12                                                \"(message \\\"config • \" (org-get-heading) \" …\\\")\\n\\n\")\12                             )\12                (add-to-list 'body-list body)\12                ))))\12        (with-temp-file output-file\12          (insert \";; ============================================================\\n\")\12          (insert \";; Don't edit this file, edit config.org' instead ...\\n\")\12          (insert \";; Auto-generated at \" (format-time-string current-date-time-format (current-time)) \" on host \" system-name \"\\n\")\12          (insert \";; ============================================================\\n\\n\")\12          (insert (apply 'concat (reverse body-list))))\12        (message \"—————• Wrote %s\" output-file))))\12\12  ;; when config.org is saved, re-generate the X.el:\12  (defun my-tangle-a-file-of-config-org-hook-func (file)\12    (message \"%s\" file)\12    (when (string= (concat file \".org\") (buffer-name))\12      (let (\12            (orgfile (concat my-user-emacs-config-directory (concat file \".org\")))\12            (elfile (concat my-user-emacs-config-directory (concat file \".el\")))\12            )\12        (my-tangle-a-file-of-config-org file)\12        )))\12  \12  (defun export-and-load-and-hook (file)\12    (let (\12          ;;création des fichiers de base\12          (orgfile (concat my-user-emacs-config-directory (concat file \".org\")))\12          (elfile (concat my-user-emacs-config-directory (concat file \".el\")))\12          (gc-cons-threshold most-positive-fixnum))\12\12      ;; création du fichier si jamais ça marche pas\12      (when (or (not (file-exists-p elfile))\12                (file-newer-than-file-p orgfile elfile))\12        (my-tangle-a-file-of-config-org file)\12        )\12      ;;chargement du fichier\12      (load-file elfile)\12      )\12    ;; (add-hook 'after-save-hook '(my-tangle-a-file-of-config-org-hook-func-\"file\"))\12    (add-hook 'after-save-hook (apply-partially #'my-tangle-a-file-of-config-org-hook-func file))\12    )\12\12" :post-blank 1 :post-affiliated 10319 :mode planning :granularity element :cached t :parent #50=(section (:begin 10319 :end 14517 :contents-begin 10319 :contents-end 14516 :robust-begin 10319 :robust-end 14514 :post-blank 1 :post-affiliated 10319 :mode section :granularity element :cached t :parent #47# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #67=(section (:begin 14538 :end 14611 :contents-begin 14538 :contents-end 14611 :robust-begin 14538 :robust-end 14609 :post-blank 0 :post-affiliated 14538 :mode section :granularity element :cached t :parent #49# :org-element--cache-sync-key nil)) 0] #49# 0] #50# -1] #48# 1] [[[[[nil nil #51# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 14642 :end 14726 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12(export-and-load-and-hook \"basicOptimisations\")\12 \12" :post-blank 0 :post-affiliated 14642 :mode planning :granularity element :cached t :parent #52=(section (:begin 14642 :end 14726 :contents-begin 14642 :contents-end 14726 :robust-begin 14642 :robust-end 14724 :post-blank 0 :post-affiliated 14642 :mode section :granularity element :cached t :parent #51# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #52# 0] [[nil nil #55=(section (:begin 14785 :end 14878 :contents-begin 14785 :contents-end 14877 :robust-begin 14785 :robust-end 14875 :post-blank 1 :post-affiliated 14785 :mode section :granularity element :cached t :parent #53# :org-element--cache-sync-key nil)) 0] [nil nil #54# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 14785 :end 14878 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (export-and-load-and-hook \"basicOptimisationsAvecDep\")\12\12" :post-blank 1 :post-affiliated 14785 :mode planning :granularity element :cached t :parent #55# :org-element--cache-sync-key nil)) 0] #53# 0] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 14898 :end 14974 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  (export-and-load-and-hook \"org-mode\")\12\12" :post-blank 1 :post-affiliated 14898 :mode planning :granularity element :cached t :parent #60=(section (:begin 14898 :end 14974 :contents-begin 14898 :contents-end 14973 :robust-begin 14898 :robust-end 14971 :post-blank 1 :post-affiliated 14898 :mode section :granularity element :cached t :parent #54# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #57=(section (:begin 15001 :end 15109 :contents-begin 15001 :contents-end 15108 :robust-begin 15001 :robust-end 15106 :post-blank 1 :post-affiliated 15001 :mode section :granularity element :cached t :parent #56# :org-element--cache-sync-key nil)) 0] #56# 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15032 :end 15109 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(export-and-load-and-hook \"programmation\")\12" :post-blank 1 :post-affiliated 15032 :mode property-drawer :granularity element :cached t :parent #57# :org-element--cache-sync-key nil)) 0] [nil nil #58# 0] #59# 0] (planning (:closed (timestamp (:type inactive :raw-value "[2022-03-02 Wed 09:58]" :year-start 2022 :month-start 3 :day-start 2 :hour-start 9 :minute-start 58 :year-end 2022 :month-end 3 :day-end 2 :hour-end 9 :minute-end 58 :begin 15012 :end 15034 :post-blank 0)) :deadline nil :scheduled nil :begin 15001 :end 15032 :post-blank 0 :post-affiliated 15001 :mode planning :granularity element :cached t :parent #57# :org-element--cache-sync-key nil)) 0] #60# 0] [[[nil nil (planning (:closed (timestamp (:type inactive :raw-value "[2022-03-02 Wed 09:58]" :year-start 2022 :month-start 3 :day-start 2 :hour-start 9 :minute-start 58 :year-end 2022 :month-end 3 :day-end 2 :hour-end 9 :minute-end 58 :begin 15205 :end 15227 :post-blank 0)) :deadline nil :scheduled nil :begin 15194 :end 15226 :post-blank 1 :post-affiliated 15194 :mode planning :granularity element :cached t :parent #61=(section (:begin 15194 :end 15293 :contents-begin 15194 :contents-end 15292 :robust-begin 15194 :robust-end 15290 :post-blank 1 :post-affiliated 15194 :mode section :granularity element :cached t :parent #58# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #27# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15226 :end 15293 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(export-and-load-and-hook \"try\")\12" :post-blank 1 :post-affiliated 15226 :mode property-drawer :granularity element :cached t :parent #61# :org-element--cache-sync-key nil)) 0] [[[nil nil #62# 0] [nil nil #63# 0] #31# 0] [[nil nil #65=(plain-list (:type unordered :begin 16731 :end 16838 :contents-begin 16731 :contents-end 16836 :structure #64=((16731 0 "- " nil nil nil 16789) (16789 0 "- " nil nil nil 16836)) :post-blank 2 :post-affiliated 16731 :mode planning :granularity element :cached t :parent #66=(section (:begin 16731 :end 16838 :contents-begin 16731 :contents-end 16836 :robust-begin 16731 :robust-end 16834 :post-blank 2 :post-affiliated 16731 :mode section :granularity element :cached t :parent #63# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil (item (:bullet "- " :begin 16789 :end 16836 :contents-begin 16791 :contents-end 16836 :checkbox nil :counter nil :structure #64# :pre-blank 0 :post-blank 0 :post-affiliated 16789 :tag nil :mode item :granularity element :cached t :parent #65# :org-element--cache-sync-key nil)) 0] (item (:bullet "- " :begin 16731 :end 16789 :contents-begin 16733 :contents-end 16789 :checkbox nil :counter nil :structure #64# :pre-blank 0 :post-blank 0 :post-affiliated 16731 :tag nil :mode item :granularity element :cached t :parent #65# :org-element--cache-sync-key nil)) 0] #66# 0] #30# 1] #61# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 14538 :end 14611 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(export-and-load-and-hook \"raccourcis\")\12" :post-blank 0 :post-affiliated 14538 :mode planning :granularity element :cached t :parent #67# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 7007 :end 7068 :contents-begin 7007 :contents-end 7067 :post-blank 1 :post-affiliated 7007 :mode planning :granularity element :cached t :parent #42# :org-element--cache-sync-key nil)) 0] nil nil 0] org-element--cache-compare)))